"""
This type stub file was generated by pyright.
"""

from odf.namespaces import *

pattern_color = ...
pattern_vector3D = ...
def make_NCName(arg):
    ...

def cnv_angle(attribute, arg, element):
    ...

def cnv_anyURI(attribute, arg, element):
    ...

def cnv_boolean(attribute, arg, element):
    """ XML Schema Part 2: Datatypes Second Edition
        An instance of a datatype that is defined as boolean can have the
        following legal literals {true, false, 1, 0}
    """
    ...

def cnv_color(attribute, arg, element):
    """ A RGB color in conformance with §5.9.11 of [XSL], that is a RGB color in notation “#rrggbb”, where
        rr, gg and bb are 8-bit hexadecimal digits.
    """
    ...

def cnv_configtype(attribute, arg, element):
    ...

def cnv_data_source_has_labels(attribute, arg, element):
    ...

def cnv_date(attribute, arg, element):
    """ A dateOrDateTime value is either an [xmlschema-2] date value or an [xmlschema-2] dateTime
        value.
    """
    ...

def cnv_dateTime(attribute, arg, element):
    """ A dateOrDateTime value is either an [xmlschema-2] date value or an [xmlschema-2] dateTime
        value.
    """
    ...

def cnv_double(attribute, arg, element):
    ...

def cnv_draw_aspect(attribute, arg, element):
    ...

def cnv_duration(attribute, arg, element):
    ...

def cnv_family(attribute, arg, element):
    """ A style family """
    ...

def cnv_formula(attribute, arg, element):
    """ A string containing a formula. Formulas do not have a predefined syntax, but the string should
        begin with a namespace prefix, followed by a “:” (COLON, U+003A) separator, followed by the text
        of the formula. The namespace bound to the prefix determines the syntax and semantics of the
        formula.
    """
    ...

def cnv_ID(attribute, arg, element):
    ...

def cnv_IDREF(attribute, arg, element):
    ...

def cnv_integer(attribute, arg, element):
    ...

pattern_language = ...
def cnv_language(attribute, arg, element):
    ...

def cnv_legend_position(attribute, arg, element):
    ...

pattern_length = ...
def cnv_length(attribute, arg, element):
    """ A (positive or negative) physical length, consisting of magnitude and unit, in conformance with the
        Units of Measure defined in §5.9.13 of [XSL].
    """
    ...

def cnv_lengthorpercent(attribute, arg, element):
    ...

def cnv_list_linkage_type(attribute, arg, element):
    ...

def cnv_metavaluetype(attribute, arg, element):
    ...

def cnv_major_minor(attribute, arg, element):
    ...

pattern_namespacedToken = ...
def cnv_namespacedToken(attribute, arg, element):
    ...

def cnv_NCName(attribute, arg, element):
    """ NCName is defined in http://www.w3.org/TR/REC-xml-names/#NT-NCName
        Essentially an XML name minus ':'
    """
    ...

def cnv_StyleNameRef(attribute, arg, element):
    ...

def cnv_DrawNameRef(attribute, arg, element):
    ...

def cnv_NCNames(attribute, arg, element):
    ...

def cnv_nonNegativeInteger(attribute, arg, element):
    ...

pattern_percent = ...
def cnv_percent(attribute, arg, element):
    ...

pattern_points = ...
def cnv_points(attribute, arg, element):
    ...

def cnv_positiveInteger(attribute, arg, element):
    ...

def cnv_rowOrCol(attribute, arg, element):
    ...

def cnv_string(attribute, arg, element):
    ...

def cnv_stroke_linecap(attribute, arg, element):
    ...

def cnv_textnoteclass(attribute, arg, element):
    ...

def cnv_time(attribute, arg, element):
    ...

def cnv_token(attribute, arg, element):
    ...

pattern_viewbox = ...
def cnv_viewbox(attribute, arg, element):
    ...

def cnv_xlinkshow(attribute, arg, element):
    ...

def cnv_xlinktype(attribute, arg, element):
    ...

attrconverters = ...
class AttrConverters:
    def convert(self, attribute, value, element):
        """ Based on the element, figures out how to check/convert the attribute value
            All values are converted to string
        """
        ...
    


