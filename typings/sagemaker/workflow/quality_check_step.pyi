"""
This type stub file was generated by pyright.
"""

import attr
from abc import ABC
from typing import List, Optional, Union
from sagemaker.workflow.entities import PipelineVariable, RequestType
from sagemaker.workflow.step_collections import StepCollection
from sagemaker.workflow.steps import CacheConfig, Step
from sagemaker.workflow.check_job_config import CheckJobConfig

"""The step definitions for workflow."""
_CONTAINER_BASE_PATH = ...
_CONTAINER_INPUT_PATH = ...
_CONTAINER_OUTPUT_PATH = ...
_BASELINE_DATASET_INPUT_NAME = ...
_RECORD_PREPROCESSOR_SCRIPT_INPUT_NAME = ...
_POST_ANALYTICS_PROCESSOR_SCRIPT_INPUT_NAME = ...
_MODEL_MONITOR_S3_PATH = ...
_BASELINING_S3_PATH = ...
_RESULTS_S3_PATH = ...
_DEFAULT_OUTPUT_NAME = ...
_MODEL_QUALITY_TYPE = ...
_DATA_QUALITY_TYPE = ...
@attr.s
class QualityCheckConfig(ABC):
    """Quality Check Config.

    Attributes:
        baseline_dataset (str or PipelineVariable): The path to the
            baseline_dataset file. This can be a local path or an S3 uri string
        dataset_format (dict): The format of the baseline_dataset.
        output_s3_uri (str or PipelineVariable): Desired S3 destination of
            the constraint_violations and statistics json files (default: None).
            If not specified an auto generated path will be used:
            "s3://<default_session_bucket>/model-monitor/baselining/<job_name>/results"
        post_analytics_processor_script (str): The path to the record post-analytics
            processor script (default: None). This can be a local path or an S3 uri string
            but CANNOT be any type of the PipelineVariable.
    """
    baseline_dataset: Union[str, PipelineVariable] = ...
    dataset_format: dict = ...
    output_s3_uri: Union[str, PipelineVariable] = ...
    post_analytics_processor_script: str = ...


@attr.s
class DataQualityCheckConfig(QualityCheckConfig):
    """Data Quality Check Config.

    Attributes:
        record_preprocessor_script (str): The path to the record preprocessor script
            (default: None).
            This can be a local path or an S3 uri string
            but CANNOT be any type of the PipelineVariable.
    """
    record_preprocessor_script: str = ...


@attr.s
class ModelQualityCheckConfig(QualityCheckConfig):
    """Model Quality Check Config.

    Attributes:
        problem_type (str or PipelineVariable): The type of problem of this model
            quality monitoring.
            Valid values are "Regression", "BinaryClassification", "MulticlassClassification".
        inference_attribute (str or PipelineVariable): Index or JSONpath to
            locate predicted label(s) (default: None).
        probability_attribute (str or PipelineVariable): Index or JSONpath to
            locate probabilities (default: None).
        ground_truth_attribute (str or PipelineVariable: Index or JSONpath to
            locate actual label(s) (default: None).
        probability_threshold_attribute (str or PipelineVariable): Threshold to
            convert probabilities to binaries (default: None).
    """
    problem_type: Union[str, PipelineVariable] = ...
    inference_attribute: Union[str, PipelineVariable] = ...
    probability_attribute: Union[str, PipelineVariable] = ...
    ground_truth_attribute: Union[str, PipelineVariable] = ...
    probability_threshold_attribute: Union[str, PipelineVariable] = ...


class QualityCheckStep(Step):
    """QualityCheck step for workflow."""
    def __init__(self, name: str, quality_check_config: QualityCheckConfig, check_job_config: CheckJobConfig, skip_check: Union[bool, PipelineVariable] = ..., fail_on_violation: Union[bool, PipelineVariable] = ..., register_new_baseline: Union[bool, PipelineVariable] = ..., model_package_group_name: Union[str, PipelineVariable] = ..., supplied_baseline_statistics: Union[str, PipelineVariable] = ..., supplied_baseline_constraints: Union[str, PipelineVariable] = ..., display_name: str = ..., description: str = ..., cache_config: CacheConfig = ..., depends_on: Optional[List[Union[str, Step, StepCollection]]] = ...) -> None:
        """Constructs a QualityCheckStep.

        Args:
            name (str): The name of the QualityCheckStep step.
            quality_check_config (QualityCheckConfig): A QualityCheckConfig instance.
            check_job_config (CheckJobConfig): A CheckJobConfig instance.
            skip_check (bool or PipelineVariable): Whether the check
                should be skipped (default: False).
            fail_on_violation (bool or PipelineVariable): Whether to fail the step
                if violation detected (default: True).
            register_new_baseline (bool or PipelineVariable): Whether
                the new baseline should be registered (default: False).
            model_package_group_name (str or PipelineVariable): The name of a
                registered model package group, among which the baseline will be fetched
                from the latest approved model (default: None).
            supplied_baseline_statistics (str or PipelineVariable): The S3 path
                to the supplied statistics object representing the statistics JSON file
                which will be used for drift to check (default: None).
            supplied_baseline_constraints (str or PipelineVariable): The S3 path
                to the supplied constraints object representing the constraints JSON file
                which will be used for drift to check (default: None).
            display_name (str): The display name of the QualityCheckStep step (default: None).
            description (str): The description of the QualityCheckStep step (default: None).
            cache_config (CacheConfig):  A `sagemaker.workflow.steps.CacheConfig` instance
                (default: None).
            depends_on (List[Union[str, Step, StepCollection]]): A list of `Step`/`StepCollection`
                names or `Step` instances or `StepCollection` instances that this `QualityCheckStep`
                depends on (default: None).
        """
        ...
    
    @property
    def arguments(self) -> RequestType:
        """The arguments dict that is used to define the QualityCheck step."""
        ...
    
    @property
    def properties(self):
        """A Properties object representing the output parameters of the QualityCheck step."""
        ...
    
    def to_request(self) -> RequestType:
        """Updates the dictionary with cache configuration etc."""
        ...
    


