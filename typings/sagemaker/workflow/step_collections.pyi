"""
This type stub file was generated by pyright.
"""

import attr
from typing import List, Optional, Union
from sagemaker.estimator import EstimatorBase
from sagemaker.model import Model
from sagemaker import PipelineModel
from sagemaker.workflow.entities import RequestType
from sagemaker.workflow.steps import Step
from sagemaker.workflow.retry import RetryPolicy

"""
This type stub file was generated by pyright.
"""
@attr.s
class StepCollection:
    """A wrapper of pipeline steps for workflow.

    Attributes:
        name (str): The name of the `StepCollection`.
        steps (List[Step]): A list of steps.
    """
    name: str = ...
    steps: List[Step] = ...
    def request_dicts(self) -> List[RequestType]:
        """Get the request structure for workflow service calls."""
        ...
    
    @property
    def properties(self):
        """The properties of the particular `StepCollection`."""
        ...
    


class RegisterModel(StepCollection):
    """Register Model step collection for workflow."""
    _REGISTER_MODEL_NAME_BASE = ...
    _REPACK_MODEL_NAME_BASE = ...
    def __init__(self, name: str, content_types, response_types, inference_instances=..., transform_instances=..., estimator: EstimatorBase = ..., model_data=..., depends_on: Optional[List[Union[str, Step, StepCollection]]] = ..., repack_model_step_retry_policies: List[RetryPolicy] = ..., register_model_step_retry_policies: List[RetryPolicy] = ..., model_package_group_name=..., model_metrics=..., approval_status=..., image_uri=..., compile_model_family=..., display_name=..., description=..., tags=..., model: Union[Model, PipelineModel] = ..., drift_check_baselines=..., customer_metadata_properties=..., domain=..., sample_payload_url=..., task=..., framework=..., framework_version=..., nearest_model_name=..., data_input_configuration=..., skip_model_validation=..., **kwargs) -> None:
        """Construct steps `_RepackModelStep` and `_RegisterModelStep` based on the estimator.

        Args:
            name (str): The name of the training step.
            estimator: The estimator instance.
            model_data: The S3 uri to the model data from training.
            content_types (list): The supported MIME types for the input data (default: None).
            response_types (list): The supported MIME types for the output data (default: None).
            inference_instances (list): A list of the instance types that are used to
                generate inferences in real-time (default: None).
            transform_instances (list): A list of the instance types on which a transformation
                job can be run or on which an endpoint can be deployed (default: None).
            depends_on (List[Union[str, Step, StepCollection]]): The list of `Step`/`StepCollection`
                names or `Step` instances or `StepCollection` instances that the first step
                in the collection depends on (default: None).
            repack_model_step_retry_policies (List[RetryPolicy]): The list of retry policies
                for the repack model step
            register_model_step_retry_policies (List[RetryPolicy]): The list of retry policies
                for register model step
            model_package_group_name (str): The Model Package Group name or Arn, exclusive to
                `model_package_name`, using `model_package_group_name` makes the Model Package
                versioned (default: None).
            model_metrics (ModelMetrics): ModelMetrics object (default: None).
            approval_status (str): Model Approval Status, values can be "Approved", "Rejected",
                or "PendingManualApproval" (default: "PendingManualApproval").
            image_uri (str): The container image uri for Model Package, if not specified,
                Estimator's training container image is used (default: None).
            compile_model_family (str): The instance family for the compiled model. If
                specified, a compiled model is used (default: None).
            description (str): Model Package description (default: None).
            tags (List[dict[str, str]]): The list of tags to attach to the model package group. Note
                that tags will only be applied to newly created model package groups; if the
                name of an existing group is passed to "model_package_group_name",
                tags will not be applied.
            model (object or Model): A PipelineModel object that comprises a list of models
                which gets executed as a serial inference pipeline or a Model object.
            drift_check_baselines (DriftCheckBaselines): DriftCheckBaselines object (default: None).
            customer_metadata_properties (dict[str, str]): A dictionary of key-value paired
                metadata properties (default: None).
            domain (str): Domain values can be "COMPUTER_VISION", "NATURAL_LANGUAGE_PROCESSING",
                "MACHINE_LEARNING" (default: None).
            sample_payload_url (str): The S3 path where the sample payload is stored
                (default: None).
            task (str): Task values which are supported by Inference Recommender are "FILL_MASK",
                "IMAGE_CLASSIFICATION", "OBJECT_DETECTION", "TEXT_GENERATION", "IMAGE_SEGMENTATION",
                "CLASSIFICATION", "REGRESSION", "OTHER" (default: None).
            framework (str): Machine learning framework of the model package container image
                (default: None).
            framework_version (str): Framework version of the Model Package Container Image
                (default: None).
            nearest_model_name (str): Name of a pre-trained machine learning benchmarked by
                Amazon SageMaker Inference Recommender (default: None).
            data_input_configuration (str): Input object for the model (default: None).
            skip_model_validation (str): Indicates if you want to skip model
                validation. Values can be "All" or "None" (default: None).

            **kwargs: additional arguments to `create_model`.
        """
        ...
    


class EstimatorTransformer(StepCollection):
    """Creates a Transformer step collection for workflow."""
    def __init__(self, name: str, estimator: EstimatorBase, model_data, model_inputs, instance_count, instance_type, transform_inputs, description: str = ..., display_name: str = ..., image_uri=..., predictor_cls=..., env=..., strategy=..., assemble_with=..., output_path=..., output_kms_key=..., accept=..., max_concurrent_transforms=..., max_payload=..., tags=..., volume_kms_key=..., depends_on: Optional[List[Union[str, Step, StepCollection]]] = ..., repack_model_step_retry_policies: List[RetryPolicy] = ..., model_step_retry_policies: List[RetryPolicy] = ..., transform_step_retry_policies: List[RetryPolicy] = ..., **kwargs) -> None:
        """Construct steps required for a Transformer step collection:

        An estimator-centric step collection. It models what happens in workflows
        when invoking the `transform()` method on an estimator instance:
        First, if custom
        model artifacts are required, a `_RepackModelStep` is included.
        Second, a
        `CreateModelStep` with the model data passed in from a training step or other
        training job output.
        Finally, a `TransformerStep`.

        If repacking
        the model artifacts is not necessary, only the CreateModelStep and TransformerStep
        are in the step collection.

        Args:
            name (str): The name of the Transform Step.
            estimator: The estimator instance.
            instance_count (int): The number of EC2 instances to use.
            instance_type (str): The type of EC2 instance to use.
            strategy (str): The strategy used to decide how to batch records in
                a single request (default: None). Valid values: 'MultiRecord'
                and 'SingleRecord'.
            assemble_with (str): How the output is assembled (default: None).
                Valid values: 'Line' or 'None'.
            output_path (str): The S3 location for saving the transform result. If
                not specified, results are stored to a default bucket.
            output_kms_key (str): Optional. A KMS key ID for encrypting the
                transform output (default: None).
            accept (str): The accept header passed by the client to
                the inference endpoint. If it is supported by the endpoint,
                it will be the format of the batch transform output.
            env (dict): The Environment variables to be set for use during the
                transform job (default: None).
            depends_on (List[Union[str, Step, StepCollection]]): The list of `Step`/`StepCollection`
                names or `Step` instances or `StepCollection` instances that the first step
                in the collection depends on (default: None).
            repack_model_step_retry_policies (List[RetryPolicy]): The list of retry policies
                for the repack model step
            model_step_retry_policies (List[RetryPolicy]): The list of retry policies for
                model step
            transform_step_retry_policies (List[RetryPolicy]): The list of retry policies for
                transform step
        """
        ...
    


