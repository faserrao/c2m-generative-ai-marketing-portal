"""
This type stub file was generated by pyright.
"""

import attr
from typing import Dict, List, Optional, Union
from enum import Enum
from sagemaker.workflow.entities import DefaultEnumMeta, RequestType
from sagemaker.workflow.step_collections import StepCollection
from sagemaker.workflow.steps import CacheConfig, Step

"""The step definitions for workflow."""
class CallbackOutputTypeEnum(Enum, metaclass=DefaultEnumMeta):
    """CallbackOutput type enum."""
    String = ...
    Integer = ...
    Boolean = ...
    Float = ...


@attr.s
class CallbackOutput:
    """Output for a callback step.

    Attributes:
        output_name (str): The output name
        output_type (CallbackOutputTypeEnum): The output type
    """
    output_name: str = ...
    output_type: CallbackOutputTypeEnum = ...
    def to_request(self) -> RequestType:
        """Get the request structure for workflow service calls."""
        ...
    
    def expr(self, step_name) -> Dict[str, str]:
        """The 'Get' expression dict for a `CallbackOutput`."""
        ...
    


class CallbackStep(Step):
    """Callback step for workflow."""
    def __init__(self, name: str, sqs_queue_url: str, inputs: dict, outputs: List[CallbackOutput], display_name: str = ..., description: str = ..., cache_config: CacheConfig = ..., depends_on: Optional[List[Union[str, Step, StepCollection]]] = ...) -> None:
        """Constructs a CallbackStep.

        Args:
            name (str): The name of the callback step.
            sqs_queue_url (str): An SQS queue URL for receiving callback messages.
            inputs (dict): Input arguments that will be provided
                in the SQS message body of callback messages.
            outputs (List[CallbackOutput]): Outputs that can be provided when completing a callback.
            display_name (str): The display name of the callback step.
            description (str): The description of the callback step.
            cache_config (CacheConfig):  A `sagemaker.workflow.steps.CacheConfig` instance.
            depends_on (List[Union[str, Step, StepCollection]]): A list of `Step`/`StepCollection`
                names or `Step` instances or `StepCollection` instances that this `CallbackStep`
                depends on.
        """
        ...
    
    @property
    def arguments(self) -> RequestType:
        """The arguments dict that is used to define the callback step."""
        ...
    
    @property
    def properties(self):
        """A Properties object representing the output parameters of the callback step."""
        ...
    
    def to_request(self) -> RequestType:
        """Updates the dictionary with cache configuration."""
        ...
    


