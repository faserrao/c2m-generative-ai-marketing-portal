"""
This type stub file was generated by pyright.
"""

import attr
from enum import Enum
from typing import Dict, List, Union
from sagemaker.workflow.entities import DefaultEnumMeta, Entity, Expression, PrimitiveType, RequestType
from sagemaker.workflow.execution_variables import ExecutionVariable
from sagemaker.workflow.parameters import Parameter
from sagemaker.workflow.properties import Properties

"""Conditions for condition steps.

Ideally, some of these comparison conditions would be implemented as "partial classes",
but use of functools.partial doesn't set correct metadata/type information.
"""
ConditionValueType = Union[ExecutionVariable, Parameter, Properties]
class ConditionTypeEnum(Enum, metaclass=DefaultEnumMeta):
    """Condition type enum."""
    EQ = ...
    GT = ...
    GTE = ...
    IN = ...
    LT = ...
    LTE = ...
    NOT = ...
    OR = ...


@attr.s
class Condition(Entity):
    """Abstract Condition entity.

    Attributes:
        condition_type (ConditionTypeEnum): The type of condition.
    """
    condition_type: ConditionTypeEnum = ...


@attr.s
class ConditionComparison(Condition):
    """Generic comparison condition that can be used to derive specific condition comparisons.

    Attributes:
        left (Union[ConditionValueType, PrimitiveType]): The execution variable, parameter,
            property, or Python primitive value to use in the comparison.
        right (Union[ConditionValueType, PrimitiveType]): The execution variable,
            parameter, property, or Python primitive value to compare to.
    """
    left: Union[ConditionValueType, PrimitiveType] = ...
    right: Union[ConditionValueType, PrimitiveType] = ...
    def to_request(self) -> RequestType:
        """Get the request structure for workflow service calls."""
        ...
    


class ConditionEquals(ConditionComparison):
    """A condition for equality comparisons."""
    def __init__(self, left: Union[ConditionValueType, PrimitiveType], right: Union[ConditionValueType, PrimitiveType]) -> None:
        """Construct A condition for equality comparisons.

        Args:
            left (Union[ConditionValueType, PrimitiveType]): The execution variable,
                parameter, property, or Python primitive value to use in the comparison.
            right (Union[ConditionValueType, PrimitiveType]): The execution
                variable, parameter, property, or Python primitive value to compare to.
        """
        ...
    


class ConditionGreaterThan(ConditionComparison):
    """A condition for greater than comparisons."""
    def __init__(self, left: Union[ConditionValueType, PrimitiveType], right: Union[ConditionValueType, PrimitiveType]) -> None:
        """Construct an instance of ConditionGreaterThan for greater than comparisons.

        Args:
            left (Union[ConditionValueType, PrimitiveType]): The execution variable,
                parameter, property, or Python primitive value to use in the comparison.
            right (Union[ConditionValueType, PrimitiveType]): The execution
                variable, parameter, property, or Python primitive value to compare to.
        """
        ...
    


class ConditionGreaterThanOrEqualTo(ConditionComparison):
    """A condition for greater than or equal to comparisons."""
    def __init__(self, left: Union[ConditionValueType, PrimitiveType], right: Union[ConditionValueType, PrimitiveType]) -> None:
        """Construct of ConditionGreaterThanOrEqualTo for greater than or equal to comparisons.

        Args:
            left (Union[ConditionValueType, PrimitiveType]): The execution variable,
                parameter, property, or Python primitive value to use in the comparison.
            right (Union[ConditionValueType, PrimitiveType]): The execution
                variable, parameter, property, or Python primitive value to compare to.
        """
        ...
    


class ConditionLessThan(ConditionComparison):
    """A condition for less than comparisons."""
    def __init__(self, left: Union[ConditionValueType, PrimitiveType], right: Union[ConditionValueType, PrimitiveType]) -> None:
        """Construct an instance of ConditionLessThan for less than comparisons.

        Args:
            left (Union[ConditionValueType, PrimitiveType]): The execution variable,
                parameter, property, or Python primitive value to use in the comparison.
            right (Union[ConditionValueType, PrimitiveType]): The execution
                variable, parameter, property, or Python primitive value to compare to.
        """
        ...
    


class ConditionLessThanOrEqualTo(ConditionComparison):
    """A condition for less than or equal to comparisons."""
    def __init__(self, left: Union[ConditionValueType, PrimitiveType], right: Union[ConditionValueType, PrimitiveType]) -> None:
        """Construct ConditionLessThanOrEqualTo for less than or equal to comparisons.

        Args:
            left (Union[ConditionValueType, PrimitiveType]): The execution variable,
                parameter, property, or Python primitive value to use in the comparison.
            right (Union[ConditionValueType, PrimitiveType]): The execution
                variable, parameter, property, or Python primitive value to compare to.
        """
        ...
    


class ConditionIn(Condition):
    """A condition to check membership."""
    def __init__(self, value: Union[ConditionValueType, PrimitiveType], in_values: List[Union[ConditionValueType, PrimitiveType]]) -> None:
        """Construct a `ConditionIn` condition to check membership.

        Args:
            value (Union[ConditionValueType, PrimitiveType]): The execution variable,
                parameter, property or primitive value to check for membership.
            in_values (List[Union[ConditionValueType, PrimitiveType]]): The list
                of values to check for membership in.
        """
        ...
    
    def to_request(self) -> RequestType:
        """Get the request structure for workflow service calls."""
        ...
    


class ConditionNot(Condition):
    """A condition for negating another `Condition`."""
    def __init__(self, expression: Condition) -> None:
        """Construct a `ConditionNot` condition for negating another `Condition`.

        Attributes:
            expression (Condition): A `Condition` to take the negation of.
        """
        ...
    
    def to_request(self) -> RequestType:
        """Get the request structure for workflow service calls."""
        ...
    


class ConditionOr(Condition):
    """A condition for taking the logical OR of a list of `Condition` instances."""
    def __init__(self, conditions: List[Condition] = ...) -> None:
        """Construct a `ConditionOr` condition.

        Attributes:
            conditions (List[Condition]): A list of `Condition` instances to logically OR.
        """
        ...
    
    def to_request(self) -> RequestType:
        """Get the request structure for workflow service calls."""
        ...
    


def primitive_or_expr(value: Union[ExecutionVariable, Expression, PrimitiveType, Parameter, Properties]) -> Union[Dict[str, str], PrimitiveType]:
    """Provide the expression of the value or return value if it is a primitive.

    Args:
        value (Union[ConditionValueType, PrimitiveType]): The value to evaluate.
    Returns:
        Either the expression of the value or the primitive value.
    """
    ...

