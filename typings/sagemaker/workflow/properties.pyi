"""
This type stub file was generated by pyright.
"""

import attr
from abc import ABCMeta
from typing import Dict, List, Union
from sagemaker.workflow.entities import Expression, PipelineVariable

"""
This type stub file was generated by pyright.
"""
class PropertiesMeta(ABCMeta):
    """Load an internal shapes attribute from the botocore service model

    for sagemaker and emr service.
    """
    _shapes_map = ...
    _primitive_types = ...
    def __new__(mcs, *args, **kwargs):
        """Loads up the shapes from the botocore service model."""
        ...
    


class Properties(PipelineVariable, metaclass=PropertiesMeta):
    """Properties for use in workflow expressions."""
    def __init__(self, step_name: str, path: str = ..., shape_name: str = ..., shape_names: List[str] = ..., service_name: str = ...) -> None:
        """Create a Properties instance representing the given shape.

        Args:
            step_name (str): The name of the Step this Property belongs to.
            path (str): The relative path of this Property value.
            shape_name (str): The botocore service model shape name.
            shape_names (str): A List of the botocore service model shape name.
        """
        ...
    
    @property
    def expr(self):
        """The 'Get' expression dict for a `Properties`."""
        ...
    


class PropertiesList(Properties):
    """PropertiesList for use in workflow expressions."""
    def __init__(self, step_name: str, path: str, shape_name: str = ..., service_name: str = ...) -> None:
        """Create a PropertiesList instance representing the given shape.

        Args:
            step_name (str): The name of the Step this Property belongs to.
            path (str): The relative path of this Property value.
            shape_name (str): The botocore service model shape name.
            service_name (str): The botocore service name.
        """
        ...
    
    def __getitem__(self, item: Union[int, str]):
        """Populate the indexing item with a Property, for both lists and dictionaries.

        Args:
            item (Union[int, str]): The index of the item in sequence.
        """
        ...
    


class PropertiesMap(Properties):
    """PropertiesMap for use in workflow expressions."""
    def __init__(self, step_name: str, path: str, shape_name: str = ..., service_name: str = ...) -> None:
        """Create a PropertiesMap instance representing the given shape.

        Args:
            step_name (str): The name of the Step this Property belongs to.
            path (str): The relative path of this Property value.
            shape_name (str): The botocore service model shape name.
            service_name (str): The botocore service name.
        """
        ...
    
    def __getitem__(self, item: Union[int, str]):
        """Populate the indexing item with a Property, for both lists and dictionaries.

        Args:
            item (Union[int, str]): The index of the item in sequence.
        """
        ...
    


@attr.s
class PropertyFile(Expression):
    """Provides a property file struct.

    Attributes:
        name (str): The name of the property file for reference with `JsonGet` functions.
        output_name (str): The name of the processing job output channel.
        path (str): The path to the file at the output channel location.
    """
    name: str = ...
    output_name: str = ...
    path: str = ...
    @property
    def expr(self) -> Dict[str, str]:
        """The expression dict for a `PropertyFile`."""
        ...
    


