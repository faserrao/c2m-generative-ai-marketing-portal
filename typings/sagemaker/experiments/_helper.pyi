"""
This type stub file was generated by pyright.
"""

"""Contains the helper classes for SageMaker Experiment."""
logger = ...
_DEFAULT_ARTIFACT_PREFIX = ...
_DEFAULT_ARTIFACT_TYPE = ...
class _ArtifactUploader:
    """Artifact uploader"""
    def __init__(self, trial_component_name, sagemaker_session, artifact_bucket=..., artifact_prefix=...) -> None:
        """Initialize a `_ArtifactUploader` instance.

        Args:
            trial_component_name (str): The name of the trial component,
                which is used to generate the S3 path to upload the artifact to.
            sagemaker_session (sagemaker.session.Session): Session object which
                manages interactions with Amazon SageMaker APIs and any other
                AWS services needed.
            artifact_bucket (str): The S3 bucket to upload the artifact to.
                If not specified, the default bucket defined in `sagemaker_session`
                will be used.
            artifact_prefix (str): The S3 key prefix used to generate the S3 path
                to upload the artifact to (default: "trial-component-artifacts").
        """
        ...
    
    def upload_artifact(self, file_path):
        """Upload an artifact file to S3.

        Args:
            file_path (str): the file path of the artifact

        Returns:
            (str, str): The s3 URI of the uploaded file and the etag of the file.

        Raises:
            ValueError: If file does not exist.
        """
        ...
    
    def upload_object_artifact(self, artifact_name, artifact_object, file_extension=...):
        """Upload an artifact object to S3.

        Args:
            artifact_name (str): the name of the artifact.
            artifact_object (obj): the object of the artifact
            file_extension (str): Optional file extension.

        Returns:
            str: The s3 URI of the uploaded file and the version of the file.
        """
        ...
    


class _LineageArtifactManager:
    """A helper class to manage Lineage Artifacts"""
    def __init__(self, name, source_uri, etag, source_arn=..., dest_arn=..., artifact_type=...) -> None:
        """Initialize a `_LineageArtifactManager` instance.

        Args:
            name (str): The name of the Lineage artifact to be created.
            source_uri (str): The source URI used to create the Lineage artifact.
            etag (str): The S3 Etag used to create the Lineage artifact.
            source_arn (str): The source ARN of a trail component to associate
                this Lineage artifact with (default: None).
            dest_arn (str): The destination ARN of a trial component to associate
                this Lineage artifact with (default: None).
            artifact_type (str): The type of the Lineage artifact (default: "Tracker").
        """
        ...
    
    def create_artifact(self, sagemaker_session):
        """Create the artifact by calling `CreateArtifact` API

        Args:
            sagemaker_session (sagemaker.session.Session): Session object which
                manages interactions with Amazon SageMaker APIs and any other
                AWS services needed.
        """
        ...
    
    def add_association(self, sagemaker_session):
        """Associate the artifact with a source/destination ARN (e.g. trial component arn)

        Args:
            sagemaker_session (sagemaker.session.Session): Session object which
                manages interactions with Amazon SageMaker APIs and any other
                AWS services needed.
        """
        ...
    


class _LineageArtifactTracker:
    """Lineage Artifact Tracker"""
    def __init__(self, trial_component_arn, sagemaker_session) -> None:
        """Initialize a `_LineageArtifactTracker` instance.

        Args:
            trial_component_arn (str): The ARN of the trial component to be
                associated with the input/output artifacts.
            sagemaker_session (sagemaker.session.Session): Session object which
                manages interactions with Amazon SageMaker APIs and any other
                AWS services needed.
        """
        ...
    
    def add_input_artifact(self, name, source_uri, etag, artifact_type):
        """Add a Lineage input artifact locally

        Args:
            name (str): The name of the Lineage input artifact to be added.
            source_uri (str): The source URI used to create the Lineage input artifact.
            etag (str): The S3 Etag used to create the Lineage input artifact.
            artifact_type (str): The type of the Lineage input artifact.
        """
        ...
    
    def add_output_artifact(self, name, source_uri, etag, artifact_type):
        """Add a Lineage output artifact locally

        Args:
            name (str): The name of the Lineage output artifact to be added.
            source_uri (str): The source URI used to create the Lineage output artifact.
            etag (str): The S3 Etag used to create the Lineage output artifact.
            artifact_type (str): The type of the Lineage output artifact.
        """
        ...
    
    def save(self):
        """Persist any artifact data saved locally"""
        ...
    


