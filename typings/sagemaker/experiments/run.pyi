"""
This type stub file was generated by pyright.
"""

import datetime
from enum import Enum
from typing import Dict, List, Optional, TYPE_CHECKING, Union
from numpy import array
from sagemaker.experiments._utils import validate_invoked_inside_run_context
from sagemaker import Session

"""
This type stub file was generated by pyright.
"""
if TYPE_CHECKING:
    ...
logger = ...
RUN_NAME_BASE = ...
TRIAL_NAME_TEMPLATE = ...
MAX_RUN_TC_ARTIFACTS_LEN = ...
MAX_NAME_LEN_IN_BACKEND = ...
EXPERIMENT_NAME = ...
TRIAL_NAME = ...
RUN_NAME = ...
DELIMITER = ...
RUN_TC_TAG_KEY = ...
RUN_TC_TAG_VALUE = ...
RUN_TC_TAG = ...
class SortByType(Enum):
    """The type of property by which to sort the `list_runs` results."""
    CREATION_TIME = ...
    NAME = ...


class SortOrderType(Enum):
    """The type of order to sort the list or search results."""
    ASCENDING = ...
    DESCENDING = ...


class Run:
    """A collection of parameters, metrics, and artifacts to create a ML model."""
    def __init__(self, experiment_name: str, run_name: Optional[str] = ..., experiment_display_name: Optional[str] = ..., run_display_name: Optional[str] = ..., tags: Optional[List[Dict[str, str]]] = ..., sagemaker_session: Optional[Session] = ..., artifact_bucket: Optional[str] = ..., artifact_prefix: Optional[str] = ...) -> None:
        """Construct a `Run` instance.

        SageMaker Experiments automatically tracks the inputs, parameters, configurations,
        and results of your iterations as runs.
        You can assign, group, and organize these runs into experiments.
        You can also create, compare, and evaluate runs.

        The code sample below shows how to initialize a run, log parameters to the Run object
        and invoke a training job under the context of this Run object, which automatically
        passes the run's ``experiment_config`` (including the experiment name, run name etc.)
        to the training job.

        Note:
            All log methods (e.g. ``log_parameter``, ``log_metric``, etc.) have to be called within
            the run context (i.e. the ``with`` statement). Otherwise, a ``RuntimeError`` is thrown.

        .. code:: python

            with Run(experiment_name="my-exp", run_name="my-run", ...) as run:
                run.log_parameter(...)
                ...
                estimator.fit(job_name="my-job")  # Create a training job

        In order to reuse an existing run to log extra data, ``load_run`` is recommended.
        For example, instead of the ``Run`` constructor, the ``load_run`` is recommended to use
        in a job script to load the existing run created before the job launch.
        Otherwise, a new run may be created each time you launch a job.

        The code snippet below displays how to load the run initialized above
        in a custom training job script, where no ``run_name`` or ``experiment_name``
        is presented as they are automatically retrieved from the experiment config
        in the job environment.

        .. code:: python

            with load_run(sagemaker_session=sagemaker_session) as run:
                run.log_metric(...)
                ...

        Args:
            experiment_name (str): The name of the experiment. The name must be unique
                within an account.
            run_name (str): The name of the run. If it is not specified, one is auto generated.
            experiment_display_name (str): Name of the experiment that will appear in UI,
                such as SageMaker Studio. (default: None). This display name is used in
                a create experiment call. If an experiment with the specified name already exists,
                this display name won't take effect.
            run_display_name (str): The display name of the run used in UI (default: None).
                This display name is used in a create run call. If a run with the
                specified name already exists, this display name won't take effect.
            tags (List[Dict[str, str]]): A list of tags to be used for all create calls,
                e.g. to create an experiment, a run group, etc. (default: None).
            sagemaker_session (sagemaker.session.Session): Session object which
                manages interactions with Amazon SageMaker APIs and any other
                AWS services needed. If not specified, one is created using the
                default AWS configuration chain.
            artifact_bucket (str): The S3 bucket to upload the artifact to.
                If not specified, the default bucket defined in `sagemaker_session`
                will be used.
            artifact_prefix (str): The S3 key prefix used to generate the S3 path
                to upload the artifact to (default: "trial-component-artifacts").
        """
        ...
    
    @property
    def experiment_config(self) -> dict:
        """Get experiment config from run attributes."""
        ...
    
    @validate_invoked_inside_run_context
    def log_parameter(self, name: str, value: Union[str, int, float]):
        """Record a single parameter value for this run.

        Overwrites any previous value recorded for the specified parameter name.

        Args:
            name (str): The name of the parameter.
            value (str or int or float): The value of the parameter.
        """
        ...
    
    @validate_invoked_inside_run_context
    def log_parameters(self, parameters: Dict[str, Union[str, int, float]]):
        """Record a collection of parameter values for this run.

        Args:
            parameters (dict[str, str or int or float]): The parameters to record.
        """
        ...
    
    @validate_invoked_inside_run_context
    def log_metric(self, name: str, value: float, timestamp: Optional[datetime.datetime] = ..., step: Optional[int] = ...):
        """Record a custom scalar metric value for this run.

        Note:
             This method is for manual custom metrics, for automatic metrics see the
             ``enable_sagemaker_metrics`` parameter on the ``estimator`` class.

        Args:
            name (str): The name of the metric.
            value (float): The value of the metric.
            timestamp (datetime.datetime): The timestamp of the metric.
                If not specified, the current UTC time will be used.
            step (int): The integer iteration number of the metric value (default: None).
        """
        ...
    
    @validate_invoked_inside_run_context
    def log_precision_recall(self, y_true: Union[list, array], predicted_probabilities: Union[list, array], positive_label: Optional[Union[str, int]] = ..., title: Optional[str] = ..., is_output: bool = ..., no_skill: Optional[int] = ...):
        """Create and log a precision recall graph artifact for Studio UI to render.

        The artifact is stored in S3 and represented as a lineage artifact
        with an association with the run.

        You can view the artifact in the UI.
        If your job is created by a pipeline execution you can view the artifact
        by selecting the corresponding step in the pipelines UI.
        See also `SageMaker Pipelines <https://aws.amazon.com/sagemaker/pipelines/>`_

        This method requires sklearn library.

        Args:
            y_true (list or array): True labels. If labels are not binary
                then positive_label should be given.
            predicted_probabilities (list or array): Estimated/predicted probabilities.
            positive_label (str or int): Label of the positive class (default: None).
            title (str): Title of the graph (default: None).
            is_output (bool): Determines direction of association to the
                run. Defaults to True (output artifact).
                If set to False then represented as input association.
            no_skill (int): The precision threshold under which the classifier cannot discriminate
                between the classes and would predict a random class or a constant class in
                all cases (default: None).
        """
        ...
    
    @validate_invoked_inside_run_context
    def log_roc_curve(self, y_true: Union[list, array], y_score: Union[list, array], title: Optional[str] = ..., is_output: bool = ...):
        """Create and log a receiver operating characteristic (ROC curve) artifact.

        The artifact is stored in S3 and represented as a lineage artifact
        with an association with the run.

        You can view the artifact in the UI.
        If your job is created by a pipeline execution you can view the artifact
        by selecting the corresponding step in the pipelines UI.
        See also `SageMaker Pipelines <https://aws.amazon.com/sagemaker/pipelines/>`_

        This method requires sklearn library.

        Args:
            y_true (list or array): True labels. If labels are not binary
                then positive_label should be given.
            y_score (list or array): Estimated/predicted probabilities.
            title (str): Title of the graph (default: None).
            is_output (bool): Determines direction of association to the
                run. Defaults to True (output artifact).
                If set to False then represented as input association.
        """
        ...
    
    @validate_invoked_inside_run_context
    def log_confusion_matrix(self, y_true: Union[list, array], y_pred: Union[list, array], title: Optional[str] = ..., is_output: bool = ...):
        """Create and log a confusion matrix artifact.

        The artifact is stored in S3 and represented as a lineage artifact
        with an association with the run.

        You can view the artifact in the UI.
        If your job is created by a pipeline execution you can view the
        artifact by selecting the corresponding step in the pipelines UI.
        See also `SageMaker Pipelines <https://aws.amazon.com/sagemaker/pipelines/>`_
        This method requires sklearn library.

        Args:
            y_true (list or array): True labels. If labels are not binary
                then positive_label should be given.
            y_pred (list or array): Predicted labels.
            title (str): Title of the graph (default: None).
            is_output (bool): Determines direction of association to the
                run. Defaults to True (output artifact).
                If set to False then represented as input association.
        """
        ...
    
    @validate_invoked_inside_run_context
    def log_artifact(self, name: str, value: str, media_type: Optional[str] = ..., is_output: bool = ...):
        """Record a single artifact for this run.

        Overwrites any previous value recorded for the specified name.

        Args:
            name (str): The name of the artifact.
            value (str): The value.
            media_type (str): The MediaType (MIME type) of the value (default: None).
            is_output (bool): Determines direction of association to the
                run. Defaults to True (output artifact).
                If set to False then represented as input association.
        """
        ...
    
    @validate_invoked_inside_run_context
    def log_file(self, file_path: str, name: Optional[str] = ..., media_type: Optional[str] = ..., is_output: bool = ...):
        """Upload a file to s3 and store it as an input/output artifact in this run.

        Args:
            file_path (str): The path of the local file to upload.
            name (str): The name of the artifact (default: None).
            media_type (str): The MediaType (MIME type) of the file.
                If not specified, this library will attempt to infer the media type
                from the file extension of ``file_path``.
            is_output (bool): Determines direction of association to the
                run. Defaults to True (output artifact).
                If set to False then represented as input association.
        """
        ...
    
    def close(self):
        """Persist any data saved locally."""
        ...
    
    def __enter__(self):
        """Updates the start time of the run.

        Returns:
            object: self.
        """
        ...
    
    def __exit__(self, exc_type, exc_value, exc_traceback):
        """Updates the end time of the run.

        Args:
            exc_type (str): The exception type.
            exc_value (str): The exception value.
            exc_traceback (str): The stack trace of the exception.
        """
        ...
    
    def __getstate__(self):
        """Overriding this method to prevent instance of Run from being pickled.

        Raise:
            NotImplementedError: If attempting to pickle this instance.
        """
        ...
    


def load_run(run_name: Optional[str] = ..., experiment_name: Optional[str] = ..., sagemaker_session: Optional[Session] = ..., artifact_bucket: Optional[str] = ..., artifact_prefix: Optional[str] = ...) -> Run:
    """Load an existing run.

    In order to reuse an existing run to log extra data, ``load_run`` is recommended.
    It can be used in several ways:

    1. Use ``load_run`` by explicitly passing in ``run_name`` and ``experiment_name``.

    If ``run_name`` and ``experiment_name`` are passed in, they are honored over
    the default experiment config in the job environment or the run context
    (i.e. within the ``with`` block).

    Note:
        Both ``run_name`` and ``experiment_name`` should be supplied to make this usage work.
        Otherwise, you may get a ``ValueError``.

    .. code:: python

        with load_run(experiment_name="my-exp", run_name="my-run") as run:
            run.log_metric(...)
            ...

    2. Use the ``load_run`` in a job script without supplying ``run_name`` and ``experiment_name``.

    In this case, the default experiment config (specified when creating the job) is fetched
    from the job environment to load the run.

    .. code:: python

        # In a job script
        with load_run() as run:
            run.log_metric(...)
            ...

    3. Use the ``load_run`` in a notebook within a run context (i.e. the ``with`` block)
    but without supplying ``run_name`` and ``experiment_name``.

    Every time we call ``with Run(...) as run1:``, the initialized ``run1`` is tracked
    in the run context. Then when we call ``load_run()`` under this with statement, the ``run1``
    in the context is loaded by default.

    .. code:: python

        # In a notebook
        with Run(experiment_name="my-exp", run_name="my-run", ...) as run1:
            run1.log_parameter(...)

            with load_run() as run2: # run2 is the same object as run1
                run2.log_metric(...)
                ...

    Args:
        run_name (str): The name of the run to be loaded (default: None).
            If it is None, the ``RunName`` in the ``ExperimentConfig`` of the job will be
            fetched to load the run.
        experiment_name (str): The name of the Experiment that the to be loaded run
            is associated with (default: None).
            Note: the experiment_name must be supplied along with a valid run_name.
            Otherwise, it will be ignored.
        sagemaker_session (sagemaker.session.Session): Session object which
            manages interactions with Amazon SageMaker APIs and any other
            AWS services needed. If not specified, one is created using the
            default AWS configuration chain.
        artifact_bucket (str): The S3 bucket to upload the artifact to.
                If not specified, the default bucket defined in `sagemaker_session`
                will be used.
        artifact_prefix (str): The S3 key prefix used to generate the S3 path
            to upload the artifact to (default: "trial-component-artifacts").

    Returns:
        Run: The loaded Run object.
    """
    ...

def list_runs(experiment_name: str, created_before: Optional[datetime.datetime] = ..., created_after: Optional[datetime.datetime] = ..., sagemaker_session: Optional[Session] = ..., max_results: Optional[int] = ..., next_token: Optional[str] = ..., sort_by: SortByType = ..., sort_order: SortOrderType = ...) -> list:
    """Return a list of ``Run`` objects matching the given criteria.

    Args:
        experiment_name (str): Only Run objects related to the specified experiment
            are returned.
        created_before (datetime.datetime): Return Run objects created before this instant
            (default: None).
        created_after (datetime.datetime): Return Run objects created after this instant
            (default: None).
        sagemaker_session (sagemaker.session.Session): Session object which
            manages interactions with Amazon SageMaker APIs and any other
            AWS services needed. If not specified, one is created using the
            default AWS configuration chain.
        max_results (int): Maximum number of Run objects to retrieve (default: None).
        next_token (str): Token for next page of results (default: None).
        sort_by (SortByType): The property to sort results by. One of NAME, CREATION_TIME
            (default: CREATION_TIME).
        sort_order (SortOrderType): One of ASCENDING, or DESCENDING (default: DESCENDING).

    Returns:
        list: A list of ``Run`` objects.
    """
    ...

