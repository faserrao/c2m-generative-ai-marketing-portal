"""
This type stub file was generated by pyright.
"""

from sagemaker.session import Session

"""Contains classes to manage metrics for Sagemaker Experiment"""
METRICS_DIR = ...
METRIC_TS_LOWER_BOUND_TO_NOW = ...
METRIC_TS_UPPER_BOUND_FROM_NOW = ...
BATCH_SIZE = ...
logger = ...
class _RawMetricData:
    """A Raw Metric Data Object"""
    MetricName = ...
    Value = ...
    Timestamp = ...
    Step = ...
    def __init__(self, metric_name, value, timestamp=..., step=...) -> None:
        """Construct a `_RawMetricData` instance.

        Args:
            metric_name (str): The name of the metric.
            value (float): The value of the metric.
            timestamp (datetime.datetime or float or str): Timestamp of the metric.
                If not specified, the current UTC time will be used.
            step (int):  Iteration number of the metric (default: None).
        """
        ...
    
    def to_record(self):
        """Convert the `_RawMetricData` object to dict"""
        ...
    
    def to_raw_metric_data(self):
        """Converts the metric data to a BatchPutMetrics RawMetricData item"""
        ...
    
    def __str__(self) -> str:
        """String representation of the `_RawMetricData` object."""
        ...
    
    def __repr__(self):
        """Return a string representation of this _RawMetricData` object."""
        ...
    


class _MetricsManager:
    """Collects metrics and sends them directly to SageMaker Metrics data plane APIs."""
    def __init__(self, trial_component_name: str, sagemaker_session: Session, sink=...) -> None:
        """Initialize a `_MetricsManager` instance

        Args:
            trial_component_name (str): The Name of the Trial Component to log metrics to
            sagemaker_session (sagemaker.session.Session): Session object which
                manages interactions with Amazon SageMaker APIs and any other
                AWS services needed. If not specified, one is created using the
                default AWS configuration chain.
            sink (object): The metrics sink to use.
        """
        ...
    
    def log_metric(self, metric_name, value, timestamp=..., step=...):
        """Sends a metric to metrics service."""
        ...
    
    def __enter__(self):
        """Return self"""
        ...
    
    def __exit__(self, exc_type, exc_value, exc_traceback):
        """Execute self.close()"""
        ...
    
    def close(self):
        """Close the metrics object."""
        ...
    


class _SyncMetricsSink:
    """Collects metrics and sends them directly to metrics service."""
    def __init__(self, trial_component_name, metrics_client) -> None:
        """Initialize a `_SyncMetricsSink` instance

        Args:
            trial_component_name (str): The Name of the Trial Component to log metrics.
            metrics_client (boto3.client): boto client for metrics service
        """
        ...
    
    def log_metric(self, metric_data):
        """Sends a metric to metrics service."""
        ...
    
    def close(self):
        """Drains any remaining metrics."""
        ...
    


class _MetricQueue:
    """A thread safe queue for sending metrics to SageMaker.

    Args:
        trial_component_name (str): the ARN of the resource
        metric_name (str): the name of the metric
        metrics_client (boto_client): the boto client for SageMaker Metrics service
    """
    _CONSUMER_SLEEP_SECONDS = ...
    def __init__(self, trial_component_name, metric_name, metrics_client) -> None:
        ...
    
    def log_metric(self, metric_data):
        """Adds a metric data point to the queue"""
        ...
    
    def close(self):
        """Flushes any buffered metrics"""
        ...
    
    def is_active(self):
        """Is the thread active (still draining metrics to SageMaker)"""
        ...
    


class _AsyncMetricsSink:
    """Collects metrics and sends them directly to metrics service."""
    _COMPLETE_SLEEP_SECONDS = ...
    def __init__(self, trial_component_name, metrics_client) -> None:
        """Initialize a `_AsyncMetricsSink` instance

        Args:
            trial_component_name (str): The Name of the Trial Component to log metrics to.
            metrics_client (boto3.client): boto client for metrics service
        """
        ...
    
    def log_metric(self, metric_data):
        """Sends a metric to metrics service."""
        ...
    
    def close(self):
        """Closes the metric file."""
        ...
    


