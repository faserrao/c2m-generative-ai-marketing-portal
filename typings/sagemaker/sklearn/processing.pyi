"""
This type stub file was generated by pyright.
"""

from typing import Dict, List, Optional, Union
from sagemaker.network import NetworkConfig
from sagemaker import Session
from sagemaker.processing import ScriptProcessor
from sagemaker.workflow.entities import PipelineVariable

"""
This type stub file was generated by pyright.
"""
class SKLearnProcessor(ScriptProcessor):
    """Handles Amazon SageMaker processing tasks for jobs using scikit-learn."""
    def __init__(self, framework_version: str, role: Optional[Union[str, PipelineVariable]] = ..., instance_count: Union[int, PipelineVariable] = ..., instance_type: Union[str, PipelineVariable] = ..., command: Optional[List[str]] = ..., volume_size_in_gb: Union[int, PipelineVariable] = ..., volume_kms_key: Optional[Union[str, PipelineVariable]] = ..., output_kms_key: Optional[Union[str, PipelineVariable]] = ..., max_runtime_in_seconds: Optional[Union[int, PipelineVariable]] = ..., base_job_name: Optional[str] = ..., sagemaker_session: Optional[Session] = ..., env: Optional[Dict[str, Union[str, PipelineVariable]]] = ..., tags: Optional[List[Dict[str, Union[str, PipelineVariable]]]] = ..., network_config: Optional[NetworkConfig] = ...) -> None:
        """Initialize an ``SKLearnProcessor`` instance.

        The SKLearnProcessor handles Amazon SageMaker processing tasks for jobs using scikit-learn.

        Args:
            framework_version (str): The version of scikit-learn.
            role (str): An AWS IAM role name or ARN. The Amazon SageMaker training jobs
                and APIs that create Amazon SageMaker endpoints use this role
                to access training data and model artifacts. After the endpoint
                is created, the inference code might use the IAM role, if it
                needs to access an AWS resource.
            instance_type (str or PipelineVariable): Type of EC2 instance to use for
                processing, for example, 'ml.c4.xlarge'.
            instance_count (int or PipelineVariable): The number of instances to run
                the Processing job with. Defaults to 1.
            command ([str]): The command to run, along with any command-line flags.
                Example: ["python3", "-v"]. If not provided, ["python3"] or ["python2"]
                will be chosen based on the py_version parameter.
            volume_size_in_gb (int or PipelineVariable): Size in GB of the EBS volume to
                use for storing data during processing (default: 30).
            volume_kms_key (str or PipelineVariable): A KMS key for the processing
                volume.
            output_kms_key (str or PipelineVariable): The KMS key id for all ProcessingOutputs.
            max_runtime_in_seconds (int or PipelineVariable): Timeout in seconds.
                After this amount of time Amazon SageMaker terminates the job
                regardless of its current status.
            base_job_name (str): Prefix for processing name. If not specified,
                the processor generates a default job name, based on the
                training image name and current timestamp.
            sagemaker_session (sagemaker.session.Session): Session object which
                manages interactions with Amazon SageMaker APIs and any other
                AWS services needed. If not specified, the processor creates one
                using the default AWS configuration chain.
            env (dict[str, str] or dict[str, PipelineVariable]): Environment variables
                to be passed to the processing job.
            tags (list[dict[str, str] or list[dict[str, PipelineVariable]]): List of tags
                to be passed to the processing job.
            network_config (sagemaker.network.NetworkConfig): A NetworkConfig
                object that configures network isolation, encryption of
                inter-container traffic, security group IDs, and subnets.
        """
        ...
    


