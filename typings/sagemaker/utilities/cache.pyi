"""
This type stub file was generated by pyright.
"""

import datetime
from typing import Callable, Generic, Optional, TypeVar

"""This module defines a LRU cache class."""
KeyType = TypeVar("KeyType")
ValType = TypeVar("ValType")
class LRUCache(Generic[KeyType, ValType]):
    """Class that implements LRU cache with expiring items.

    LRU caches remove items in a FIFO manner, such that the oldest
    items to be used are the first to be removed.
    If you attempt to retrieve a cache item that is older than the
    expiration time, the item will be invalidated.
    """
    class Element:
        """Class describes the values in the cache.

        This object stores the value itself as well as a timestamp so that this
        element can be invalidated if it becomes too old.
        """
        def __init__(self, value: ValType, creation_time: datetime.datetime) -> None:
            """Initialize an ``Element`` instance for ``LRUCache``.

            Args:
                value (ValType): Value that is stored in cache.
                creation_time (datetime.datetime): Time at which cache item was created.
            """
            ...
        
    
    
    def __init__(self, max_cache_items: int, expiration_horizon: datetime.timedelta, retrieval_function: Callable[[KeyType, ValType], ValType]) -> None:
        """Initialize an ``LRUCache`` instance.

        Args:
            max_cache_items (int): Maximum number of items to store in cache.
            expiration_horizon (datetime.timedelta): Maximum time duration a cache element can
                persist before being invalidated.
            retrieval_function (Callable[[KeyType, ValType], ValType]): Function which maps cache
                keys and current values to new values. This function must have kwarg arguments
                ``key`` and ``value``. This function is called as a fallback when the key
                is not found in the cache, or a key has expired.

        """
        ...
    
    def __len__(self) -> int:
        """Returns number of elements in cache."""
        ...
    
    def __contains__(self, key: KeyType) -> bool:
        """Returns True if key is found in cache, False otherwise.

        Args:
            key (KeyType): Key in cache to retrieve.
        """
        ...
    
    def clear(self) -> None:
        """Deletes all elements from the cache."""
        ...
    
    def get(self, key: KeyType, data_source_fallback: Optional[bool] = ...) -> ValType:
        """Returns value corresponding to key in cache.

        Args:
            key (KeyType): Key in cache to retrieve.
            data_source_fallback (Optional[bool]): True if data should be retrieved if
                it's stale or not in cache. Default: True.
            Raises:
                KeyError: If key is not found in cache or is outdated and
                ``data_source_fallback`` is False.
        """
        ...
    
    def put(self, key: KeyType, value: Optional[ValType] = ...) -> None:
        """Adds key to cache using ``retrieval_function``.

        If value is provided, this is used instead. If the key is already in cache,
        the old element is removed. If the cache size exceeds the size limit, old
        elements are removed in order to meet the limit.

        Args:
            key (KeyType): Key in cache to retrieve.
            value (Optional[ValType]): Value to store for key. Default: None.
        """
        ...
    


