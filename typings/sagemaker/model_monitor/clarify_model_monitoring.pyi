"""
This type stub file was generated by pyright.
"""

from sagemaker.model_monitor import model_monitoring as mm

"""
This type stub file was generated by pyright.
"""
_LOGGER = ...
class ClarifyModelMonitor(mm.ModelMonitor):
    """Base class of Amazon SageMaker Explainability API model monitors.

    This class is an ``abstract base class``, please instantiate its subclasses
    if you want to monitor bias metrics or feature attribution of an endpoint.
    """
    def __init__(self, role=..., instance_count=..., instance_type=..., volume_size_in_gb=..., volume_kms_key=..., output_kms_key=..., max_runtime_in_seconds=..., base_job_name=..., sagemaker_session=..., env=..., tags=..., network_config=...) -> None:
        """Initializes a monitor instance.

        The monitor handles baselining datasets and creating Amazon SageMaker
        Monitoring Schedules to monitor SageMaker endpoints.

        Args:
            role (str): An AWS IAM role. The Amazon SageMaker jobs use this role.
            instance_count (int): The number of instances to run
                the jobs with.
            instance_type (str): Type of EC2 instance to use for
                the job, for example, 'ml.m5.xlarge'.
            volume_size_in_gb (int): Size in GB of the EBS volume
                to use for storing data during processing (default: 30).
            volume_kms_key (str): A KMS key for the job's volume.
            output_kms_key (str): The KMS key id for the job's outputs.
            max_runtime_in_seconds (int): Timeout in seconds. After this amount of
                time, Amazon SageMaker terminates the job regardless of its current status.
                Default: 3600
            base_job_name (str): Prefix for the job name. If not specified,
                a default name is generated based on the training image name and
                current timestamp.
            sagemaker_session (sagemaker.session.Session): Session object which
                manages interactions with Amazon SageMaker APIs and any other
                AWS services needed. If not specified, one is created using
                the default AWS configuration chain.
            env (dict): Environment variables to be passed to the job.
            tags ([dict]): List of tags to be passed to the job.
            network_config (sagemaker.network.NetworkConfig): A NetworkConfig
                object that configures network isolation, encryption of
                inter-container traffic, security group IDs, and subnets.
        """
        ...
    
    def run_baseline(self, **_):
        """Not implemented.

        '.run_baseline()' is only allowed for ModelMonitor objects.
        Please use `suggest_baseline` instead.

        Raises:
            NotImplementedError
        """
        ...
    
    def latest_monitoring_statistics(self, **_):
        """Not implemented.

        The class doesn't support statistics.

        Raises:
            NotImplementedError
        """
        ...
    
    def list_executions(self):
        """Get the list of the latest monitoring executions in descending order of "ScheduledTime".

        Returns:
            [sagemaker.model_monitor.ClarifyMonitoringExecution]: List of
                ClarifyMonitoringExecution in descending order of "ScheduledTime".
        """
        ...
    
    def get_latest_execution_logs(self, wait=...):
        """Get the processing job logs for the most recent monitoring execution

        Args:
            wait (bool): Whether the call should wait until the job completes (default: False).

        Raises:
            ValueError: If no execution job or processing job for the last execution has run

        Returns: None
        """
        ...
    


class ModelBiasMonitor(ClarifyModelMonitor):
    """Amazon SageMaker model monitor to monitor bias metrics of an endpoint.

    Please see the __init__ method of its base class for how to instantiate it.
    """
    JOB_DEFINITION_BASE_NAME = ...
    @classmethod
    def monitoring_type(cls):
        """Type of the monitoring job."""
        ...
    
    def suggest_baseline(self, data_config, bias_config, model_config, model_predicted_label_config=..., wait=..., logs=..., job_name=..., kms_key=...):
        """Suggests baselines for use with Amazon SageMaker Model Monitoring Schedules.

        Args:
            data_config (:class:`~sagemaker.clarify.DataConfig`): Config of the input/output data.
            bias_config (:class:`~sagemaker.clarify.BiasConfig`): Config of sensitive groups.
            model_config (:class:`~sagemaker.clarify.ModelConfig`): Config of the model and its
                endpoint to be created.
            model_predicted_label_config (:class:`~sagemaker.clarify.ModelPredictedLabelConfig`):
                Config of how to extract the predicted label from the model output.
            wait (bool): Whether the call should wait until the job completes (default: False).
            logs (bool): Whether to show the logs produced by the job.
                Only meaningful when wait is True (default: False).
            job_name (str): Processing job name. If not specified, the processor generates
                a default job name, based on the image name and current timestamp.
            kms_key (str): The ARN of the KMS key that is used to encrypt the
                user code file (default: None).

        Returns:
            sagemaker.processing.ProcessingJob: The ProcessingJob object representing the
                baselining job.
        """
        ...
    
    def create_monitoring_schedule(self, endpoint_input=..., ground_truth_input=..., analysis_config=..., output_s3_uri=..., constraints=..., monitor_schedule_name=..., schedule_cron_expression=..., enable_cloudwatch_metrics=..., batch_transform_input=..., data_analysis_start_time=..., data_analysis_end_time=...):
        """Creates a monitoring schedule.

        Args:
            endpoint_input (str or sagemaker.model_monitor.EndpointInput): The endpoint to monitor.
                This can either be the endpoint name or an EndpointInput. (default: None)
            ground_truth_input (str): S3 URI to ground truth dataset. (default: None)
            analysis_config (str or BiasAnalysisConfig): URI to analysis_config for the bias job.
                If it is None then configuration of the latest baselining job will be reused, but
                if no baselining job then fail the call. (default: None)
            output_s3_uri (str): S3 destination of the constraint_violations and analysis result.
                Default: "s3://<default_session_bucket>/<job_name>/output" (default: None)
            constraints (sagemaker.model_monitor.Constraints or str): If provided it will be used
                for monitoring the endpoint. It can be a Constraints object or an S3 uri pointing
                to a constraints JSON file. (default: None)
            monitor_schedule_name (str): Schedule name. If not specified, the processor generates
                a default job name, based on the image name and current timestamp.
                (default: None)
            schedule_cron_expression (str): The cron expression that dictates the frequency that
                this job run. See sagemaker.model_monitor.CronExpressionGenerator for valid
                expressions. Default: Daily. (default: None)
            enable_cloudwatch_metrics (bool): Whether to publish cloudwatch metrics as part of
                the baselining or monitoring jobs. (default: True)
            batch_transform_input (sagemaker.model_monitor.BatchTransformInput): Inputs to run
                the monitoring schedule on the batch transform (default: None)
            data_analysis_start_time (str): Start time for the data analysis window
                for the one time monitoring schedule (NOW), e.g. "-PT1H" (default: None)
            data_analysis_end_time (str): End time for the data analysis window
                for the one time monitoring schedule (NOW), e.g. "-PT1H" (default: None)
        """
        ...
    
    def update_monitoring_schedule(self, endpoint_input=..., ground_truth_input=..., analysis_config=..., output_s3_uri=..., constraints=..., schedule_cron_expression=..., enable_cloudwatch_metrics=..., role=..., instance_count=..., instance_type=..., volume_size_in_gb=..., volume_kms_key=..., output_kms_key=..., max_runtime_in_seconds=..., env=..., network_config=..., batch_transform_input=..., data_analysis_start_time=..., data_analysis_end_time=...):
        """Updates the existing monitoring schedule.

        If more options than schedule_cron_expression are to be updated, a new job definition will
        be created to hold them. The old job definition will not be deleted.

        Args:
            endpoint_input (str or sagemaker.model_monitor.EndpointInput): The endpoint to monitor.
                This can either be the endpoint name or an EndpointInput.
            ground_truth_input (str): S3 URI to ground truth dataset.
            analysis_config (str or BiasAnalysisConfig): URI to analysis_config for the bias job.
                If it is None then configuration of the latest baselining job will be reused, but
                if no baselining job then fail the call.
            output_s3_uri (str): S3 destination of the constraint_violations and analysis result.
                Default: "s3://<default_session_bucket>/<job_name>/output"
            constraints (sagemaker.model_monitor.Constraints or str): If provided it will be used
                for monitoring the endpoint. It can be a Constraints object or an S3 uri pointing
                to a constraints JSON file.
            schedule_cron_expression (str): The cron expression that dictates the frequency that
                this job run. See sagemaker.model_monitor.CronExpressionGenerator for valid
                expressions. Default: Daily.
            enable_cloudwatch_metrics (bool): Whether to publish cloudwatch metrics as part of
                the baselining or monitoring jobs.
            role (str): An AWS IAM role. The Amazon SageMaker jobs use this role.
            instance_count (int): The number of instances to run
                the jobs with.
            instance_type (str): Type of EC2 instance to use for
                the job, for example, 'ml.m5.xlarge'.
            volume_size_in_gb (int): Size in GB of the EBS volume
                to use for storing data during processing (default: 30).
            volume_kms_key (str): A KMS key for the job's volume.
            output_kms_key (str): The KMS key id for the job's outputs.
            max_runtime_in_seconds (int): Timeout in seconds. After this amount of
                time, Amazon SageMaker terminates the job regardless of its current status.
                Default: 3600
            env (dict): Environment variables to be passed to the job.
            network_config (sagemaker.network.NetworkConfig): A NetworkConfig
                object that configures network isolation, encryption of
                inter-container traffic, security group IDs, and subnets.
            batch_transform_input (sagemaker.model_monitor.BatchTransformInput): Inputs to run
                the monitoring schedule on the batch transform
        """
        ...
    
    def delete_monitoring_schedule(self):
        """Deletes the monitoring schedule and its job definition."""
        ...
    
    @classmethod
    def attach(cls, monitor_schedule_name, sagemaker_session=...):
        """Sets this object's schedule name to the name provided.

        This allows subsequent describe_schedule or list_executions calls to point
        to the given schedule.

        Args:
            monitor_schedule_name (str): The name of the schedule to attach to.
            sagemaker_session (sagemaker.session.Session): Session object which
                manages interactions with Amazon SageMaker APIs and any other
                AWS services needed. If not specified, one is created using
                the default AWS configuration chain.
        """
        ...
    


class BiasAnalysisConfig:
    """Analysis configuration for ModelBiasMonitor."""
    def __init__(self, bias_config, headers=..., label=...) -> None:
        """Creates an analysis config dictionary.

        Args:
            bias_config (sagemaker.clarify.BiasConfig): Config object related to bias
                configurations.
            headers (list[str]): A list of column names in the input dataset.
            label (str): Target attribute for the model required by bias metrics. Specified as
                column name or index for CSV dataset, or as JMESPath expression for JSONLines.
        """
        ...
    


class ModelExplainabilityMonitor(ClarifyModelMonitor):
    """Amazon SageMaker model monitor to monitor feature attribution of an endpoint.

    Please see the __init__ method of its base class for how to instantiate it.
    """
    JOB_DEFINITION_BASE_NAME = ...
    @classmethod
    def monitoring_type(cls):
        """Type of the monitoring job."""
        ...
    
    def suggest_baseline(self, data_config, explainability_config, model_config, model_scores=..., wait=..., logs=..., job_name=..., kms_key=...):
        """Suggest baselines for use with Amazon SageMaker Model Monitoring Schedules.

        Args:
            data_config (:class:`~sagemaker.clarify.DataConfig`): Config of the input/output data.
            explainability_config (:class:`~sagemaker.clarify.ExplainabilityConfig`): Config of the
                specific explainability method. Currently, only SHAP is supported.
            model_config (:class:`~sagemaker.clarify.ModelConfig`): Config of the model and its
                endpoint to be created.
            model_scores (int or str or :class:`~sagemaker.clarify.ModelPredictedLabelConfig`):
                Index or JMESPath expression to locate the predicted scores in the model output.
                This is not required if the model output is a single score. Alternatively,
                it can be an instance of ModelPredictedLabelConfig to provide more parameters
                like label_headers.
            wait (bool): Whether the call should wait until the job completes (default: False).
            logs (bool): Whether to show the logs produced by the job.
                Only meaningful when wait is True (default: False).
            job_name (str): Processing job name. If not specified, the processor generates
                a default job name, based on the image name and current timestamp.
            kms_key (str): The ARN of the KMS key that is used to encrypt the
                user code file (default: None).

        Returns:
            sagemaker.processing.ProcessingJob: The ProcessingJob object representing the
                baselining job.
        """
        ...
    
    def create_monitoring_schedule(self, endpoint_input=..., analysis_config=..., output_s3_uri=..., constraints=..., monitor_schedule_name=..., schedule_cron_expression=..., enable_cloudwatch_metrics=..., batch_transform_input=..., data_analysis_start_time=..., data_analysis_end_time=...):
        """Creates a monitoring schedule.

        Args:
            endpoint_input (str or sagemaker.model_monitor.EndpointInput): The endpoint to monitor.
                This can either be the endpoint name or an EndpointInput. (default: None)
            analysis_config (str or ExplainabilityAnalysisConfig): URI to the analysis_config for
                the explainability job. If it is None then configuration of the latest baselining
                job will be reused, but if no baselining job then fail the call.
            output_s3_uri (str): S3 destination of the constraint_violations and analysis result.
                Default: "s3://<default_session_bucket>/<job_name>/output"
            constraints (sagemaker.model_monitor.Constraints or str): If provided it will be used
                for monitoring the endpoint. It can be a Constraints object or an S3 uri pointing
                to a constraints JSON file.
            monitor_schedule_name (str): Schedule name. If not specified, the processor generates
                a default job name, based on the image name and current timestamp.
            schedule_cron_expression (str): The cron expression that dictates the frequency that
                this job run. See sagemaker.model_monitor.CronExpressionGenerator for valid
                expressions. Default: Daily.
            enable_cloudwatch_metrics (bool): Whether to publish cloudwatch metrics as part of
                the baselining or monitoring jobs.
            batch_transform_input (sagemaker.model_monitor.BatchTransformInput): Inputs to
            run the monitoring schedule on the batch transform
            data_analysis_start_time (str): Start time for the data analysis window
                for the one time monitoring schedule (NOW), e.g. "-PT1H" (default: None)
            data_analysis_end_time (str): End time for the data analysis window
                for the one time monitoring schedule (NOW), e.g. "-PT1H" (default: None)
        """
        ...
    
    def update_monitoring_schedule(self, endpoint_input=..., analysis_config=..., output_s3_uri=..., constraints=..., schedule_cron_expression=..., enable_cloudwatch_metrics=..., role=..., instance_count=..., instance_type=..., volume_size_in_gb=..., volume_kms_key=..., output_kms_key=..., max_runtime_in_seconds=..., env=..., network_config=..., batch_transform_input=..., data_analysis_start_time=..., data_analysis_end_time=...):
        """Updates the existing monitoring schedule.

        If more options than schedule_cron_expression are to be updated, a new job definition will
        be created to hold them. The old job definition will not be deleted.

        Args:
            endpoint_input (str or sagemaker.model_monitor.EndpointInput): The endpoint to monitor.
                This can either be the endpoint name or an EndpointInput.
            analysis_config (str or BiasAnalysisConfig): URI to analysis_config for the bias job.
                If it is None then configuration of the latest baselining job will be reused, but
                if no baselining job then fail the call.
            output_s3_uri (str): S3 destination of the constraint_violations and analysis result.
                Default: "s3://<default_session_bucket>/<job_name>/output"
            constraints (sagemaker.model_monitor.Constraints or str): If provided it will be used
                for monitoring the endpoint. It can be a Constraints object or an S3 uri pointing
                to a constraints JSON file.
            schedule_cron_expression (str): The cron expression that dictates the frequency that
                this job run. See sagemaker.model_monitor.CronExpressionGenerator for valid
                expressions. Default: Daily.
            enable_cloudwatch_metrics (bool): Whether to publish cloudwatch metrics as part of
                the baselining or monitoring jobs.
            role (str): An AWS IAM role. The Amazon SageMaker jobs use this role.
            instance_count (int): The number of instances to run
                the jobs with.
            instance_type (str): Type of EC2 instance to use for
                the job, for example, 'ml.m5.xlarge'.
            volume_size_in_gb (int): Size in GB of the EBS volume
                to use for storing data during processing (default: 30).
            volume_kms_key (str): A KMS key for the job's volume.
            output_kms_key (str): The KMS key id for the job's outputs.
            max_runtime_in_seconds (int): Timeout in seconds. After this amount of
                time, Amazon SageMaker terminates the job regardless of its current status.
                Default: 3600
            env (dict): Environment variables to be passed to the job.
            network_config (sagemaker.network.NetworkConfig): A NetworkConfig
                object that configures network isolation, encryption of
                inter-container traffic, security group IDs, and subnets.
            batch_transform_input (sagemaker.model_monitor.BatchTransformInput): Inputs to
                run the monitoring schedule on the batch transform
            data_analysis_start_time (str): Start time for the data analysis window
                for the one time monitoring schedule (NOW), e.g. "-PT1H" (default: None)
            data_analysis_end_time (str): End time for the data analysis window
                for the one time monitoring schedule (NOW), e.g. "-PT1H" (default: None)
        """
        ...
    
    def delete_monitoring_schedule(self):
        """Deletes the monitoring schedule and its job definition."""
        ...
    
    @classmethod
    def attach(cls, monitor_schedule_name, sagemaker_session=...):
        """Sets this object's schedule name to the name provided.

        This allows subsequent describe_schedule or list_executions calls to point
        to the given schedule.

        Args:
            monitor_schedule_name (str): The name of the schedule to attach to.
            sagemaker_session (sagemaker.session.Session): Session object which
                manages interactions with Amazon SageMaker APIs and any other
                AWS services needed. If not specified, one is created using
                the default AWS configuration chain.
        """
        ...
    


class ExplainabilityAnalysisConfig:
    """Analysis configuration for ModelExplainabilityMonitor."""
    def __init__(self, explainability_config, model_config, headers=..., label_headers=...) -> None:
        """Creates an analysis config dictionary.

        Args:
            explainability_config (sagemaker.clarify.ExplainabilityConfig): Config object related
                to explainability configurations.
            model_config (sagemaker.clarify.ModelConfig): Config object related to bias
                configurations.
            headers (list[str]): A list of feature names (without label) of model/endpint input.
            label_headers (list[str]): List of headers, each for a predicted score in model output.
                It is used to beautify the analysis report by replacing placeholders like "label0".

        """
        ...
    


class ClarifyBaseliningConfig:
    """Data class to hold some essential analysis configuration of ClarifyBaseliningJob"""
    def __init__(self, analysis_config, features_attribute=..., inference_attribute=..., probability_attribute=..., probability_threshold_attribute=...) -> None:
        """Initialization.

        Args:
            analysis_config (BiasAnalysisConfig or ExplainabilityAnalysisConfig): analysis config
                from configurations of the baselining job.
            features_attribute (str): JMESPath expression to locate features in predictor request
                payload. Only required when predictor content type is JSONlines.
            inference_attribute (str): Index, header or JMESPath expression to locate predicted
                label in predictor response payload.
            probability_attribute (str): Index or JMESPath expression to locate probabilities or
                scores in the model output for computing feature attribution.
            probability_threshold_attribute (float): Value to indicate the threshold to select
                the binary label in the case of binary classification. Default is 0.5.
        """
        ...
    


class ClarifyBaseliningJob(mm.BaseliningJob):
    """Provides functionality to retrieve baseline-specific output from Clarify baselining job."""
    def __init__(self, processing_job) -> None:
        """Initializes a ClarifyBaseliningJob that tracks a baselining job by suggest_baseline()

        Args:
            processing_job (sagemaker.processing.ProcessingJob): The ProcessingJob used for
                baselining instance.
        """
        ...
    
    def baseline_statistics(self, **_):
        """Not implemented.

        The class doesn't support statistics.

        Raises:
            NotImplementedError
        """
        ...
    
    def suggested_constraints(self, file_name=..., kms_key=...):
        """Returns a sagemaker.model_monitor.

        Constraints object representing the constraints JSON file generated by this baselining job.

        Args:
            file_name (str): Keep this parameter to align with method signature in super class,
                but it will be ignored.
            kms_key (str): The kms key to use when retrieving the file.

        Returns:
            sagemaker.model_monitor.Constraints: The Constraints object representing the file that
                was generated by the job.

        Raises:
            UnexpectedStatusException: This is thrown if the job is not in a 'Complete' state.
        """
        ...
    


class ClarifyMonitoringExecution(mm.MonitoringExecution):
    """Provides functionality to retrieve monitoring-specific files output from executions."""
    def __init__(self, sagemaker_session, job_name, inputs, output, output_kms_key=...) -> None:
        """Initializes an object that tracks a monitoring execution by a Clarify model monitor

        Args:
            sagemaker_session (sagemaker.session.Session): Session object which
                manages interactions with Amazon SageMaker APIs and any other
                AWS services needed. If not specified, one is created using
                the default AWS configuration chain.
            job_name (str): The name of the monitoring execution job.
            output (sagemaker.Processing.ProcessingOutput): The output associated with the
                monitoring execution.
            output_kms_key (str): The output kms key associated with the job. Defaults to None
                if not provided.
        """
        ...
    
    def statistics(self, **_):
        """Not implemented.

        The class doesn't support statistics.

        Raises:
            NotImplementedError
        """
        ...
    


