"""
This type stub file was generated by pyright.
"""

from abc import ABC, abstractmethod
from typing import Any, Dict, List, Optional, Union
from enum import Enum
from sagemaker.session import Session
from sagemaker.network import NetworkConfig
from sagemaker.processing import Processor

"""
This type stub file was generated by pyright.
"""
logger = ...
ENDPOINT_NAME_PREFIX_PATTERN = ...
ANALYSIS_CONFIG_SCHEMA_V1_0 = ...
class DatasetType(Enum):
    """Enum to store different dataset types supported in the Analysis config file"""
    TEXTCSV = ...
    JSONLINES = ...
    JSON = ...
    PARQUET = ...
    IMAGE = ...


class SegmentationConfig:
    """Config object that defines segment(s) of the dataset on which metrics are computed."""
    def __init__(self, name_or_index: Union[str, int], segments: List[List[Union[str, int]]], config_name: Optional[str] = ..., display_aliases: Optional[List[str]] = ...) -> None:
        """Initializes a segmentation configuration for a dataset column.

        Args:
            name_or_index (str or int): The name or index of the column in the dataset on which
                the segment(s) is defined.
            segments (List[List[str or int]]): Each List of values represents one segment. If N
                Lists are provided, we generate N+1 segments - the additional segment, denoted as
                the '__default__' segment, is for the rest of the values that are not covered by
                these lists. For continuous columns, a segment must be given as strings in interval
                notation (eg.: ["[1, 4]"] or ["(2, 5]"]). A segment can also be composed of
                multiple intervals (eg.: ["[1, 4]", "(5, 6]"] is one segment). For categorical
                columns, each segment should contain one or more of the categorical values for
                the categorical column, which may be strings or integers.
                Eg,: For a continuous column, ``segments`` could be
                [["[1, 4]", "(5, 6]"], ["(7, 9)"]] - this generates 3 segments including the
                default segment. For a categorical columns with values ("A", "B", "C", "D"),
                ``segments``,could be [["A", "B"]]. This generate 2 segments, including the default
                segment.
            config_name (str) - Optional name for the segment config to identify the config.
            display_aliases (List[str]) - Optional list of display names for the ``segments`` for
                the analysis output and report. This list should be the same length as the number of
                lists provided in ``segments`` or with one additional display alias for the default
                segment.

        Raises:
            ValueError: when the ``name_or_index`` is None, ``segments`` is invalid, or a wrong
                number of ``display_aliases`` are specified.
        """
        ...
    
    def to_dict(self) -> Dict[str, Any]:
        """Returns SegmentationConfig as a dict."""
        ...
    


class DataConfig:
    """Config object related to configurations of the input and output dataset."""
    def __init__(self, s3_data_input_path: str, s3_output_path: str, s3_analysis_config_output_path: Optional[str] = ..., label: Optional[str] = ..., headers: Optional[List[str]] = ..., features: Optional[str] = ..., dataset_type: str = ..., s3_compression_type: str = ..., joinsource: Optional[Union[str, int]] = ..., facet_dataset_uri: Optional[str] = ..., facet_headers: Optional[List[str]] = ..., predicted_label_dataset_uri: Optional[str] = ..., predicted_label_headers: Optional[List[str]] = ..., predicted_label: Optional[Union[str, int]] = ..., excluded_columns: Optional[Union[List[int], List[str]]] = ..., segmentation_config: Optional[List[SegmentationConfig]] = ...) -> None:
        """Initializes a configuration of both input and output datasets.

        Args:
            s3_data_input_path (str): Dataset S3 prefix/object URI.
            s3_output_path (str): S3 prefix to store the output.
            s3_analysis_config_output_path (str): S3 prefix to store the analysis config output.
                If this field is None, then the ``s3_output_path`` will be used
                to store the ``analysis_config`` output.
            label (str): Target attribute of the model required by bias metrics. Specified as
                column name or index for CSV dataset or a JMESPath expression for JSON/JSON Lines.
                *Required parameter* except for when the input dataset does not contain the label.
                Note: For JSON, the JMESPath query must result in a list of labels for each
                sample.  For JSON Lines, it must result in the label for each line.
                Only a single label per sample is supported at this time.
            features (str): JMESPath expression to locate the feature values
                if the dataset format is JSON/JSON Lines.
                Note: For JSON, the JMESPath query must result in a 2-D list (or a matrix) of
                feature values.  For JSON Lines, it must result in a 1-D list of features for each
                line.
            dataset_type (str): Format of the dataset. Valid values are ``"text/csv"`` for CSV,
                ``"application/jsonlines"`` for JSON Lines, ``"application/json"`` for JSON, and
                ``"application/x-parquet"`` for Parquet.
            s3_compression_type (str): Valid options are "None" or ``"Gzip"``.
            joinsource (str or int): The name or index of the column in the dataset that
                acts as an identifier column (for instance, while performing a join).
                This column is only used as an identifier, and not used for any other computations.
                This is an optional field in all cases except:

                * The dataset contains more than one file and `save_local_shap_values`
                  is set to true in :class:`~sagemaker.clarify.ShapConfig`, and/or
                * When the dataset and/or facet dataset and/or predicted label dataset
                  are in separate files.

            facet_dataset_uri (str): Dataset S3 prefix/object URI that contains facet attribute(s),
                used for bias analysis on datasets without facets.

                * If the dataset and the facet dataset are one single file each, then
                  the original dataset and facet dataset must have the same number of rows.
                * If the dataset and facet dataset are in multiple files (either one), then
                  an index column, ``joinsource``, is required to join the two datasets.

                Clarify will not use the ``joinsource`` column and columns present in the facet
                dataset when calling model inference APIs.
                Note: this is only supported for ``"text/csv"`` dataset type.
            facet_headers (list[str]): List of column names in the facet dataset.
            predicted_label_dataset_uri (str): Dataset S3 prefix/object URI with predicted labels,
                which are used directly for analysis instead of making model inference API calls.

                * If the dataset and the predicted label dataset are one single file each, then the
                  original dataset and predicted label dataset must have the same number of rows.
                * If the dataset and predicted label dataset are in multiple files (either one),
                  then an index column, ``joinsource``, is required to join the two datasets.

                Note: this is only supported for ``"text/csv"`` dataset type.
            predicted_label_headers (list[str]): List of column names in the predicted label dataset
            predicted_label (str or int): Predicted label of the target attribute of the model
                required for running bias analysis. Specified as column name or index for CSV data,
                or a JMESPath expression for JSON/JSON Lines.
                Clarify uses the predicted labels directly instead of making model inference API
                calls.
                Note: For JSON, the JMESPath query must result in a list of predicted labels for
                each sample.  For JSON Lines, it must result in the predicted label for each line.
                Only a single predicted label per sample is supported at this time.
            excluded_columns (list[int] or list[str]): A list of names or indices of the columns
                which are to be excluded from making model inference API calls.
            segmentation_config (list[SegmentationConfig]): A list of ``SegmentationConfig``
                objects.

        Raises:
            ValueError: when the ``dataset_type`` is invalid, predicted label dataset parameters
                are used with un-supported ``dataset_type``, or facet dataset parameters
                are used with un-supported ``dataset_type``
        """
        ...
    
    def get_config(self):
        """Returns part of an analysis config dictionary."""
        ...
    


class BiasConfig:
    """Config object with user-defined bias configurations of the input dataset."""
    def __init__(self, label_values_or_threshold: Union[int, float, str], facet_name: Union[str, int, List[str], List[int]], facet_values_or_threshold: Optional[Union[int, float, str]] = ..., group_name: Optional[str] = ...) -> None:
        """Initializes a configuration of the sensitive groups in the dataset.

        Args:
            label_values_or_threshold ([int or float or str]): List of label value(s) or threshold
                to indicate positive outcome used for bias metrics.
                The appropriate threshold depends on the problem type:

                * Binary: The list has one positive value.
                * Categorical:The list has one or more (but not all) categories
                  which are the positive values.
                * Regression: The list should include one threshold that defines the **exclusive**
                  lower bound of positive values.

            facet_name (str or int or list[str] or list[int]): Sensitive attribute column name
                (or index in the input data) to use when computing bias metrics. It can also be a
                list of names (or indexes) for computing metrics for multiple sensitive attributes.
            facet_values_or_threshold ([int or float or str] or [[int or float or str]]):
                The parameter controls the values of the sensitive group.
                If ``facet_name`` is a scalar, then it can be None or a list.
                Depending on the data type of the facet column, the values mean:

                * Binary data: None means computing the bias metrics for each binary value.
                  Or add one binary value to the list, to compute its bias metrics only.
                * Categorical data: None means computing the bias metrics for each category. Or add
                  one or more (but not all) categories to the list, to compute their
                  bias metrics v.s. the other categories.
                * Continuous data: The list should include one and only one threshold which defines
                  the **exclusive** lower bound of a sensitive group.

                If ``facet_name`` is a list, then ``facet_values_or_threshold`` can be None
                if all facets are of binary or categorical type.
                Otherwise, ``facet_values_or_threshold`` should be a list, and each element
                is the value or threshold of the corresponding facet.
            group_name (str): Optional column name or index to indicate a group column to be used
                for the bias metric
                `Conditional Demographic Disparity in Labels `(CDDL) <https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-data-bias-metric-cddl.html>`_
                or
                `Conditional Demographic Disparity in Predicted Labels (CDDPL) <https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-post-training-bias-metric-cddpl.html>`_.

        Raises:
            ValueError: If the number of ``facet_names`` doesn't equal number of ``facet values``
        """
        ...
    
    def get_config(self):
        """Returns a dictionary of bias detection configurations, part of the analysis config"""
        ...
    


class ModelConfig:
    """Config object related to a model and its endpoint to be created."""
    def __init__(self, model_name: Optional[str] = ..., instance_count: Optional[int] = ..., instance_type: Optional[str] = ..., accept_type: Optional[str] = ..., content_type: Optional[str] = ..., content_template: Optional[str] = ..., record_template: Optional[str] = ..., custom_attributes: Optional[str] = ..., accelerator_type: Optional[str] = ..., endpoint_name_prefix: Optional[str] = ..., target_model: Optional[str] = ..., endpoint_name: Optional[str] = ...) -> None:
        r"""Initializes a configuration of a model and the endpoint to be created for it.

        Args:
            model_name (str): Model name (as created by
                `CreateModel <https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateModel.html>`_.
                Cannot be set when ``endpoint_name`` is set.
                Must be set with ``instance_count``, ``instance_type``
            instance_count (int): The number of instances of a new endpoint for model inference.
                Cannot be set when ``endpoint_name`` is set.
                Must be set with ``model_name``, ``instance_type``
            instance_type (str): The type of
                `EC2 instance <https://aws.amazon.com/ec2/instance-types/>`_
                to use for model inference; for example, ``"ml.c5.xlarge"``.
                Cannot be set when ``endpoint_name`` is set.
                Must be set with ``instance_count``, ``model_name``
            accept_type (str): The model output format to be used for getting inferences with the
                shadow endpoint. Valid values are ``"text/csv"`` for CSV,
                ``"application/jsonlines"`` for JSON Lines, and ``"application/json"`` for JSON.
                Default is the same as ``content_type``.
            content_type (str): The model input format to be used for getting inferences with the
                shadow endpoint. Valid values are ``"text/csv"`` for CSV,
                ``"application/jsonlines"`` for JSON Lines, and ``"application/json"`` for JSON.
                Default is the same as ``dataset_format``.
            content_template (str): A template string to be used to construct the model input from
                dataset instances. It is only used, and required, when ``model_content_type`` is
                ``"application/jsonlines"`` or ``"application/json"``. When ``model_content_type``
                is ``application/jsonlines``, the template should have one and only one
                placeholder, ``$features``, which will be replaced by a features list for each
                record to form the model inference input.  When ``model_content_type`` is
                ``application/json``, the template can have either placeholder ``$record``, which
                will be replaced by a single record templated by ``record_template`` and only a
                single record at a time will be sent to the model, or placeholder ``$records``,
                which will be replaced by a list of records, each templated by ``record_template``.
            record_template (str): A template string to be used to construct each record of the
                model input from dataset instances.  It is only used, and required, when
                ``model_content_type`` is ``"application/json"``.
                The template string may contain one of the following:

                * Placeholder ``$features`` that will be substituted by the array of feature values
                  and/or an optional placeholder ``$feature_names`` that will be substituted by the
                  array of feature names.
                * Exactly one placeholder ``$features_kvp`` that will be substituted by the
                  key-value pairs of feature name and feature value.
                * Or for each feature, if "A" is the feature name in the ``headers`` configuration,
                  then placeholder syntax ``"${A}"`` (the double-quotes are part of the
                  placeholder) will be substituted by the feature value.

                ``record_template`` will be used in conjunction with ``content_template`` to
                construct the model input.

                **Examples:**

                Given:

                * ``headers``: ``["A", "B"]``
                * ``features``: ``[[0, 1], [3, 4]]``

                Example model input 1::

                    {
                        "instances": [[0, 1], [3, 4]],
                        "feature_names": ["A", "B"]
                    }

                content_template and record_template to construct above:

                * ``content_template``: ``"{\"instances\": $records}"``
                * ``record_template``: ``"$features"``

                Example model input 2::

                    [
                        { "A": 0, "B": 1 },
                        { "A": 3, "B": 4 },
                    ]

                content_template and record_template to construct above:

                * ``content_template``: ``"$records"``
                * ``record_template``: ``"$features_kvp"``

                Or, alternatively:

                * ``content_template``: ``"$records"``
                * ``record_template``: ``"{\"A\": \"${A}\", \"B\": \"${B}\"}"``

                Example model input 3 (single record only)::

                    { "A": 0, "B": 1 }

                content_template and record_template to construct above:

                * ``content_template``: ``"$record"``
                * ``record_template``: ``"$features_kvp"``
            custom_attributes (str): Provides additional information about a request for an
                inference submitted to a model hosted at an Amazon SageMaker endpoint. The
                information is an opaque value that is forwarded verbatim. You could use this
                value, for example, to provide an ID that you can use to track a request or to
                provide other metadata that a service endpoint was programmed to process. The value
                must consist of no more than 1024 visible US-ASCII characters as specified in
                Section 3.3.6.
                `Field Value Components <https://tools.ietf.org/html/rfc7230#section-3.2.6>`_
                of the Hypertext Transfer Protocol (HTTP/1.1).
            accelerator_type (str): SageMaker
                `Elastic Inference <https://docs.aws.amazon.com/sagemaker/latest/dg/ei.html>`_
                accelerator type to deploy to the model endpoint instance
                for making inferences to the model.
            endpoint_name_prefix (str): The endpoint name prefix of a new endpoint. Must follow
                pattern ``^[a-zA-Z0-9](-\*[a-zA-Z0-9]``.
            target_model (str): Sets the target model name when using a multi-model endpoint. For
                more information about multi-model endpoints, see
                https://docs.aws.amazon.com/sagemaker/latest/dg/multi-model-endpoints.html
            endpoint_name (str): Sets the endpoint_name when re-uses an existing endpoint.
                Cannot be set when ``model_name``, ``instance_count``,
                and ``instance_type`` set

        Raises:
            ValueError: when the
                - ``endpoint_name_prefix`` is invalid,
                - ``accept_type`` is invalid,
                - ``content_type`` is invalid,
                - ``content_template`` has no placeholder "features"
                - both [``endpoint_name``]
                   AND [``model_name``, ``instance_count``, ``instance_type``] are set
                - both [``endpoint_name``] AND [``endpoint_name_prefix``] are set
        """
        ...
    
    def get_predictor_config(self):
        """Returns part of the predictor dictionary of the analysis config."""
        ...
    


class ModelPredictedLabelConfig:
    """Config object to extract a predicted label from the model output."""
    def __init__(self, label: Optional[Union[str, int]] = ..., probability: Optional[Union[str, int]] = ..., probability_threshold: Optional[float] = ..., label_headers: Optional[List[str]] = ...) -> None:
        """Initializes a model output config to extract the predicted label or predicted score(s).

        The following examples show different parameter configurations depending on the endpoint:

        * **Regression task:**
          The model returns the score, e.g. ``1.2``. We don't need to specify
          anything. For json output, e.g. ``{'score': 1.2}``, we can set ``label='score'``.
        * **Binary classification:**

          * The model returns a single probability score. We want to classify as ``"yes"``
            predictions with a probability score over ``0.2``.
            We can set ``probability_threshold=0.2`` and ``label_headers="yes"``.
          * The model returns ``{"probability": 0.3}``, for which we would like to apply a
            threshold of ``0.5`` to obtain a predicted label in ``{0, 1}``.
            In this case we can set ``label="probability"``.
          * The model returns a tuple of the predicted label and the probability.
            In this case we can set ``label = 0``.
        * **Multiclass classification:**

          * The model returns ``{'labels': ['cat', 'dog', 'fish'],
            'probabilities': [0.35, 0.25, 0.4]}``. In this case we would set
            ``probability='probabilities'``, ``label='labels'``,
            and infer the predicted label to be ``'fish'``.
          * The model returns ``{'predicted_label': 'fish', 'probabilities': [0.35, 0.25, 0.4]}``.
            In this case we would set the ``label='predicted_label'``.
          * The model returns ``[0.35, 0.25, 0.4]``. In this case, we can set
            ``label_headers=['cat','dog','fish']`` and infer the predicted label to be ``'fish'``.

        Args:
            label (str or int): Index or JMESPath expression to locate the prediction
                in the model output. In case, this is a predicted label of the same type
                as the label in the dataset, no further arguments need to be specified.
            probability (str or int): Index or JMESPath expression to locate the predicted score(s)
                in the model output.
            probability_threshold (float): An optional value for binary prediction tasks in which
                the model returns a probability, to indicate the threshold to convert the
                prediction to a boolean value. Default is ``0.5``.
            label_headers (list[str]): List of headers, each for a predicted score in model output.
                For bias analysis, it is used to extract the label value with the highest score as
                predicted label. For explainability jobs, it is used to beautify the analysis report
                by replacing placeholders like ``'label0'``.

        Raises:
            TypeError: when the ``probability_threshold`` cannot be cast to a float
        """
        ...
    
    def get_predictor_config(self):
        """Returns ``probability_threshold`` and predictor config dictionary."""
        ...
    


class ExplainabilityConfig(ABC):
    """Abstract config class to configure an explainability method."""
    @abstractmethod
    def get_explainability_config(self):
        """Returns config."""
        ...
    


class PDPConfig(ExplainabilityConfig):
    """Config class for Partial Dependence Plots (PDP).

    `PDPs <https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-partial-dependence-plots.html>`_
    show the marginal effect (the dependence) a subset of features has on the predicted
    outcome of an ML model.

    When PDP is requested (by passing in a :class:`~sagemaker.clarify.PDPConfig` to the
    ``explainability_config`` parameter of :class:`~sagemaker.clarify.SageMakerClarifyProcessor`),
    the Partial Dependence Plots are included in the output
    `report <https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-feature-attribute-baselines-reports.html>`__
    and the corresponding values are included in the analysis output.
    """
    def __init__(self, features: Optional[List] = ..., grid_resolution: int = ..., top_k_features: int = ...) -> None:
        """Initializes PDP config.

        Args:
            features (None or list): List of feature names or indices for which partial dependence
                plots are computed and plotted. When :class:`~sagemaker.clarify.ShapConfig`
                is provided, this parameter is optional, as Clarify will compute the
                partial dependence plots for top features based on
                `SHAP <https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-shapley-values.html>`__
                attributions. When :class:`~sagemaker.clarify.ShapConfig` is not provided,
                ``features`` must be provided.
            grid_resolution (int): When using numerical features, this integer represents the
                number of buckets that the range of values must be divided into. This decides the
                granularity of the grid in which the PDP are plotted.
            top_k_features (int): Sets the number of top SHAP attributes used to compute
                partial dependence plots.
        """
        ...
    
    def get_explainability_config(self):
        """Returns PDP config dictionary."""
        ...
    


class TextConfig:
    """Config object to handle text features for text explainability

    `SHAP analysis <https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-model-explainability.html>`__
    breaks down longer text into chunks (e.g. tokens, sentences, or paragraphs)
    and replaces them with the strings specified in the baseline for that feature.
    The `shap value <https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-shapley-values.html>`_
    of a chunk then captures how much replacing it affects the prediction.
    """
    _SUPPORTED_GRANULARITIES = ...
    _SUPPORTED_LANGUAGES = ...
    def __init__(self, granularity: str, language: str) -> None:
        """Initializes a text configuration.

        Args:
            granularity (str): Determines the granularity in which text features are broken down
                to. Accepted values are ``"token"``, ``"sentence"``, or ``"paragraph"``.
                Computes `shap values <https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-shapley-values.html>`_
                for these units.
            language (str): Specifies the language of the text features. Accepted values are
                one of the following:
                ``"chinese"``, ``"danish"``, ``"dutch"``, ``"english"``, ``"french"``, ``"german"``,
                ``"greek"``, ``"italian"``, ``"japanese"``, ``"lithuanian"``, ``"multi-language"``,
                ``"norwegian bokmål"``, ``"polish"``, ``"portuguese"``, ``"romanian"``,
                ``"russian"``, ``"spanish"``, ``"afrikaans"``, ``"albanian"``, ``"arabic"``,
                ``"armenian"``, ``"basque"``, ``"bengali"``, ``"bulgarian"``, ``"catalan"``,
                ``"croatian"``, ``"czech"``, ``"estonian"``, ``"finnish"``, ``"gujarati"``,
                ``"hebrew"``, ``"hindi"``, ``"hungarian"``, ``"icelandic"``, ``"indonesian"``,
                ``"irish"``, ``"kannada"``, ``"kyrgyz"``, ``"latvian"``, ``"ligurian"``,
                ``"luxembourgish"``, ``"macedonian"``, ``"malayalam"``, ``"marathi"``, ``"nepali"``,
                ``"persian"``, ``"sanskrit"``, ``"serbian"``, ``"setswana"``, ``"sinhala"``,
                ``"slovak"``, ``"slovenian"``, ``"swedish"``, ``"tagalog"``, ``"tamil"``,
                ``"tatar"``, ``"telugu"``, ``"thai"``, ``"turkish"``, ``"ukrainian"``, ``"urdu"``,
                ``"vietnamese"``, ``"yoruba"``. Use "multi-language" for a mix of multiple
                languages. The corresponding two-letter ISO codes are also accepted.

        Raises:
            ValueError: when ``granularity`` is not in list of supported values
                or ``language`` is not in list of supported values
        """
        ...
    
    def get_text_config(self):
        """Returns a text config dictionary, part of the analysis config dictionary."""
        ...
    


class ImageConfig:
    """Config object for handling images"""
    def __init__(self, model_type: str, num_segments: Optional[int] = ..., feature_extraction_method: Optional[str] = ..., segment_compactness: Optional[float] = ..., max_objects: Optional[int] = ..., iou_threshold: Optional[float] = ..., context: Optional[float] = ...) -> None:
        """Initializes a config object for Computer Vision (CV) Image explainability.

        `SHAP for CV explainability <https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-model-explainability-computer-vision.html>`__.
        generating heat maps that visualize feature attributions for input images.
        These heat maps highlight the image's features according
        to how much they contribute to the CV model prediction.

        ``"IMAGE_CLASSIFICATION"`` and ``"OBJECT_DETECTION"`` are the two supported CV use cases.

        Args:
            model_type (str): Specifies the type of CV model and use case. Accepted options:
                ``"IMAGE_CLASSIFICATION"`` or ``"OBJECT_DETECTION"``.
            num_segments (None or int): Approximate number of segments to generate when running
                SKLearn's `SLIC method <https://scikit-image.org/docs/dev/api/skimage.segmentation.html?highlight=slic#skimage.segmentation.slic>`_
                for image segmentation to generate features/superpixels.
                The default is None. When set to None, runs SLIC with 20 segments.
            feature_extraction_method (None or str): method used for extracting features from the
                image (ex: "segmentation"). Default is ``"segmentation"``.
            segment_compactness (None or float): Balances color proximity and space proximity.
                Higher values give more weight to space proximity, making superpixel
                shapes more square/cubic. We recommend exploring possible values on a log
                scale, e.g., 0.01, 0.1, 1, 10, 100, before refining around a chosen value.
                The default is None. When set to None, runs with the default value of ``5``.
            max_objects (None or int): Maximum number of objects displayed when running SHAP
                with an ``"OBJECT_DETECTION"`` model. The Object detection algorithm may detect
                more than the ``max_objects`` number of objects in a single image.
                In that case, the algorithm displays the top ``max_objects`` number of objects
                according to confidence score. Default value is None. In the ``"OBJECT_DETECTION"``
                case, passing in None leads to a default value of ``3``.
            iou_threshold (None or float): Minimum intersection over union for the object
                bounding box to consider its confidence score for computing SHAP values,
                in the range ``[0.0, 1.0]``. Used only for the ``"OBJECT_DETECTION"`` case,
                where passing in None sets the default value of ``0.5``.
            context (None or float): The portion of the image outside the bounding box used
                in SHAP analysis, in the range ``[0.0, 1.0]``. If set to ``1.0``, the whole image
                is considered; if set to ``0.0`` only the image inside bounding box is considered.
                Only used for the ``"OBJECT_DETECTION"`` case,
                when passing in None sets the default value of ``1.0``.

        """
        ...
    
    def get_image_config(self):
        """Returns the image config part of an analysis config dictionary."""
        ...
    


class SHAPConfig(ExplainabilityConfig):
    """Config class for `SHAP <https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-model-explainability.html>`__.

    The SHAP algorithm calculates feature attributions by computing
    the contribution of each feature to the prediction outcome, using the concept of
    `Shapley values <https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-shapley-values.html>`_.

    These attributions can be provided for specific predictions (locally)
    and at a global level for the model as a whole.
    """
    def __init__(self, baseline: Optional[Union[str, List, Dict]] = ..., num_samples: Optional[int] = ..., agg_method: Optional[str] = ..., use_logit: bool = ..., save_local_shap_values: bool = ..., seed: Optional[int] = ..., num_clusters: Optional[int] = ..., text_config: Optional[TextConfig] = ..., image_config: Optional[ImageConfig] = ..., features_to_explain: Optional[List[Union[str, int]]] = ...) -> None:
        """Initializes config for SHAP analysis.

        Args:
            baseline (None or str or list or dict): `Baseline dataset <https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-feature-attribute-shap-baselines.html>`_
                for the Kernel SHAP algorithm, accepted in the form of:
                S3 object URI, a list of rows (with at least one element),
                or None (for no input baseline). The baseline dataset must have the same format
                as the input dataset specified in :class:`~sagemaker.clarify.DataConfig`.
                Each row must have only the feature columns/values and omit the label column/values.
                If None, a baseline will be calculated automatically on the input dataset
                using K-means (for numerical data) or K-prototypes (if there is categorical data).
            num_samples (None or int): Number of samples to be used in the Kernel SHAP algorithm.
                This number determines the size of the generated synthetic dataset to compute the
                SHAP values. If not provided then Clarify job will choose a proper value according
                to the count of features.
            agg_method (None or str): Aggregation method for global SHAP values. Valid values are
                ``"mean_abs"`` (mean of absolute SHAP values for all instances),
                ``"median"`` (median of SHAP values for all instances) and
                ``"mean_sq"`` (mean of squared SHAP values for all instances).
                If None is provided, then Clarify job uses the method ``"mean_abs"``.
            use_logit (bool): Indicates whether to apply the logit function to model predictions.
                Default is False. If ``use_logit`` is true then the SHAP values will
                have log-odds units.
            save_local_shap_values (bool): Indicates whether to save the local SHAP values
                in the output location. Default is True.
            seed (int): Seed value to get deterministic SHAP values. Default is None.
            num_clusters (None or int): If a ``baseline`` is not provided, Clarify automatically
                computes a baseline dataset via a clustering algorithm (K-means/K-prototypes), which
                takes ``num_clusters`` as a parameter. ``num_clusters`` will be the resulting size
                of the baseline dataset. If not provided, Clarify job uses a default value.
            text_config (:class:`~sagemaker.clarify.TextConfig`): Config object for handling
                text features. Default is None.
            image_config (:class:`~sagemaker.clarify.ImageConfig`): Config for handling image
                features. Default is None.
            features_to_explain: A list of names or indices of dataset features to compute SHAP
                values for. If not provided, SHAP values are computed for all features by default.
                Currently only supported for tabular datasets.

        Raises:
            ValueError: when ``agg_method`` is invalid, ``baseline`` and ``num_clusters`` are provided
                together, or ``features_to_explain`` is specified when ``text_config`` or
                ``image_config`` is provided
        """
        ...
    
    def get_explainability_config(self):
        """Returns a shap config dictionary."""
        ...
    


class SageMakerClarifyProcessor(Processor):
    """Handles SageMaker Processing tasks to compute bias metrics and model explanations."""
    _CLARIFY_DATA_INPUT = ...
    _CLARIFY_CONFIG_INPUT = ...
    _CLARIFY_OUTPUT = ...
    def __init__(self, role: Optional[str] = ..., instance_count: int = ..., instance_type: str = ..., volume_size_in_gb: int = ..., volume_kms_key: Optional[str] = ..., output_kms_key: Optional[str] = ..., max_runtime_in_seconds: Optional[int] = ..., sagemaker_session: Optional[Session] = ..., env: Optional[Dict[str, str]] = ..., tags: Optional[List[Dict[str, str]]] = ..., network_config: Optional[NetworkConfig] = ..., job_name_prefix: Optional[str] = ..., version: Optional[str] = ..., skip_early_validation: bool = ...) -> None:
        """Initializes a SageMakerClarifyProcessor to compute bias metrics and model explanations.

        Instance of :class:`~sagemaker.processing.Processor`.

        Args:
            role (str): An AWS IAM role name or ARN. Amazon SageMaker Processing
                uses this role to access AWS resources, such as
                data stored in Amazon S3.
            instance_count (int): The number of instances to run
                a processing job with.
            instance_type (str): The type of
                `EC2 instance <https://aws.amazon.com/ec2/instance-types/>`_
                to use for model inference; for example, ``"ml.c5.xlarge"``.
            volume_size_in_gb (int): Size in GB of the
                `EBS volume <https://docs.aws.amazon.com/sagemaker/latest/dg/host-instance-storage.html>`_.
                to use for storing data during processing (default: 30 GB).
            volume_kms_key (str): A
                `KMS key <https://docs.aws.amazon.com/sagemaker/latest/dg/key-management.html>`_
                for the processing volume (default: None).
            output_kms_key (str): The KMS key ID for processing job outputs (default: None).
            max_runtime_in_seconds (int): Timeout in seconds (default: None).
                After this amount of time, Amazon SageMaker terminates the job,
                regardless of its current status. If ``max_runtime_in_seconds`` is not
                specified, the default value is ``86400`` seconds (24 hours).
            sagemaker_session (:class:`~sagemaker.session.Session`):
                :class:`~sagemaker.session.Session` object which manages interactions
                with Amazon SageMaker and any other AWS services needed. If not specified,
                the Processor creates a :class:`~sagemaker.session.Session`
                using the default AWS configuration chain.
            env (dict[str, str]): Environment variables to be passed to
                the processing jobs (default: None).
            tags (list[dict]): List of tags to be passed to the processing job
                (default: None). For more, see
                https://docs.aws.amazon.com/sagemaker/latest/dg/API_Tag.html.
            network_config (:class:`~sagemaker.network.NetworkConfig`):
                A :class:`~sagemaker.network.NetworkConfig`
                object that configures network isolation, encryption of
                inter-container traffic, security group IDs, and subnets.
            job_name_prefix (str): Processing job name prefix.
            version (str): Clarify version to use.
            skip_early_validation (bool): To skip schema validation of the generated analysis_schema.json.
        """
        ...
    
    def run(self, **_):
        """Overriding the base class method but deferring to specific run_* methods."""
        ...
    
    def run_pre_training_bias(self, data_config: DataConfig, data_bias_config: BiasConfig, methods: Union[str, List[str]] = ..., wait: bool = ..., logs: bool = ..., job_name: Optional[str] = ..., kms_key: Optional[str] = ..., experiment_config: Optional[Dict[str, str]] = ...):
        """Runs a :class:`~sagemaker.processing.ProcessingJob` to compute pre-training bias methods

        Computes the requested ``methods`` on the input data. The ``methods`` compare
        metrics (e.g. fraction of examples) for the sensitive group(s) vs. the other examples.

        Args:
            data_config (:class:`~sagemaker.clarify.DataConfig`): Config of the input/output data.
            data_bias_config (:class:`~sagemaker.clarify.BiasConfig`): Config of sensitive groups.
            methods (str or list[str]): Selects a subset of potential metrics:
                ["`CI <https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-bias-metric-class-imbalance.html>`_",
                "`DPL <https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-data-bias-metric-true-label-imbalance.html>`_",
                "`KL <https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-data-bias-metric-kl-divergence.html>`_",
                "`JS <https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-data-bias-metric-jensen-shannon-divergence.html>`_",
                "`LP <https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-data-bias-metric-lp-norm.html>`_",
                "`TVD <https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-data-bias-metric-total-variation-distance.html>`_",
                "`KS <https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-data-bias-metric-kolmogorov-smirnov.html>`_",
                "`CDDL <https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-data-bias-metric-cddl.html>`_"].
                Defaults to str "all" to run all metrics if left unspecified.
            wait (bool): Whether the call should wait until the job completes (default: True).
            logs (bool): Whether to show the logs produced by the job.
                Only meaningful when ``wait`` is True (default: True).
            job_name (str): Processing job name. When ``job_name`` is not specified,
                if ``job_name_prefix`` in :class:`~sagemaker.clarify.SageMakerClarifyProcessor` is
                specified, the job name will be the ``job_name_prefix`` and current timestamp;
                otherwise use ``"Clarify-Pretraining-Bias"`` as prefix.
            kms_key (str): The ARN of the KMS key that is used to encrypt the
                user code file (default: None).
            experiment_config (dict[str, str]): Experiment management configuration.
                Optionally, the dict can contain three keys:
                ``'ExperimentName'``, ``'TrialName'``, and ``'TrialComponentDisplayName'``.

                The behavior of setting these keys is as follows:

                * If ``'ExperimentName'`` is supplied but ``'TrialName'`` is not, a Trial will be
                  automatically created and the job's Trial Component associated with the Trial.
                * If ``'TrialName'`` is supplied and the Trial already exists,
                  the job's Trial Component will be associated with the Trial.
                * If both ``'ExperimentName'`` and ``'TrialName'`` are not supplied,
                  the Trial Component will be unassociated.
                * ``'TrialComponentDisplayName'`` is used for display in Amazon SageMaker Studio.
        """
        ...
    
    def run_post_training_bias(self, data_config: DataConfig, data_bias_config: BiasConfig, model_config: Optional[ModelConfig] = ..., model_predicted_label_config: Optional[ModelPredictedLabelConfig] = ..., methods: Union[str, List[str]] = ..., wait: bool = ..., logs: bool = ..., job_name: Optional[str] = ..., kms_key: Optional[str] = ..., experiment_config: Optional[Dict[str, str]] = ...):
        """Runs a :class:`~sagemaker.processing.ProcessingJob` to compute posttraining bias

        Spins up a model endpoint and runs inference over the input dataset in
        the ``s3_data_input_path`` (from the :class:`~sagemaker.clarify.DataConfig`) to obtain
        predicted labels. Using model predictions, computes the requested posttraining bias
        ``methods`` that compare metrics (e.g. accuracy, precision, recall) for the
        sensitive group(s) versus the other examples.

        Args:
            data_config (:class:`~sagemaker.clarify.DataConfig`): Config of the input/output data.
            data_bias_config (:class:`~sagemaker.clarify.BiasConfig`): Config of sensitive groups.
            model_config (:class:`~sagemaker.clarify.ModelConfig`): Config of the model and its
                endpoint to be created. This is required unless``predicted_label_dataset_uri`` or
                ``predicted_label`` is provided in ``data_config``.
            model_predicted_label_config (:class:`~sagemaker.clarify.ModelPredictedLabelConfig`):
                Config of how to extract the predicted label from the model output.
            methods (str or list[str]): Selector of a subset of potential metrics:
                ["`DPPL <https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-post-training-bias-metric-dppl.html>`_"
                , "`DI <https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-post-training-bias-metric-di.html>`_",
                "`DCA <https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-post-training-bias-metric-dca.html>`_",
                "`DCR <https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-post-training-bias-metric-dcr.html>`_",
                "`RD <https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-post-training-bias-metric-rd.html>`_",
                "`DAR <https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-post-training-bias-metric-dar.html>`_",
                "`DRR <https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-post-training-bias-metric-drr.html>`_",
                "`AD <https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-post-training-bias-metric-ad.html>`_",
                "`CDDPL <https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-post-training-bias-metric-cddpl.html>`_
                ", "`TE <https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-post-training-bias-metric-te.html>`_",
                "`FT <https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-post-training-bias-metric-ft.html>`_"].
                Defaults to str "all" to run all metrics if left unspecified.
            wait (bool): Whether the call should wait until the job completes (default: True).
            logs (bool): Whether to show the logs produced by the job.
                Only meaningful when ``wait`` is True (default: True).
            job_name (str): Processing job name. When ``job_name`` is not specified,
                if ``job_name_prefix`` in :class:`~sagemaker.clarify.SageMakerClarifyProcessor`
                is specified, the job name will be the ``job_name_prefix`` and current timestamp;
                otherwise use ``"Clarify-Posttraining-Bias"`` as prefix.
            kms_key (str): The ARN of the KMS key that is used to encrypt the
                user code file (default: None).
            experiment_config (dict[str, str]): Experiment management configuration.
                Optionally, the dict can contain three keys:
                ``'ExperimentName'``, ``'TrialName'``, and ``'TrialComponentDisplayName'``.

                The behavior of setting these keys is as follows:

                * If ``'ExperimentName'`` is supplied but ``'TrialName'`` is not, a Trial will be
                  automatically created and the job's Trial Component associated with the Trial.
                * If ``'TrialName'`` is supplied and the Trial already exists,
                  the job's Trial Component will be associated with the Trial.
                * If both ``'ExperimentName'`` and ``'TrialName'`` are not supplied,
                  the Trial Component will be unassociated.
                * ``'TrialComponentDisplayName'`` is used for display in Amazon SageMaker Studio.
        """
        ...
    
    def run_bias(self, data_config: DataConfig, bias_config: BiasConfig, model_config: Optional[ModelConfig] = ..., model_predicted_label_config: Optional[ModelPredictedLabelConfig] = ..., pre_training_methods: Union[str, List[str]] = ..., post_training_methods: Union[str, List[str]] = ..., wait: bool = ..., logs: bool = ..., job_name: Optional[str] = ..., kms_key: Optional[str] = ..., experiment_config: Optional[Dict[str, str]] = ...):
        """Runs a :class:`~sagemaker.processing.ProcessingJob` to compute the requested bias methods

        Computes metrics for both the pre-training and the post-training methods.
        To calculate post-training methods, it spins up a model endpoint and runs inference over the
        input examples in 's3_data_input_path' (from the :class:`~sagemaker.clarify.DataConfig`)
        to obtain predicted labels.

        Args:
            data_config (:class:`~sagemaker.clarify.DataConfig`): Config of the input/output data.
            bias_config (:class:`~sagemaker.clarify.BiasConfig`): Config of sensitive groups.
            model_config (:class:`~sagemaker.clarify.ModelConfig`): Config of the model and its
                endpoint to be created. This is required unless``predicted_label_dataset_uri`` or
                ``predicted_label`` is provided in ``data_config``.
            model_predicted_label_config (:class:`~sagemaker.clarify.ModelPredictedLabelConfig`):
                Config of how to extract the predicted label from the model output.
            pre_training_methods (str or list[str]): Selector of a subset of potential metrics:
                ["`CI <https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-bias-metric-class-imbalance.html>`_",
                "`DPL <https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-data-bias-metric-true-label-imbalance.html>`_",
                "`KL <https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-data-bias-metric-kl-divergence.html>`_",
                "`JS <https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-data-bias-metric-jensen-shannon-divergence.html>`_",
                "`LP <https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-data-bias-metric-lp-norm.html>`_",
                "`TVD <https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-data-bias-metric-total-variation-distance.html>`_",
                "`KS <https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-data-bias-metric-kolmogorov-smirnov.html>`_",
                "`CDDL <https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-data-bias-metric-cddl.html>`_"].
                Defaults to str "all" to run all metrics if left unspecified.
            post_training_methods (str or list[str]): Selector of a subset of potential metrics:
                ["`DPPL <https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-post-training-bias-metric-dppl.html>`_"
                , "`DI <https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-post-training-bias-metric-di.html>`_",
                "`DCA <https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-post-training-bias-metric-dca.html>`_",
                "`DCR <https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-post-training-bias-metric-dcr.html>`_",
                "`RD <https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-post-training-bias-metric-rd.html>`_",
                "`DAR <https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-post-training-bias-metric-dar.html>`_",
                "`DRR <https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-post-training-bias-metric-drr.html>`_",
                "`AD <https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-post-training-bias-metric-ad.html>`_",
                "`CDDPL <https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-post-training-bias-metric-cddpl.html>`_
                ", "`TE <https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-post-training-bias-metric-te.html>`_",
                "`FT <https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-post-training-bias-metric-ft.html>`_"].
                Defaults to str "all" to run all metrics if left unspecified.
            wait (bool): Whether the call should wait until the job completes (default: True).
            logs (bool): Whether to show the logs produced by the job.
                Only meaningful when ``wait`` is True (default: True).
            job_name (str): Processing job name. When ``job_name`` is not specified,
                if ``job_name_prefix`` in :class:`~sagemaker.clarify.SageMakerClarifyProcessor` is
                specified, the job name will be ``job_name_prefix`` and the current timestamp;
                otherwise use ``"Clarify-Bias"`` as prefix.
            kms_key (str): The ARN of the KMS key that is used to encrypt the
                user code file (default: None).
            experiment_config (dict[str, str]): Experiment management configuration.
                Optionally, the dict can contain three keys:
                ``'ExperimentName'``, ``'TrialName'``, and ``'TrialComponentDisplayName'``.

                The behavior of setting these keys is as follows:

                * If ``'ExperimentName'`` is supplied but ``'TrialName'`` is not, a Trial will be
                  automatically created and the job's Trial Component associated with the Trial.
                * If ``'TrialName'`` is supplied and the Trial already exists,
                  the job's Trial Component will be associated with the Trial.
                * If both ``'ExperimentName'`` and ``'TrialName'`` are not supplied,
                  the Trial Component will be unassociated.
                * ``'TrialComponentDisplayName'`` is used for display in Amazon SageMaker Studio.
        """
        ...
    
    def run_explainability(self, data_config: DataConfig, model_config: ModelConfig, explainability_config: Union[ExplainabilityConfig, List], model_scores: Optional[Union[int, str, ModelPredictedLabelConfig]] = ..., wait: bool = ..., logs: bool = ..., job_name: Optional[str] = ..., kms_key: Optional[str] = ..., experiment_config: Optional[Dict[str, str]] = ...):
        """Runs a :class:`~sagemaker.processing.ProcessingJob` computing feature attributions.

        Spins up a model endpoint.

        Currently, only SHAP and  Partial Dependence Plots (PDP) are supported
        as explainability methods.
        You can request both methods or one at a time with the ``explainability_config`` parameter.

        When SHAP is requested in the ``explainability_config``,
        the SHAP algorithm calculates the feature importance for each input example
        in the ``s3_data_input_path`` of the :class:`~sagemaker.clarify.DataConfig`,
        by creating ``num_samples`` copies of the example with a subset of features
        replaced with values from the ``baseline``.
        It then runs model inference to see how the model's prediction changes with the replaced
        features. If the model output returns multiple scores importance is computed for each score.
        Across examples, feature importance is aggregated using ``agg_method``.

        When PDP is requested in the ``explainability_config``,
        the PDP algorithm calculates the dependence of the target response
        on the input features and marginalizes over the values of all other input features.
        The Partial Dependence Plots are included in the output
        `report <https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-feature-attribute-baselines-reports.html>`__
        and the corresponding values are included in the analysis output.

        Args:
            data_config (:class:`~sagemaker.clarify.DataConfig`): Config of the input/output data.
            model_config (:class:`~sagemaker.clarify.ModelConfig`): Config of the model and its
                endpoint to be created.
            explainability_config (:class:`~sagemaker.clarify.ExplainabilityConfig` or list):
                Config of the specific explainability method or a list of
                :class:`~sagemaker.clarify.ExplainabilityConfig` objects.
                Currently, SHAP and PDP are the two methods supported.
                You can request multiple methods at once by passing in a list of
                `~sagemaker.clarify.ExplainabilityConfig`.
            model_scores (int or str or :class:`~sagemaker.clarify.ModelPredictedLabelConfig`):
                Index or JMESPath expression to locate the predicted scores in the model output.
                This is not required if the model output is a single score. Alternatively,
                it can be an instance of :class:`~sagemaker.clarify.SageMakerClarifyProcessor`
                to provide more parameters like ``label_headers``.
            wait (bool): Whether the call should wait until the job completes (default: True).
            logs (bool): Whether to show the logs produced by the job.
                Only meaningful when ``wait`` is True (default: True).
            job_name (str): Processing job name. When ``job_name`` is not specified,
                if ``job_name_prefix`` in :class:`~sagemaker.clarify.SageMakerClarifyProcessor`
                is specified, the job name will be composed of ``job_name_prefix`` and current
                timestamp; otherwise use ``"Clarify-Explainability"`` as prefix.
            kms_key (str): The ARN of the KMS key that is used to encrypt the
                user code file (default: None).
            experiment_config (dict[str, str]): Experiment management configuration.
                Optionally, the dict can contain three keys:
                ``'ExperimentName'``, ``'TrialName'``, and ``'TrialComponentDisplayName'``.

                The behavior of setting these keys is as follows:

                * If ``'ExperimentName'`` is supplied but ``'TrialName'`` is not, a Trial will be
                  automatically created and the job's Trial Component associated with the Trial.
                * If ``'TrialName'`` is supplied and the Trial already exists,
                  the job's Trial Component will be associated with the Trial.
                * If both ``'ExperimentName'`` and ``'TrialName'`` are not supplied,
                  the Trial Component will be unassociated.
                * ``'TrialComponentDisplayName'`` is used for display in Amazon SageMaker Studio.
        """
        ...
    
    def run_bias_and_explainability(self, data_config: DataConfig, model_config: ModelConfig, explainability_config: Union[ExplainabilityConfig, List[ExplainabilityConfig]], bias_config: BiasConfig, pre_training_methods: Union[str, List[str]] = ..., post_training_methods: Union[str, List[str]] = ..., model_predicted_label_config: ModelPredictedLabelConfig = ..., wait=..., logs=..., job_name=..., kms_key=..., experiment_config=...):
        """Runs a :class:`~sagemaker.processing.ProcessingJob` computing feature attributions.

        For bias:
        Computes metrics for both the pre-training and the post-training methods.
        To calculate post-training methods, it spins up a model endpoint and runs inference over the
        input examples in 's3_data_input_path' (from the :class:`~sagemaker.clarify.DataConfig`)
        to obtain predicted labels.

        For Explainability:
        Spins up a model endpoint.

        Currently, only SHAP and  Partial Dependence Plots (PDP) are supported
        as explainability methods.
        You can request both methods or one at a time with the ``explainability_config`` parameter.

        When SHAP is requested in the ``explainability_config``,
        the SHAP algorithm calculates the feature importance for each input example
        in the ``s3_data_input_path`` of the :class:`~sagemaker.clarify.DataConfig`,
        by creating ``num_samples`` copies of the example with a subset of features
        replaced with values from the ``baseline``.
        It then runs model inference to see how the model's prediction changes with the replaced
        features. If the model output returns multiple scores importance is computed for each score.
        Across examples, feature importance is aggregated using ``agg_method``.

        When PDP is requested in the ``explainability_config``,
        the PDP algorithm calculates the dependence of the target response
        on the input features and marginalizes over the values of all other input features.
        The Partial Dependence Plots are included in the output
        `report <https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-feature-attribute-baselines-reports.html>`__
        and the corresponding values are included in the analysis output.

        Args:
            data_config (:class:`~sagemaker.clarify.DataConfig`): Config of the input/output data.
            model_config (:class:`~sagemaker.clarify.ModelConfig`): Config of the model and its
                endpoint to be created.
            explainability_config (:class:`~sagemaker.clarify.ExplainabilityConfig` or list):
                Config of the specific explainability method or a list of
                :class:`~sagemaker.clarify.ExplainabilityConfig` objects.
                Currently, SHAP and PDP are the two methods supported.
                You can request multiple methods at once by passing in a list of
                `~sagemaker.clarify.ExplainabilityConfig`.
            bias_config (:class:`~sagemaker.clarify.BiasConfig`): Config of sensitive groups.
            pre_training_methods (str or list[str]): Selector of a subset of potential metrics:
                ["`CI <https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-bias-metric-class-imbalance.html>`_",
                "`DPL <https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-data-bias-metric-true-label-imbalance.html>`_",
                "`KL <https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-data-bias-metric-kl-divergence.html>`_",
                "`JS <https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-data-bias-metric-jensen-shannon-divergence.html>`_",
                "`LP <https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-data-bias-metric-lp-norm.html>`_",
                "`TVD <https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-data-bias-metric-total-variation-distance.html>`_",
                "`KS <https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-data-bias-metric-kolmogorov-smirnov.html>`_",
                "`CDDL <https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-data-bias-metric-cddl.html>`_"].
                Defaults to str "all" to run all metrics if left unspecified.
            post_training_methods (str or list[str]): Selector of a subset of potential metrics:
                ["`DPPL <https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-post-training-bias-metric-dppl.html>`_"
                , "`DI <https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-post-training-bias-metric-di.html>`_",
                "`DCA <https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-post-training-bias-metric-dca.html>`_",
                "`DCR <https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-post-training-bias-metric-dcr.html>`_",
                "`RD <https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-post-training-bias-metric-rd.html>`_",
                "`DAR <https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-post-training-bias-metric-dar.html>`_",
                "`DRR <https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-post-training-bias-metric-drr.html>`_",
                "`AD <https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-post-training-bias-metric-ad.html>`_",
                "`CDDPL <https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-post-training-bias-metric-cddpl.html>`_
                ", "`TE <https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-post-training-bias-metric-te.html>`_",
                "`FT <https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-post-training-bias-metric-ft.html>`_"].
                Defaults to str "all" to run all metrics if left unspecified.
            model_predicted_label_config (
                int or
                str or
                :class:`~sagemaker.clarify.ModelPredictedLabelConfig`
            ):
                Index or JMESPath expression to locate the predicted scores in the model output.
                This is not required if the model output is a single score. Alternatively,
                it can be an instance of :class:`~sagemaker.clarify.SageMakerClarifyProcessor`
                to provide more parameters like ``label_headers``.
            wait (bool): Whether the call should wait until the job completes (default: True).
            logs (bool): Whether to show the logs produced by the job.
                Only meaningful when ``wait`` is True (default: True).
            job_name (str): Processing job name. When ``job_name`` is not specified,
                if ``job_name_prefix`` in :class:`~sagemaker.clarify.SageMakerClarifyProcessor`
                is specified, the job name will be composed of ``job_name_prefix`` and current
                timestamp; otherwise use ``"Clarify-Explainability"`` as prefix.
            kms_key (str): The ARN of the KMS key that is used to encrypt the
                user code file (default: None).
            experiment_config (dict[str, str]): Experiment management configuration.
                Optionally, the dict can contain three keys:
                ``'ExperimentName'``, ``'TrialName'``, and ``'TrialComponentDisplayName'``.

                The behavior of setting these keys is as follows:

                * If ``'ExperimentName'`` is supplied but ``'TrialName'`` is not, a Trial will be
                  automatically created and the job's Trial Component associated with the Trial.
                * If ``'TrialName'`` is supplied and the Trial already exists,
                  the job's Trial Component will be associated with the Trial.
                * If both ``'ExperimentName'`` and ``'TrialName'`` are not supplied,
                  the Trial Component will be unassociated.
                * ``'TrialComponentDisplayName'`` is used for display in Amazon SageMaker Studio.
        """
        ...
    


class _AnalysisConfigGenerator:
    """Creates analysis_config objects for different type of runs."""
    @classmethod
    def bias_and_explainability(cls, data_config: DataConfig, model_config: ModelConfig, model_predicted_label_config: ModelPredictedLabelConfig, explainability_config: Union[ExplainabilityConfig, List[ExplainabilityConfig]], bias_config: BiasConfig, pre_training_methods: Union[str, List[str]] = ..., post_training_methods: Union[str, List[str]] = ...):
        """Generates a config for Bias and Explainability"""
        ...
    
    @classmethod
    def explainability(cls, data_config: DataConfig, model_config: ModelConfig, model_predicted_label_config: ModelPredictedLabelConfig, explainability_config: Union[ExplainabilityConfig, List[ExplainabilityConfig]]):
        """Generates a config for Explainability"""
        ...
    
    @classmethod
    def bias_pre_training(cls, data_config: DataConfig, bias_config: BiasConfig, methods: Union[str, List[str]]):
        """Generates a config for Bias Pre Training"""
        ...
    
    @classmethod
    def bias_post_training(cls, data_config: DataConfig, bias_config: BiasConfig, model_predicted_label_config: ModelPredictedLabelConfig, methods: Union[str, List[str]], model_config: ModelConfig):
        """Generates a config for Bias Post Training"""
        ...
    
    @classmethod
    def bias(cls, data_config: DataConfig, bias_config: BiasConfig, model_config: ModelConfig, model_predicted_label_config: ModelPredictedLabelConfig, pre_training_methods: Union[str, List[str]] = ..., post_training_methods: Union[str, List[str]] = ...):
        """Generates a config for Bias"""
        ...
    


class ProcessingOutputHandler:
    """Class to handle the parameters for SagemakerProcessor.Processingoutput"""
    class S3UploadMode(Enum):
        """Enum values for different uplaod modes to s3 bucket"""
        CONTINUOUS = ...
        ENDOFJOB = ...
    
    
    @classmethod
    def get_s3_upload_mode(cls, analysis_config: Dict[str, Any]) -> str:
        """Fetches s3_upload mode based on the shap_config values

        Args:
            analysis_config (dict): dict Config following the analysis_config.json format

        Returns:
            The s3_upload_mode type for the processing output.
        """
        ...
    


