"""
This type stub file was generated by pyright.
"""

from typing import Dict, List, Optional
from sagemaker.job import _Job
from sagemaker.session import Session
from sagemaker.workflow.pipeline_context import runnable_by_pipeline

"""
This type stub file was generated by pyright.
"""
logger = ...
class AutoMLInput:
    """Accepts parameters that specify an S3 input for an auto ml job

    Provides a method to turn those parameters into a dictionary.
    """
    def __init__(self, inputs, target_attribute_name, compression=..., channel_type=..., content_type=..., s3_data_type=..., sample_weight_attribute_name=...) -> None:
        """Convert an S3 Uri or a list of S3 Uri to an AutoMLInput object.

        Args:
            inputs (str, list[str], PipelineVariable):
                a string or a list of string or a PipelineVariable that points to (a)
                S3 location(s) where input data is stored.
            target_attribute_name (str, PipelineVariable):
                the target attribute name for regression or classification.
            compression (str, PipelineVariable):
                if training data is compressed, the compression type. The default value is None.
            channel_type (str, PipelineVariable): The channel type an enum to specify
                whether the input resource is for training or validation.
                Valid values: training or validation.
            content_type (str, PipelineVariable):
                The content type of the data from the input source.
            s3_data_type (str, PipelineVariable): The data type for S3 data source.
                Valid values: ManifestFile or S3Prefix.
            sample_weight_attribute_name (str, PipelineVariable):
                the name of the dataset column representing sample weights
        """
        ...
    
    def to_request_dict(self):
        """Generates a request dictionary using the parameters provided to the class."""
        ...
    


class AutoML:
    """A class for creating and interacting with SageMaker AutoML jobs."""
    def __init__(self, role: Optional[str] = ..., target_attribute_name: str = ..., output_kms_key: Optional[str] = ..., output_path: Optional[str] = ..., base_job_name: Optional[str] = ..., compression_type: Optional[str] = ..., sagemaker_session: Optional[Session] = ..., volume_kms_key: Optional[str] = ..., encrypt_inter_container_traffic: Optional[bool] = ..., vpc_config: Optional[Dict[str, List]] = ..., problem_type: Optional[str] = ..., max_candidates: Optional[int] = ..., max_runtime_per_training_job_in_seconds: Optional[int] = ..., total_job_runtime_in_seconds: Optional[int] = ..., job_objective: Optional[Dict[str, str]] = ..., generate_candidate_definitions_only: Optional[bool] = ..., tags: Optional[List[Dict[str, str]]] = ..., content_type: Optional[str] = ..., s3_data_type: Optional[str] = ..., feature_specification_s3_uri: Optional[str] = ..., validation_fraction: Optional[float] = ..., mode: Optional[str] = ..., auto_generate_endpoint_name: Optional[bool] = ..., endpoint_name: Optional[str] = ..., sample_weight_attribute_name: str = ...) -> None:
        """Initialize the an AutoML object.

        Args:
            role (str): The ARN of the role that is used to create the job and access the data.
            target_attribute_name (str): The name of the target variable
                in supervised learning.
            output_kms_key (str): The AWS KMS encryption key ID for output data configuration
            output_path (str): The Amazon S3 output path. Must be 128 characters or less.
            base_job_name (str): The name of AutoML job.
                The name must be unique to within the AWS account and is case-insensitive.
            compression_type (str): The compression type for input data. Gzip or None.
            sagemaker_session (sagemaker.session.Session): A SageMaker Session
                object, used for SageMaker interactions.
            volume_kms_key (str): The key used to encrypt stored data.
            encrypt_inter_container_traffic (bool): whether to use traffic encryption
                between the container layers.
            vpc_config (dict): Specifies a VPC that your training jobs and hosted models have
                access to. Contents include "SecurityGroupIds" and "Subnets".
            problem_type (str): Defines the type of supervised learning
                available for the candidates.
            max_candidates (int): The maximum number of times a training job is allowed to run.
            max_runtime_per_training_job_in_seconds (int): The maximum time, in seconds,
                that each training job executed inside hyperparameter tuning
                is allowed to run as part of a hyperparameter tuning job.
            total_job_runtime_in_seconds (int): the total wait time of an AutoML job.
            job_objective (dict[str, str]): Defines the objective metric
                used to measure the predictive quality of an AutoML job.
                In the format of: {"MetricName": str}
            generate_candidate_definitions_only (bool): Whether to generates
                possible candidates without training the models.
            tags (List[dict[str, str]]): The list of tags to attach to this
                specific endpoint.
            content_type (str): The content type of the data from the input source.
            s3_data_type (str): The data type for S3 data source.
                Valid values: ManifestFile or S3Prefix.
            feature_specification_s3_uri (str): A URL to the Amazon S3 data source containing
                selected features and specified data types
                from the input data source of an AutoML job.
            validation_fraction (float): A float that specifies the portion of
                the input dataset to be used for validation.
            mode (str): The method that AutoML job uses to train the model.
                Valid values: AUTO or ENSEMBLING or HYPERPARAMETER_TUNING.
            auto_generate_endpoint_name (bool): Whether to automatically generate
                an endpoint name for a one-click Autopilot model deployment.
                If set auto_generate_endpoint_name to True, do not specify the endpoint_name.
            endpoint_name (str): Specifies the endpoint name to use for a one-click AutoML
                model deployment if the endpoint name is not generated automatically.
                Specify the endpoint_name if and only if
                auto_generate_endpoint_name is set to False
            sample_weight_attribute_name (str): The name of dataset column representing
                sample weights.

        Returns:
            AutoML object.
        """
        ...
    
    @runnable_by_pipeline
    def fit(self, inputs=..., wait=..., logs=..., job_name=...):
        """Create an AutoML Job with the input dataset.

        Args:
            inputs (str or list[str] or AutoMLInput or list[AutoMLInput]):
                Local path or S3 Uri where the training data is stored.
                Or an AutoMLInput object. Or a list of AutoMLInput objects.
                If a local path is provided, the dataset will be uploaded to an S3 location.
                The list of AutoMLInput objects is to specify the training or the validation
                input source. Input source for training and validation
                must share the same content type and target attribute name.
                Minimum number of 1 item. Maximum number of 2 items for list[AutoMLInput].
            wait (bool): Whether the call should wait until the job completes (default: True).
            logs (bool): Whether to show the logs produced by the job. Only meaningful when wait
                is True (default: True). if ``wait`` is False, ``logs`` will be set to False as
                well.
            job_name (str): Training job name. If not specified, the estimator generates
                a default job name, based on the training image name and current timestamp.
        """
        ...
    
    @classmethod
    def attach(cls, auto_ml_job_name, sagemaker_session=...):
        """Attach to an existing AutoML job.

        Creates and returns a AutoML bound to an existing automl job.

        Args:
            auto_ml_job_name (str): AutoML job name
            sagemaker_session (sagemaker.session.Session): A SageMaker Session
                object, used for SageMaker interactions (default: None). If not
                specified, the one originally associated with the ``AutoML`` instance is used.

        Returns:
            sagemaker.automl.AutoML: A ``AutoML`` instance with the attached automl job.

        """
        ...
    
    def describe_auto_ml_job(self, job_name=...):
        """Returns the job description of an AutoML job for the given job name.

        Args:
            job_name (str): The name of the AutoML job to describe.
                If None, will use object's latest_auto_ml_job name.

        Returns:
            dict: A dictionary response with the AutoML Job description.
        """
        ...
    
    def best_candidate(self, job_name=...):
        """Returns the best candidate of an AutoML job for a given name.

        Args:
            job_name (str): The name of the AutoML job. If None, will use object's
                _current_auto_ml_job_name.

        Returns:
            dict: A dictionary with information of the best candidate.
        """
        ...
    
    def list_candidates(self, job_name=..., status_equals=..., candidate_name=..., candidate_arn=..., sort_order=..., sort_by=..., max_results=...):
        """Returns the list of candidates of an AutoML job for a given name.

        Args:
            job_name (str): The name of the AutoML job. If None, will use object's
                _current_job name.
            status_equals (str): Filter the result with candidate status, values could be
                "Completed", "InProgress", "Failed", "Stopped", "Stopping"
            candidate_name (str): The name of a specified candidate to list.
                Default to None.
            candidate_arn (str): The Arn of a specified candidate to list.
                Default to None.
            sort_order (str): The order that the candidates will be listed in result.
                Default to None.
            sort_by (str): The value that the candidates will be sorted by.
                Default to None.
            max_results (int): The number of candidates will be listed in results,
                between 1 to 100. Default to None. If None, will return all the candidates.

        Returns:
            list: A list of dictionaries with candidates information.
        """
        ...
    
    def create_model(self, name, sagemaker_session=..., candidate=..., vpc_config=..., enable_network_isolation=..., model_kms_key=..., predictor_cls=..., inference_response_keys=...):
        """Creates a model from a given candidate or the best candidate from the job.

        Args:
            name (str): The pipeline model name.
            sagemaker_session (sagemaker.session.Session): A SageMaker Session
                object, used for SageMaker interactions (default: None). If not
                specified, the one originally associated with the ``AutoML`` instance is used.:
            candidate (CandidateEstimator or dict): a CandidateEstimator used for deploying
                to a SageMaker Inference Pipeline. If None, the best candidate will
                be used. If the candidate input is a dict, a CandidateEstimator will be
                created from it.
            vpc_config (dict): Specifies a VPC that your training jobs and hosted models have
                access to. Contents include "SecurityGroupIds" and "Subnets".
            enable_network_isolation (bool): Isolates the training container. No inbound or
                outbound network calls can be made, except for calls between peers within a
                training cluster for distributed training. Default: False
            model_kms_key (str): KMS key ARN used to encrypt the repacked
                model archive file if the model is repacked
            predictor_cls (callable[string, sagemaker.session.Session]): A
                function to call to create a predictor (default: None). If
                specified, ``deploy()``  returns the result of invoking this
                function on the created endpoint name.
            inference_response_keys (list): List of keys for response content. The order of the
                keys will dictate the content order in the response.

        Returns:
            PipelineModel object.
        """
        ...
    
    def deploy(self, initial_instance_count, instance_type, serializer=..., deserializer=..., candidate=..., sagemaker_session=..., name=..., endpoint_name=..., tags=..., wait=..., vpc_config=..., enable_network_isolation=..., model_kms_key=..., predictor_cls=..., inference_response_keys=..., volume_size=..., model_data_download_timeout=..., container_startup_health_check_timeout=...):
        """Deploy a candidate to a SageMaker Inference Pipeline.

        Args:
            initial_instance_count (int): The initial number of instances to run
                in the ``Endpoint`` created from this ``Model``.
            instance_type (str): The EC2 instance type to deploy this Model to.
                For example, 'ml.p2.xlarge'.
            serializer (:class:`~sagemaker.serializers.BaseSerializer`): A
                serializer object, used to encode data for an inference endpoint
                (default: None). If ``serializer`` is not None, then
                ``serializer`` will override the default serializer. The
                default serializer is set by the ``predictor_cls``.
            deserializer (:class:`~sagemaker.deserializers.BaseDeserializer`): A
                deserializer object, used to decode data from an inference
                endpoint (default: None). If ``deserializer`` is not None, then
                ``deserializer`` will override the default deserializer. The
                default deserializer is set by the ``predictor_cls``.
            candidate (CandidateEstimator or dict): a CandidateEstimator used for deploying
                to a SageMaker Inference Pipeline. If None, the best candidate will
                be used. If the candidate input is a dict, a CandidateEstimator will be
                created from it.
            sagemaker_session (sagemaker.session.Session): A SageMaker Session
                object, used for SageMaker interactions (default: None). If not
                specified, the one originally associated with the ``AutoML`` instance is used.
            name (str): The pipeline model name. If None, a default model name will
                be selected on each ``deploy``.
            endpoint_name (str): The name of the endpoint to create (default:
                None). If not specified, a unique endpoint name will be created.
            tags (List[dict[str, str]]): The list of tags to attach to this
                specific endpoint.
            wait (bool): Whether the call should wait until the deployment of
                model completes (default: True).
            vpc_config (dict): Specifies a VPC that your training jobs and hosted models have
                access to. Contents include "SecurityGroupIds" and "Subnets".
            enable_network_isolation (bool): Isolates the training container. No inbound or
                outbound network calls can be made, except for calls between peers within a
                training cluster for distributed training. Default: False
            model_kms_key (str): KMS key ARN used to encrypt the repacked
                model archive file if the model is repacked
            predictor_cls (callable[string, sagemaker.session.Session]): A
                function to call to create a predictor (default: None). If
                specified, ``deploy()``  returns the result of invoking this
                function on the created endpoint name.
            inference_response_keys (list): List of keys for response content. The order of the
                keys will dictate the content order in the response.
            volume_size (int): The size, in GB, of the ML storage volume attached to individual
                inference instance associated with the production variant. Currenly only Amazon EBS
                gp2 storage volumes are supported.
            model_data_download_timeout (int): The timeout value, in seconds, to download and
                extract model data from Amazon S3 to the individual inference instance associated
                with this production variant.
            container_startup_health_check_timeout (int): The timeout value, in seconds, for your
                inference container to pass health check by SageMaker Hosting. For more information
                about health check see:
                https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-inference-code.html#your-algorithms-inference-algo-ping-requests

        Returns:
            callable[string, sagemaker.session.Session] or ``None``:
                If ``predictor_cls`` is specified, the invocation of ``self.predictor_cls`` on
                the created endpoint name. Otherwise, ``None``.
        """
        ...
    
    @classmethod
    def validate_and_update_inference_response(cls, inference_containers, inference_response_keys):
        """Validates the requested inference keys and updates response content.

        On validation, also updates the inference containers to emit appropriate response
        content in the inference response.

        Args:
            inference_containers (list): list of inference containers
            inference_response_keys (list): list of inference response keys

        Raises:
            ValueError: if one or more of inference_response_keys are unsupported by the model
        """
        ...
    


class AutoMLJob(_Job):
    """A class for interacting with CreateAutoMLJob API."""
    def __init__(self, sagemaker_session, job_name, inputs) -> None:
        ...
    
    @classmethod
    def start_new(cls, auto_ml, inputs):
        """Create a new Amazon SageMaker AutoML job from auto_ml.

        Args:
            auto_ml (sagemaker.automl.AutoML): AutoML object
                created by the user.
            inputs (str or list[str] or AutoMLInput or list[AutoMLInput]):
                Parameters used when called
                :meth:`~sagemaker.automl.AutoML.fit`.

        Returns:
            sagemaker.automl.AutoMLJob: Constructed object that captures
            all information about the started AutoML job.
        """
        ...
    
    def describe(self):
        """Prints out a response from the DescribeAutoMLJob API call."""
        ...
    
    def wait(self, logs=...):
        """Wait for the AutoML job to finish.

        Args:
            logs (bool): indicate whether to output logs.
        """
        ...
    


