"""
This type stub file was generated by pyright.
"""

from abc import ABCMeta
from six import with_metaclass

"""
This type stub file was generated by pyright.
"""
logger = ...
METRICS_PERIOD_DEFAULT = ...
class AnalyticsMetricsBase(with_metaclass(ABCMeta, object)):
    """Base class for tuning job or training job analytics classes.

    Understands common functionality like persistence and caching.
    """
    def __init__(self) -> None:
        """Initializes ``AnalyticsMetricsBase`` instance."""
        ...
    
    def export_csv(self, filename):
        """Persists the analytics dataframe to a file.

        Args:
            filename (str): The name of the file to save to.
        """
        ...
    
    def dataframe(self, force_refresh=...):
        """A pandas dataframe with lots of interesting results about this object.

        Created by calling SageMaker List and Describe APIs and converting them into a
        convenient tabular summary.

        Args:
            force_refresh (bool): Set to True to fetch the latest data from
                SageMaker API.
        """
        ...
    
    def clear_cache(self):
        """Clear the object of all local caches of API methods.

        So that the next time any properties are accessed they will be refreshed from the service.
        """
        ...
    


class HyperparameterTuningJobAnalytics(AnalyticsMetricsBase):
    """Fetch results about a hyperparameter tuning job and make them accessible for analytics."""
    def __init__(self, hyperparameter_tuning_job_name, sagemaker_session=...) -> None:
        """Initialize a ``HyperparameterTuningJobAnalytics`` instance.

        Args:
            hyperparameter_tuning_job_name (str): name of the
                HyperparameterTuningJob to analyze.
            sagemaker_session (sagemaker.session.Session): Session object which
                manages interactions with Amazon SageMaker APIs and any other
                AWS services needed. If not specified, one is created using the
                default AWS configuration chain.
        """
        ...
    
    @property
    def name(self):
        """Name of the HyperparameterTuningJob being analyzed"""
        ...
    
    def __repr__(self):
        """Human-readable representation override."""
        ...
    
    def clear_cache(self):
        """Clear the object of all local caches of API methods."""
        ...
    
    @property
    def tuning_ranges(self):
        """A dictionary describing the ranges of all tuned hyperparameters.

        The keys are the names of the hyperparameter, and the values are the ranges.

        The output can take one of two forms:

            * If the 'TrainingJobDefinition' field is present in the job description, the output
                is a dictionary constructed from 'ParameterRanges' in
                'HyperParameterTuningJobConfig' of the job description. The keys are the
                parameter names, while the values are the parameter ranges.
                Example:
                >>> {
                >>>     "eta": {"MaxValue": "1", "MinValue": "0", "Name": "eta"},
                >>>     "gamma": {"MaxValue": "10", "MinValue": "0", "Name": "gamma"},
                >>>     "iterations": {"MaxValue": "100", "MinValue": "50", "Name": "iterations"},
                >>>     "num_layers": {"MaxValue": "30", "MinValue": "5", "Name": "num_layers"},
                >>> }
            * If the 'TrainingJobDefinitions' field (list) is present in the job description,
                the output is a dictionary with keys as the 'DefinitionName' values from
                all items in 'TrainingJobDefinitions', and each value would be a dictionary
                constructed from 'HyperParameterRanges' in each item in 'TrainingJobDefinitions'
                in the same format as above
                Example:
                >>> {
                >>>     "estimator_1": {
                >>>         "eta": {"MaxValue": "1", "MinValue": "0", "Name": "eta"},
                >>>         "gamma": {"MaxValue": "10", "MinValue": "0", "Name": "gamma"},
                >>>     },
                >>>     "estimator_2": {
                >>>         "framework": {"Values": ["TF", "MXNet"], "Name": "framework"},
                >>>         "gamma": {"MaxValue": "1.0", "MinValue": "0.2", "Name": "gamma"}
                >>>     }
                >>> }

        For more details about the 'TrainingJobDefinition' and 'TrainingJobDefinitions' fields
        in job description, see
        https://botocore.readthedocs.io/en/latest/reference/services/sagemaker.html#SageMaker.Client.create_hyper_parameter_tuning_job
        """
        ...
    
    def description(self, force_refresh=...):
        """Call ``DescribeHyperParameterTuningJob`` for the hyperparameter tuning job.

        Args:
            force_refresh (bool): Set to True to fetch the latest data from
                SageMaker API.

        Returns:
            dict: The Amazon SageMaker response for
            ``DescribeHyperParameterTuningJob``.
        """
        ...
    
    def training_job_summaries(self, force_refresh=...):
        """A (paginated) list of everything from ``ListTrainingJobsForTuningJob``.

        Args:
            force_refresh (bool): Set to True to fetch the latest data from
                SageMaker API.

        Returns:
            dict: The Amazon SageMaker response for
            ``ListTrainingJobsForTuningJob``.
        """
        ...
    


class TrainingJobAnalytics(AnalyticsMetricsBase):
    """Fetch training curve data from CloudWatch Metrics for a specific training job."""
    CLOUDWATCH_NAMESPACE = ...
    def __init__(self, training_job_name, metric_names=..., sagemaker_session=..., start_time=..., end_time=..., period=...) -> None:
        """Initialize a ``TrainingJobAnalytics`` instance.

        Args:
            training_job_name (str): name of the TrainingJob to analyze.
            metric_names (list, optional): string names of all the metrics to
                collect for this training job. If not specified, then it will
                use all metric names configured for this job.
            sagemaker_session (sagemaker.session.Session): Session object which
                manages interactions with Amazon SageMaker APIs and any other
                AWS services needed. If not specified, one is specified using
                the default AWS configuration chain.
            start_time:
            end_time:
            period:
        """
        ...
    
    @property
    def name(self):
        """Name of the TrainingJob being analyzed"""
        ...
    
    def __repr__(self):
        """The human-readable representation override."""
        ...
    
    def clear_cache(self):
        """Clear the object of all local caches of API methods.

        This is so that the next time any properties are accessed they will be
        refreshed from the service.
        """
        ...
    


class ArtifactAnalytics(AnalyticsMetricsBase):
    """Fetch artifact data and make them accessible for analytics."""
    def __init__(self, sort_by=..., sort_order=..., source_uri=..., artifact_type=..., sagemaker_session=...) -> None:
        """Initialize a ``ArtifactAnalytics`` instance.

        Args:
            sort_by (str, optional): The name of the resource property used to sort
                the set of artifacts. Currently only support for sort by Name
            sort_order(str optional): How trial components are ordered, valid values are Ascending
                and Descending. The default is Descending.
            source_uri(dict optional): The artifact source uri for filtering.
            artifact_type(dict optional): The artifact type for filtering.
            sagemaker_session (obj, optional): Sagemaker session. Defaults to None.
        """
        ...
    
    def __repr__(self):
        """Human-readable representation override."""
        ...
    


class ExperimentAnalytics(AnalyticsMetricsBase):
    """Fetch trial component data and make them accessible for analytics."""
    MAX_TRIAL_COMPONENTS = ...
    def __init__(self, experiment_name=..., search_expression=..., sort_by=..., sort_order=..., metric_names=..., parameter_names=..., sagemaker_session=..., input_artifact_names=..., output_artifact_names=...) -> None:
        """Initialize a ``ExperimentAnalytics`` instance.

        Args:
            experiment_name (str, optional): Name of the experiment if you want to constrain the
                search to only trial components belonging to an experiment.
            search_expression (dict, optional): The search query to find the set of trial components
                to use to populate the data frame.
            sort_by (str, optional): The name of the resource property used to sort
                the set of trial components.
            sort_order(str optional): How trial components are ordered, valid values are Ascending
                and Descending. The default is Descending.
            metric_names (list, optional): string names of all the metrics to be shown in the
                data frame. If not specified, all metrics will be shown of all trials.
            parameter_names (list, optional): string names of the parameters to be shown in the
                data frame. If not specified, all parameters will be shown of all trials.
            sagemaker_session (sagemaker.session.Session): Session object which manages interactions
                with Amazon SageMaker APIs and any other AWS services needed. If not specified,
                one is created using the default AWS configuration chain.
            input_artifact_names(dict optional):The input artifacts for the experiment. Examples of
                input artifacts are datasets, algorithms, hyperparameters, source code, and instance
                types.
            output_artifact_names(dict optional): The output artifacts for the experiment. Examples
                of output artifacts are metrics, snapshots, logs, and images.
        """
        ...
    
    @property
    def name(self):
        """Name of the Experiment being analyzed."""
        ...
    
    def __repr__(self):
        """The human-readable representation override."""
        ...
    
    def clear_cache(self):
        """Clear the object of all local caches of API methods."""
        ...
    


