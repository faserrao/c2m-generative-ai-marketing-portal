"""
This type stub file was generated by pyright.
"""

from enum import Enum

"""
This type stub file was generated by pyright.
"""
def convert_json_config_to_string(config):
    """Helper function to convert the dictionary config to a string.

    Calling eval on this string should result in the original dictionary.

    Args:
        config (dict): The config to be converted to a string.

    Returns:
        str: The config dictionary formatted as a string.

    """
    ...

def is_valid_unix_time(unix_time):
    """Helper function to determine whether the provided UNIX time is valid.

    Args:
        unix_time (int): The user provided UNIX time.

    Returns:
        bool: Indicates whether the provided UNIX time was valid or not.

    """
    ...

def is_valid_regex(regex):
    """Helper function to determine whether the provided regex is valid.

    Args:
        regex (str): The user provided regex.

    Returns:
        bool: Indicates whether the provided regex was valid or not.

    """
    ...

class ErrorMessages(Enum):
    """Enum to store all possible messages during failures in validation of user arguments."""
    INVALID_LOCAL_PATH = ...
    INVALID_FILE_MAX_SIZE = ...
    INVALID_FILE_CLOSE_INTERVAL = ...
    INVALID_FILE_OPEN_FAIL_THRESHOLD = ...
    INVALID_PROFILE_DEFAULT_STEPS = ...
    INVALID_START_STEP = ...
    INVALID_NUM_STEPS = ...
    INVALID_START_UNIX_TIME = ...
    INVALID_DURATION = ...
    FOUND_BOTH_STEP_AND_TIME_FIELDS = ...
    INVALID_METRICS_REGEX = ...
    INVALID_PYTHON_PROFILER = ...
    INVALID_CPROFILE_TIMER = ...


class PythonProfiler(Enum):
    """Enum to list the Python profiler options for Python profiling.

    .. py:attribute:: CPROFILE

        Use to choose ``"cProfile"``.

    .. py:attribute:: PYINSTRUMENT

        Use to choose ``"Pyinstrument"``.

    """
    CPROFILE = ...
    PYINSTRUMENT = ...


class cProfileTimer(Enum):
    """Enum to list the possible cProfile timers for Python profiling.

    .. py:attribute:: TOTAL_TIME

        Use to choose ``"total_time"``.

    .. py:attribute:: CPU_TIME

        Use to choose ``"cpu_time"``.

    .. py:attribute:: OFF_CPU_TIME

        Use to choose ``"off_cpu_time"``.

    """
    TOTAL_TIME = ...
    CPU_TIME = ...
    OFF_CPU_TIME = ...
    DEFAULT = ...


