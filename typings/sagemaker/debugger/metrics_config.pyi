"""
This type stub file was generated by pyright.
"""

"""
This type stub file was generated by pyright.
"""
class StepRange:
    """Configuration for the range of steps to profile.

    It returns the target steps in dictionary format that you can pass to the
    :class:`~sagemaker.debugger.FrameworkProfile` class.

    """
    def __init__(self, start_step, num_steps) -> None:
        """Set the start step and num steps.

        If the start step is not specified,
        Debugger starts profiling
        at step 0. If num steps is not specified, profile for 1 step.

        Args:
            start_step (int): The step to start profiling.
            num_steps (int): The number of steps to profile.

        """
        ...
    
    def to_json(self):
        """Convert the step range into a dictionary.

        Returns:
            dict: The step range as a dictionary.

        """
        ...
    


class TimeRange:
    """Configuration for the range of Unix time to profile.

    It returns the target time duration in dictionary format that you can pass to the
    :class:`~sagemaker.debugger.FrameworkProfile` class.

    """
    def __init__(self, start_unix_time, duration) -> None:
        """Set the start Unix time and duration.

        If the start Unix time is not specified,
        profile starting at step 0. If the duration is not specified, profile for 1 step.

        Args:
            start_unix_time (int): The Unix time to start profiling.
            duration (float): The duration in seconds to profile.

        """
        ...
    
    def to_json(self):
        """Convert the time range into a dictionary.

        Returns:
            dict: The time range as a dictionary.

        """
        ...
    


class MetricsConfigBase:
    """The base class for the metrics configuration.

    It determines the step or time range that needs to be
    profiled and validates the input value pairs. Available profiling range parameter pairs are
    (**start_step** and **num_steps**) and (**start_unix_time** and **duration**).
    The two parameter pairs are mutually exclusive, and this class validates
    if one of the two pairs is used. If both pairs are specified, a
    FOUND_BOTH_STEP_AND_TIME_FIELDS error occurs.

    """
    def __init__(self, name, start_step, num_steps, start_unix_time, duration) -> None:
        """Validate the provided range fields and set the range to be profiled accordingly.

        Args:
            name (str): The name of the metrics config.
            start_step (int): The step to start profiling.
            num_steps (int): The number of steps to profile.
            start_unix_time (int): The Unix time to start profiling.
            duration (float): The duration in seconds to profile.

        """
        ...
    
    def to_json_string(self):
        """Convert this metrics configuration to dictionary formatted as a string.

        Calling eval on the
        return value is the same as calling _to_json directly.

        Returns:
            str: This metrics configuration as a dictionary and formatted as a string.

        """
        ...
    


class DetailedProfilingConfig(MetricsConfigBase):
    """The configuration for framework metrics to be collected for detailed profiling."""
    def __init__(self, start_step=..., num_steps=..., start_unix_time=..., duration=..., profile_default_steps=...) -> None:
        """Specify target steps or a target duration to profile.

        By default, it profiles step 5 of the training job.

        If **profile_default_steps** is set to `True` and none of the other
        range parameters is specified,
        the class uses the default configuration for detailed profiling.

        Args:
            start_step (int): The step to start profiling. The default is step 5.
            num_steps (int): The number of steps to profile. The default is for 1 step.
            start_unix_time (int): The Unix time to start profiling.
            duration (float): The duration in seconds to profile.
            profile_default_steps (bool): Indicates whether the default config should be used.

        .. tip::
            Available profiling range parameter pairs are
            (**start_step** and **num_steps**) and (**start_unix_time** and **duration**).
            The two parameter pairs are mutually exclusive, and this class validates
            if one of the two pairs is used. If both pairs are specified, a
            conflict error occurs.

        .. warning::
            This detailed framework profiling feature discontinues support for TensorFlow v2.11
            and later. To use the detailed profiling feature, use previous versions of
            TensorFlow between v2.3.1 and v2.10.0.

        """
        ...
    


class DataloaderProfilingConfig(MetricsConfigBase):
    """The configuration for framework metrics to be collected for data loader profiling."""
    def __init__(self, start_step=..., num_steps=..., start_unix_time=..., duration=..., profile_default_steps=..., metrics_regex=...) -> None:
        """Specify target steps or a target duration to profile.

        By default, it profiles step 7 of
        training. If **profile_default_steps** is set to `True` and none of the other
        range parameters is specified,
        the class uses the default config for dataloader profiling.

        Args:
            start_step (int): The step to start profiling. The default is step 7.
            num_steps (int): The number of steps to profile. The default is for 1 step.
            start_unix_time (int): The Unix time to start profiling. The default is for 1 step.
            duration (float): The duration in seconds to profile.
            profile_default_steps (bool): Indicates whether the default config should be used.

        """
        ...
    


class PythonProfilingConfig(MetricsConfigBase):
    """The configuration for framework metrics to be collected for Python profiling."""
    def __init__(self, start_step=..., num_steps=..., start_unix_time=..., duration=..., profile_default_steps=..., python_profiler=..., cprofile_timer=...) -> None:
        """Choose a Python profiler: cProfile or Pyinstrument.

        Specify target steps or a target duration to profile.
        If no parameter is specified,
        it profiles based on profiling configurations
        preset by the **profile_default_steps** parameter,
        which is set to `True` by default.
        If you specify the following parameters,
        then the **profile_default_steps** parameter
        will be ignored.

        Args:
            start_step (int): The step to start profiling. The default is step 9.
            num_steps (int): The number of steps to profile. The default is for 3 steps.
            start_unix_time (int): The Unix time to start profiling.
            duration (float): The duration in seconds to profile.
            profile_default_steps (bool): Indicates whether the default configuration
                should be used. If set to `True`, Python profiling will be done
                at step 9, 10, and 11 of training, using cProfiler
                and collecting metrics based on the total time, cpu time,
                and off cpu time for these three steps respectively.
                The default is ``True``.
            python_profiler (PythonProfiler): The Python profiler to use to collect
                python profiling stats. Available options are ``"cProfile"``
                and ``"Pyinstrument"``. The default is ``"cProfile"``.
                Instead of passing the string values, you can also use the enumerator util,
                :class:`~sagemaker.debugger.utils.PythonProfiler`,
                to choose one of the available options.
            cprofile_timer (cProfileTimer): The timer to be used by cProfile when collecting
                python profiling stats. Available options are ``"total_time"``, ``"cpu_time"``,
                and ``"off_cpu_time"``. The default is ``"total_time"``.
                If you choose Pyinstrument, this parameter is ignored.
                Instead of passing the string values, you can also use the enumerator util,
                :class:`~sagemaker.debugger.utils.cProfileTimer`,
                to choose one of the available options.

        """
        ...
    


class HorovodProfilingConfig(MetricsConfigBase):
    """The configuration for framework metrics from Horovod distributed training."""
    def __init__(self, start_step=..., num_steps=..., start_unix_time=..., duration=..., profile_default_steps=...) -> None:
        """Specify target steps or a target duration to profile.

        By default, it profiles step 13 of training.
        If **profile_default_steps** is set to `True` and none of the other range
        parameters is specified,
        the class uses the default config for horovod profiling.

        Args:
            start_step (int): The step to start profiling. The default is step 13.
            num_steps (int): The number of steps to profile. The default is for 1 steps.
            start_unix_time (int): The Unix time to start profiling.
            duration (float): The duration in seconds to profile.
            profile_default_steps (bool): Indicates whether the default config should be used.

        """
        ...
    


class SMDataParallelProfilingConfig(MetricsConfigBase):
    """Configuration for framework metrics collected from a SageMaker Distributed training job."""
    def __init__(self, start_step=..., num_steps=..., start_unix_time=..., duration=..., profile_default_steps=...) -> None:
        """Specify target steps or a target duration to profile.

        By default, it profiles step 15 of training.
        If **profile_default_steps** is set to `True` and none of the other
        range parameters is specified,
        the class uses the default configuration for SageMaker Distributed profiling.

        Args:
            start_step (int): The step to start profiling. The default is step 15.
            num_steps (int): The number of steps to profile. The default is for 1 steps.
            start_unix_time (int): The Unix time to start profiling.
            duration (float): The duration in seconds to profile.
            profile_default_steps (bool): Indicates whether the default configuration
                should be used.

        """
        ...
    


