"""
This type stub file was generated by pyright.
"""

from typing import Union
from sagemaker.workflow.entities import PipelineVariable

"""
This type stub file was generated by pyright.
"""
class ParameterRange:
    """Base class for representing parameter ranges.

    This is used to define what hyperparameters to tune for an Amazon SageMaker
    hyperparameter tuning job and to verify hyperparameters for Marketplace Algorithms.
    """
    __all_types__ = ...
    def __init__(self, min_value: Union[int, float, PipelineVariable], max_value: Union[int, float, PipelineVariable], scaling_type: Union[str, PipelineVariable] = ...) -> None:
        """Initialize a parameter range.

        Args:
            min_value (float or int or PipelineVariable): The minimum value for the range.
            max_value (float or int or PipelineVariable): The maximum value for the range.
            scaling_type (str or PipelineVariable): The scale used for searching the range during
                tuning (default: 'Auto'). Valid values: 'Auto', 'Linear',
                'Logarithmic' and 'ReverseLogarithmic'.
        """
        ...
    
    def is_valid(self, value):
        """Determine if a value is valid within this ParameterRange.

        Args:
            value (float or int): The value to be verified.

        Returns:
            bool: True if valid, False otherwise.
        """
        ...
    
    @classmethod
    def cast_to_type(cls, value):
        """Placeholder docstring"""
        ...
    
    def as_tuning_range(self, name):
        """Represent the parameter range as a dictionary.

        It is suitable for a request to create an Amazon SageMaker hyperparameter tuning job.

        Args:
            name (str): The name of the hyperparameter.

        Returns:
            dict[str, str]: A dictionary that contains the name and values of
            the hyperparameter.
        """
        ...
    


class ContinuousParameter(ParameterRange):
    """A class for representing hyperparameters that have a continuous range of possible values.

    Args:
            min_value (float): The minimum value for the range.
            max_value (float): The maximum value for the range.
    """
    __name__ = ...
    @classmethod
    def cast_to_type(cls, value):
        """Placeholder docstring"""
        ...
    


class CategoricalParameter(ParameterRange):
    """A class for representing hyperparameters that have a discrete list of possible values."""
    __name__ = ...
    def __init__(self, values) -> None:
        """Initialize a ``CategoricalParameter``.

        Args:
            values (list or object): The possible values for the hyperparameter.
                This input will be converted into a list of strings.
        """
        ...
    
    def as_tuning_range(self, name):
        """Represent the parameter range as a dictionary.

        It is suitable for a request to create an Amazon SageMaker hyperparameter tuning job.

        Args:
            name (str): The name of the hyperparameter.

        Returns:
            dict[str, list[str]]: A dictionary that contains the name and values
            of the hyperparameter.
        """
        ...
    
    def as_json_range(self, name):
        """Represent the parameter range as a dictionary.

        Dictionary is suitable for a request to create an Amazon SageMaker hyperparameter tuning job
        using one of the deep learning frameworks.

        The deep learning framework images require that hyperparameters be
        serialized as JSON.

        Args:
            name (str): The name of the hyperparameter.

        Returns:
            dict[str, list[str]]: A dictionary that contains the name and values of the
            hyperparameter, where the values are serialized as JSON.
        """
        ...
    
    def is_valid(self, value):
        """Placeholder docstring"""
        ...
    
    @classmethod
    def cast_to_type(cls, value):
        """Placeholder docstring"""
        ...
    


class IntegerParameter(ParameterRange):
    """A class for representing hyperparameters that have an integer range of possible values.

    Args:
        min_value (int): The minimum value for the range.
        max_value (int): The maximum value for the range.
    """
    __name__ = ...
    @classmethod
    def cast_to_type(cls, value):
        """Placeholder docstring"""
        ...
    


