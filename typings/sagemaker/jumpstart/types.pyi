"""
This type stub file was generated by pyright.
"""

from enum import Enum
from typing import Any, Dict, List, Optional, Set, Union
from sagemaker.model_metrics import ModelMetrics
from sagemaker.metadata_properties import MetadataProperties
from sagemaker.drift_check_baselines import DriftCheckBaselines
from sagemaker.session import Session
from sagemaker.workflow.entities import PipelineVariable

"""
This type stub file was generated by pyright.
"""
class JumpStartDataHolderType:
    """Base class for many JumpStart types.

    Allows objects to be added to dicts and sets,
    and improves string representation. This class overrides the ``__eq__``
    and ``__hash__`` methods so that different objects with the same attributes/types
    can be compared.
    """
    __slots__: List[str] = ...
    _non_serializable_slots: List[str] = ...
    def __eq__(self, other: Any) -> bool:
        """Returns True if ``other`` is of the same type and has all attributes equal.

        Args:
            other (Any): Other object to which to compare this object.
        """
        ...
    
    def __hash__(self) -> int:
        """Makes hash of object.

        Maps object to unique tuple, which then gets hashed.
        """
        ...
    
    def __str__(self) -> str:
        """Returns string representation of object. Example:

        "JumpStartLaunchedRegionInfo:
        {'content_bucket': 'bucket', 'region_name': 'us-west-2'}"
        """
        ...
    
    def __repr__(self) -> str:
        """Returns ``__repr__`` string of object. Example:

        "JumpStartLaunchedRegionInfo at 0x7f664529efa0:
        {'content_bucket': 'bucket', 'region_name': 'us-west-2'}"
        """
        ...
    


class JumpStartS3FileType(str, Enum):
    """Type of files published in JumpStart S3 distribution buckets."""
    MANIFEST = ...
    SPECS = ...


class JumpStartLaunchedRegionInfo(JumpStartDataHolderType):
    """Data class for launched region info."""
    __slots__ = ...
    def __init__(self, content_bucket: str, region_name: str, gated_content_bucket: Optional[str] = ...) -> None:
        """Instantiates JumpStartLaunchedRegionInfo object.

        Args:
            content_bucket (str): Name of JumpStart s3 content bucket associated with region.
            region_name (str): Name of JumpStart launched region.
            gated_content_bucket (Optional[str[]): Name of JumpStart gated s3 content bucket
                optionally associated with region.
        """
        ...
    


class JumpStartModelHeader(JumpStartDataHolderType):
    """Data class JumpStart model header."""
    __slots__ = ...
    def __init__(self, header: Dict[str, str]) -> None:
        """Initializes a JumpStartModelHeader object from its json representation.

        Args:
            header (Dict[str, str]): Dictionary representation of header.
        """
        ...
    
    def to_json(self) -> Dict[str, str]:
        """Returns json representation of JumpStartModelHeader object."""
        ...
    
    def from_json(self, json_obj: Dict[str, str]) -> None:
        """Sets fields in object based on json of header.

        Args:
            json_obj (Dict[str, str]): Dictionary representation of header.
        """
        ...
    


class JumpStartECRSpecs(JumpStartDataHolderType):
    """Data class for JumpStart ECR specs."""
    __slots__ = ...
    def __init__(self, spec: Dict[str, Any]) -> None:
        """Initializes a JumpStartECRSpecs object from its json representation.

        Args:
            spec (Dict[str, Any]): Dictionary representation of spec.
        """
        ...
    
    def from_json(self, json_obj: Dict[str, Any]) -> None:
        """Sets fields in object based on json.

        Args:
            json_obj (Dict[str, Any]): Dictionary representation of spec.
        """
        ...
    
    def to_json(self) -> Dict[str, Any]:
        """Returns json representation of JumpStartECRSpecs object."""
        ...
    


class JumpStartHyperparameter(JumpStartDataHolderType):
    """Data class for JumpStart hyperparameter definition in the training container."""
    __slots__ = ...
    def __init__(self, spec: Dict[str, Any]) -> None:
        """Initializes a JumpStartHyperparameter object from its json representation.

        Args:
            spec (Dict[str, Any]): Dictionary representation of hyperparameter.
        """
        ...
    
    def from_json(self, json_obj: Dict[str, Any]) -> None:
        """Sets fields in object based on json.

        Args:
            json_obj (Dict[str, Any]): Dictionary representation of hyperparameter.
        """
        ...
    
    def to_json(self) -> Dict[str, Any]:
        """Returns json representation of JumpStartHyperparameter object."""
        ...
    


class JumpStartEnvironmentVariable(JumpStartDataHolderType):
    """Data class for JumpStart environment variable definitions in the hosting container."""
    __slots__ = ...
    def __init__(self, spec: Dict[str, Any]) -> None:
        """Initializes a JumpStartEnvironmentVariable object from its json representation.

        Args:
            spec (Dict[str, Any]): Dictionary representation of environment variable.
        """
        ...
    
    def from_json(self, json_obj: Dict[str, Any]) -> None:
        """Sets fields in object based on json.

        Args:
            json_obj (Dict[str, Any]): Dictionary representation of environment variable.
        """
        ...
    
    def to_json(self) -> Dict[str, Any]:
        """Returns json representation of JumpStartEnvironmentVariable object."""
        ...
    


class JumpStartPredictorSpecs(JumpStartDataHolderType):
    """Data class for JumpStart Predictor specs."""
    __slots__ = ...
    def __init__(self, spec: Optional[Dict[str, Any]]) -> None:
        """Initializes a JumpStartPredictorSpecs object from its json representation.

        Args:
            spec (Dict[str, Any]): Dictionary representation of predictor specs.
        """
        ...
    
    def from_json(self, json_obj: Optional[Dict[str, Any]]) -> None:
        """Sets fields in object based on json.

        Args:
            json_obj (Dict[str, Any]): Dictionary representation of predictor specs.
        """
        ...
    
    def to_json(self) -> Dict[str, Any]:
        """Returns json representation of JumpStartPredictorSpecs object."""
        ...
    


class JumpStartSerializablePayload(JumpStartDataHolderType):
    """Data class for JumpStart serialized payload specs."""
    __slots__ = ...
    _non_serializable_slots = ...
    def __init__(self, spec: Optional[Dict[str, Any]]) -> None:
        """Initializes a JumpStartSerializablePayload object from its json representation.

        Args:
            spec (Dict[str, Any]): Dictionary representation of payload specs.
        """
        ...
    
    def from_json(self, json_obj: Optional[Dict[str, Any]]) -> None:
        """Sets fields in object based on json.

        Args:
            json_obj (Dict[str, Any]): Dictionary representation of serializable
                payload specs.

        Raises:
            KeyError: If the dictionary is missing keys.
        """
        ...
    
    def to_json(self) -> Dict[str, Any]:
        """Returns json representation of JumpStartSerializablePayload object."""
        ...
    


class JumpStartInstanceTypeVariants(JumpStartDataHolderType):
    """Data class for JumpStart instance type variants."""
    __slots__ = ...
    def __init__(self, spec: Optional[Dict[str, Any]]) -> None:
        """Initializes a JumpStartInstanceTypeVariants object from its json representation.

        Args:
            spec (Dict[str, Any]): Dictionary representation of instance type variants.
        """
        ...
    
    def from_json(self, json_obj: Optional[Dict[str, Any]]) -> None:
        """Sets fields in object based on json.

        Args:
            json_obj (Dict[str, Any]): Dictionary representation of instance type variants.
        """
        ...
    
    def to_json(self) -> Dict[str, Any]:
        """Returns json representation of JumpStartInstanceTypeVariants object."""
        ...
    
    def get_instance_specific_metric_definitions(self, instance_type: str) -> List[JumpStartHyperparameter]:
        """Returns instance specific metric definitions.

        Returns empty list if a model, instance type tuple does not have specific
        metric definitions.
        """
        ...
    
    def get_instance_specific_prepacked_artifact_key(self, instance_type: str) -> Optional[str]:
        """Returns instance specific model artifact key.

        Returns None if a model, instance type tuple does not have specific
        artifact key.
        """
        ...
    
    def get_instance_specific_artifact_key(self, instance_type: str) -> Optional[str]:
        """Returns instance specific model artifact key.

        Returns None if a model, instance type tuple does not have specific
        artifact key.
        """
        ...
    
    def get_instance_specific_hyperparameters(self, instance_type: str) -> List[JumpStartHyperparameter]:
        """Returns instance specific hyperparameters.

        Returns empty list if a model, instance type tuple does not have specific
        hyperparameters.
        """
        ...
    
    def get_instance_specific_environment_variables(self, instance_type: str) -> Dict[str, str]:
        """Returns instance specific environment variables.

        Returns empty dict if a model, instance type tuple does not have specific
        environment variables.
        """
        ...
    
    def get_instance_specific_default_inference_instance_type(self, instance_type: str) -> Optional[str]:
        """Returns instance specific default inference instance type.

        Returns None if a model, instance type tuple does not have instance
        specific inference instance types.
        """
        ...
    
    def get_instance_specific_supported_inference_instance_types(self, instance_type: str) -> List[str]:
        """Returns instance specific supported inference instance types.

        Returns empty list if a model, instance type tuple does not have instance
        specific inference instance types.
        """
        ...
    
    def get_image_uri(self, instance_type: str, region: str) -> Optional[str]:
        """Returns image uri from instance type and region.

        Returns None if no instance type is available or found.
        None is also returned if the metadata is improperly formatted.
        """
        ...
    
    def get_model_package_arn(self, instance_type: str, region: str) -> Optional[str]:
        """Returns model package arn from instance type and region.

        Returns None if no instance type is available or found.
        None is also returned if the metadata is improperly formatted.
        """
        ...
    


class JumpStartModelSpecs(JumpStartDataHolderType):
    """Data class JumpStart model specs."""
    __slots__ = ...
    def __init__(self, spec: Dict[str, Any]) -> None:
        """Initializes a JumpStartModelSpecs object from its json representation.

        Args:
            spec (Dict[str, Any]): Dictionary representation of spec.
        """
        ...
    
    def from_json(self, json_obj: Dict[str, Any]) -> None:
        """Sets fields in object based on json of header.

        Args:
            json_obj (Dict[str, Any]): Dictionary representation of spec.
        """
        ...
    
    def to_json(self) -> Dict[str, Any]:
        """Returns json representation of JumpStartModelSpecs object."""
        ...
    
    def supports_prepacked_inference(self) -> bool:
        """Returns True if the model has a prepacked inference artifact."""
        ...
    
    def use_inference_script_uri(self) -> bool:
        """Returns True if the model should use a script uri when deploying inference model."""
        ...
    
    def use_training_model_artifact(self) -> bool:
        """Returns True if the model should use a model uri when kicking off training job."""
        ...
    
    def supports_incremental_training(self) -> bool:
        """Returns True if the model supports incremental training."""
        ...
    


class JumpStartVersionedModelId(JumpStartDataHolderType):
    """Data class for versioned model IDs."""
    __slots__ = ...
    def __init__(self, model_id: str, version: str) -> None:
        """Instantiates JumpStartVersionedModelId object.

        Args:
            model_id (str): JumpStart model ID.
            version (str): JumpStart model version.
        """
        ...
    


class JumpStartCachedS3ContentKey(JumpStartDataHolderType):
    """Data class for the s3 cached content keys."""
    __slots__ = ...
    def __init__(self, file_type: JumpStartS3FileType, s3_key: str) -> None:
        """Instantiates JumpStartCachedS3ContentKey object.

        Args:
            file_type (JumpStartS3FileType): JumpStart file type.
            s3_key (str): object key in s3.
        """
        ...
    


class JumpStartCachedS3ContentValue(JumpStartDataHolderType):
    """Data class for the s3 cached content values."""
    __slots__ = ...
    def __init__(self, formatted_content: Union[Dict[JumpStartVersionedModelId, JumpStartModelHeader], JumpStartModelSpecs,], md5_hash: Optional[str] = ...) -> None:
        """Instantiates JumpStartCachedS3ContentValue object.

        Args:
            formatted_content (Union[Dict[JumpStartVersionedModelId, JumpStartModelHeader],
            JumpStartModelSpecs]):
                Formatted content for model specs and mappings from
                versioned model IDs to specs.
            md5_hash (str): md5_hash for stored file content from s3.
        """
        ...
    


class JumpStartKwargs(JumpStartDataHolderType):
    """Data class for JumpStart object kwargs."""
    SERIALIZATION_EXCLUSION_SET: Set[str] = ...
    def to_kwargs_dict(self):
        """Serializes object to dictionary to be used for kwargs for method arguments."""
        ...
    


class JumpStartModelInitKwargs(JumpStartKwargs):
    """Data class for the inputs to `JumpStartModel.__init__` method."""
    __slots__ = ...
    SERIALIZATION_EXCLUSION_SET = ...
    def __init__(self, model_id: str, model_version: Optional[str] = ..., region: Optional[str] = ..., instance_type: Optional[str] = ..., image_uri: Optional[Union[str, Any]] = ..., model_data: Optional[Union[str, Any, dict]] = ..., role: Optional[str] = ..., predictor_cls: Optional[callable] = ..., env: Optional[Dict[str, Union[str, Any]]] = ..., name: Optional[str] = ..., vpc_config: Optional[Dict[str, List[Union[str, Any]]]] = ..., sagemaker_session: Optional[Any] = ..., enable_network_isolation: Union[bool, Any] = ..., model_kms_key: Optional[str] = ..., image_config: Optional[Dict[str, Union[str, Any]]] = ..., source_dir: Optional[str] = ..., code_location: Optional[str] = ..., entry_point: Optional[str] = ..., container_log_level: Optional[Union[int, Any]] = ..., dependencies: Optional[List[str]] = ..., git_config: Optional[Dict[str, str]] = ..., tolerate_vulnerable_model: Optional[bool] = ..., tolerate_deprecated_model: Optional[bool] = ..., model_package_arn: Optional[str] = ..., training_instance_type: Optional[str] = ...) -> None:
        """Instantiates JumpStartModelInitKwargs object."""
        ...
    


class JumpStartModelDeployKwargs(JumpStartKwargs):
    """Data class for the inputs to `JumpStartModel.deploy` method."""
    __slots__ = ...
    SERIALIZATION_EXCLUSION_SET = ...
    def __init__(self, model_id: str, model_version: Optional[str] = ..., region: Optional[str] = ..., initial_instance_count: Optional[int] = ..., instance_type: Optional[str] = ..., serializer: Optional[Any] = ..., deserializer: Optional[Any] = ..., accelerator_type: Optional[str] = ..., endpoint_name: Optional[str] = ..., tags: List[Dict[str, str]] = ..., kms_key: Optional[str] = ..., wait: Optional[bool] = ..., data_capture_config: Optional[Any] = ..., async_inference_config: Optional[Any] = ..., serverless_inference_config: Optional[Any] = ..., volume_size: Optional[int] = ..., model_data_download_timeout: Optional[int] = ..., container_startup_health_check_timeout: Optional[int] = ..., inference_recommendation_id: Optional[str] = ..., explainer_config: Optional[Any] = ..., tolerate_deprecated_model: Optional[bool] = ..., tolerate_vulnerable_model: Optional[bool] = ..., sagemaker_session: Optional[Session] = ..., training_instance_type: Optional[str] = ...) -> None:
        """Instantiates JumpStartModelDeployKwargs object."""
        ...
    


class JumpStartEstimatorInitKwargs(JumpStartKwargs):
    """Data class for the inputs to `JumpStartEstimator.__init__` method."""
    __slots__ = ...
    SERIALIZATION_EXCLUSION_SET = ...
    def __init__(self, model_id: str, model_version: Optional[str] = ..., region: Optional[str] = ..., image_uri: Optional[Union[str, Any]] = ..., role: Optional[str] = ..., instance_count: Optional[Union[int, Any]] = ..., instance_type: Optional[Union[str, Any]] = ..., keep_alive_period_in_seconds: Optional[Union[int, Any]] = ..., volume_size: Optional[Union[int, Any]] = ..., volume_kms_key: Optional[Union[str, Any]] = ..., max_run: Optional[Union[int, Any]] = ..., input_mode: Optional[Union[str, Any]] = ..., output_path: Optional[Union[str, Any]] = ..., output_kms_key: Optional[Union[str, Any]] = ..., base_job_name: Optional[str] = ..., sagemaker_session: Optional[Any] = ..., hyperparameters: Optional[Dict[str, Union[str, Any]]] = ..., tags: Optional[List[Dict[str, Union[str, Any]]]] = ..., subnets: Optional[List[Union[str, Any]]] = ..., security_group_ids: Optional[List[Union[str, Any]]] = ..., model_uri: Optional[str] = ..., model_channel_name: Optional[Union[str, Any]] = ..., metric_definitions: Optional[List[Dict[str, Union[str, Any]]]] = ..., encrypt_inter_container_traffic: Union[bool, Any] = ..., use_spot_instances: Optional[Union[bool, Any]] = ..., max_wait: Optional[Union[int, Any]] = ..., checkpoint_s3_uri: Optional[Union[str, Any]] = ..., checkpoint_local_path: Optional[Union[str, Any]] = ..., enable_network_isolation: Union[bool, Any] = ..., rules: Optional[List[Any]] = ..., debugger_hook_config: Optional[Union[Any, bool]] = ..., tensorboard_output_config: Optional[Any] = ..., enable_sagemaker_metrics: Optional[Union[bool, Any]] = ..., profiler_config: Optional[Any] = ..., disable_profiler: Optional[bool] = ..., environment: Optional[Dict[str, Union[str, Any]]] = ..., max_retry_attempts: Optional[Union[int, Any]] = ..., source_dir: Optional[Union[str, Any]] = ..., git_config: Optional[Dict[str, str]] = ..., container_log_level: Optional[Union[int, Any]] = ..., code_location: Optional[str] = ..., entry_point: Optional[Union[str, Any]] = ..., dependencies: Optional[List[str]] = ..., instance_groups: Optional[List[Any]] = ..., training_repository_access_mode: Optional[Union[str, Any]] = ..., training_repository_credentials_provider_arn: Optional[Union[str, Any]] = ..., tolerate_vulnerable_model: Optional[bool] = ..., tolerate_deprecated_model: Optional[bool] = ..., container_entry_point: Optional[List[str]] = ..., container_arguments: Optional[List[str]] = ..., disable_output_compression: Optional[bool] = ..., enable_infra_check: Optional[Union[bool, PipelineVariable]] = ...) -> None:
        """Instantiates JumpStartEstimatorInitKwargs object."""
        ...
    


class JumpStartEstimatorFitKwargs(JumpStartKwargs):
    """Data class for the inputs to `JumpStartEstimator.fit` method."""
    __slots__ = ...
    SERIALIZATION_EXCLUSION_SET = ...
    def __init__(self, model_id: str, model_version: Optional[str] = ..., region: Optional[str] = ..., inputs: Optional[Union[str, Dict, Any, Any]] = ..., wait: Optional[bool] = ..., logs: Optional[str] = ..., job_name: Optional[str] = ..., experiment_config: Optional[Dict[str, str]] = ..., tolerate_deprecated_model: Optional[bool] = ..., tolerate_vulnerable_model: Optional[bool] = ..., sagemaker_session: Optional[Session] = ...) -> None:
        """Instantiates JumpStartEstimatorInitKwargs object."""
        ...
    


class JumpStartEstimatorDeployKwargs(JumpStartKwargs):
    """Data class for the inputs to `JumpStartEstimator.deploy` method."""
    __slots__ = ...
    SERIALIZATION_EXCLUSION_SET = ...
    def __init__(self, model_id: str, model_version: Optional[str] = ..., region: Optional[str] = ..., initial_instance_count: Optional[int] = ..., instance_type: Optional[str] = ..., serializer: Optional[Any] = ..., deserializer: Optional[Any] = ..., accelerator_type: Optional[str] = ..., endpoint_name: Optional[str] = ..., tags: List[Dict[str, str]] = ..., kms_key: Optional[str] = ..., wait: Optional[bool] = ..., data_capture_config: Optional[Any] = ..., async_inference_config: Optional[Any] = ..., serverless_inference_config: Optional[Any] = ..., volume_size: Optional[int] = ..., model_data_download_timeout: Optional[int] = ..., container_startup_health_check_timeout: Optional[int] = ..., inference_recommendation_id: Optional[str] = ..., explainer_config: Optional[Any] = ..., image_uri: Optional[Union[str, Any]] = ..., role: Optional[str] = ..., predictor_cls: Optional[callable] = ..., env: Optional[Dict[str, Union[str, Any]]] = ..., model_name: Optional[str] = ..., vpc_config: Optional[Dict[str, List[Union[str, Any]]]] = ..., sagemaker_session: Optional[Any] = ..., enable_network_isolation: Union[bool, Any] = ..., model_kms_key: Optional[str] = ..., image_config: Optional[Dict[str, Union[str, Any]]] = ..., source_dir: Optional[str] = ..., code_location: Optional[str] = ..., entry_point: Optional[str] = ..., container_log_level: Optional[Union[int, Any]] = ..., dependencies: Optional[List[str]] = ..., git_config: Optional[Dict[str, str]] = ..., tolerate_deprecated_model: Optional[bool] = ..., tolerate_vulnerable_model: Optional[bool] = ..., use_compiled_model: bool = ...) -> None:
        """Instantiates JumpStartEstimatorInitKwargs object."""
        ...
    


class JumpStartModelRegisterKwargs(JumpStartKwargs):
    """Data class for the inputs to `JumpStartEstimator.deploy` method."""
    __slots__ = ...
    SERIALIZATION_EXCLUSION_SET = ...
    def __init__(self, model_id: str, model_version: Optional[str] = ..., region: Optional[str] = ..., tolerate_deprecated_model: Optional[bool] = ..., tolerate_vulnerable_model: Optional[bool] = ..., sagemaker_session: Optional[Any] = ..., content_types: List[str] = ..., response_types: List[str] = ..., inference_instances: Optional[List[str]] = ..., transform_instances: Optional[List[str]] = ..., model_package_group_name: Optional[str] = ..., image_uri: Optional[str] = ..., model_metrics: Optional[ModelMetrics] = ..., metadata_properties: Optional[MetadataProperties] = ..., approval_status: Optional[str] = ..., description: Optional[str] = ..., drift_check_baselines: Optional[DriftCheckBaselines] = ..., customer_metadata_properties: Optional[Dict[str, str]] = ..., validation_specification: Optional[str] = ..., domain: Optional[str] = ..., task: Optional[str] = ..., sample_payload_url: Optional[str] = ..., framework: Optional[str] = ..., framework_version: Optional[str] = ..., nearest_model_name: Optional[str] = ..., data_input_configuration: Optional[str] = ..., skip_model_validation: Optional[str] = ...) -> None:
        """Instantiates JumpStartModelRegisterKwargs object."""
        ...
    


