"""
This type stub file was generated by pyright.
"""

from typing import List, Optional
from sagemaker.jumpstart.constants import JumpStartScriptScope

"""This module stores exceptions related to SageMaker JumpStart."""
NO_AVAILABLE_INSTANCES_ERROR_MSG = ...
INVALID_MODEL_ID_ERROR_MSG = ...
class JumpStartHyperparametersError(ValueError):
    """Exception raised for bad hyperparameters of a JumpStart model."""
    def __init__(self, message: Optional[str] = ...) -> None:
        ...
    


class VulnerableJumpStartModelError(ValueError):
    """Exception raised when trying to access a JumpStart model specs flagged as vulnerable.

    Raise this exception only if the scope of attributes accessed in the specifications have
    vulnerabilities. For example, a model training script may have vulnerabilities, but not
    the hosting scripts. In such a case, raise a ``VulnerableJumpStartModelError`` only when
    accessing the training specifications.
    """
    def __init__(self, model_id: Optional[str] = ..., version: Optional[str] = ..., vulnerabilities: Optional[List[str]] = ..., scope: Optional[JumpStartScriptScope] = ..., message: Optional[str] = ...) -> None:
        """Instantiates VulnerableJumpStartModelError exception.

        Args:
            model_id (Optional[str]): model ID of vulnerable JumpStart model.
                (Default: None).
            version (Optional[str]): version of vulnerable JumpStart model.
                (Default: None).
            vulnerabilities (Optional[List[str]]): vulnerabilities associated with
                model. (Default: None).

        """
        ...
    


class DeprecatedJumpStartModelError(ValueError):
    """Exception raised when trying to access a JumpStart model deprecated specifications.

    A deprecated specification for a JumpStart model does not mean the whole model is
    deprecated. There may be more recent specifications available for this model. For
    example, all specification before version ``2.0.0`` may be deprecated, in such a
    case, the SDK would raise this exception only when specifications ``1.*`` are
    accessed.
    """
    def __init__(self, model_id: Optional[str] = ..., version: Optional[str] = ..., message: Optional[str] = ...) -> None:
        ...
    


