"""
This type stub file was generated by pyright.
"""

import functools
import boto3
from typing import Any, Dict, List, Optional
from sagemaker.deprecations import deprecated
from sagemaker.jumpstart.types import JumpStartModelHeader, JumpStartModelSpecs
from sagemaker.jumpstart import cache

"""This module contains accessors related to SageMaker JumpStart."""
class SageMakerSettings:
    """Static class for storing the SageMaker settings."""
    _parsed_sagemaker_version = ...
    @staticmethod
    def set_sagemaker_version(version: str) -> None:
        """Set SageMaker version."""
        ...
    
    @staticmethod
    def get_sagemaker_version() -> str:
        """Return SageMaker version."""
        ...
    


class JumpStartS3PayloadAccessor:
    """Static class for storing and retrieving S3 payload artifacts."""
    MAX_CACHE_SIZE_BYTES = ...
    MAX_PAYLOAD_SIZE_BYTES = ...
    CACHE_SIZE = ...
    @staticmethod
    def clear_cache() -> None:
        """Clears LRU caches associated with S3 client and retrieved objects."""
        ...
    
    @staticmethod
    @functools.lru_cache(maxsize=CACHE_SIZE)
    def get_object_cached(bucket: str, key: str, region: str = ..., s3_client: Optional[boto3.client] = ...) -> bytes:
        """Returns S3 object located at the bucket and key.

        Requests are cached so that the same S3 request is never made more
        than once, unless a different region or client is used.
        """
        ...
    
    @staticmethod
    def get_object(bucket: str, key: str, region: str = ..., s3_client: Optional[boto3.client] = ...) -> bytes:
        """Returns S3 object located at the bucket and key.

        Raises:
            ValueError: The object size is too large.
        """
        ...
    


class JumpStartModelsAccessor:
    """Static class for storing the JumpStart models cache."""
    _cache: Optional[cache.JumpStartModelsCache] = ...
    _curr_region = ...
    _content_bucket: Optional[str] = ...
    _gated_content_bucket: Optional[str] = ...
    _cache_kwargs: Dict[str, Any] = ...
    @staticmethod
    def set_jumpstart_content_bucket(content_bucket: str) -> None:
        """Sets JumpStart content bucket."""
        ...
    
    @staticmethod
    def get_jumpstart_content_bucket() -> Optional[str]:
        """Returns JumpStart content bucket."""
        ...
    
    @staticmethod
    def set_jumpstart_gated_content_bucket(gated_content_bucket: str) -> None:
        """Sets JumpStart gated content bucket."""
        ...
    
    @staticmethod
    def get_jumpstart_gated_content_bucket() -> Optional[str]:
        """Returns JumpStart gated content bucket."""
        ...
    
    @staticmethod
    def get_model_header(region: str, model_id: str, version: str) -> JumpStartModelHeader:
        """Returns model header from JumpStart models cache.

        Args:
            region (str): region for which to retrieve header.
            model_id (str): model ID to retrieve.
            version (str): semantic version to retrieve for the model ID.
        """
        ...
    
    @staticmethod
    def get_model_specs(region: str, model_id: str, version: str, s3_client: Optional[boto3.client] = ...) -> JumpStartModelSpecs:
        """Returns model specs from JumpStart models cache.

        Args:
            region (str): region for which to retrieve header.
            model_id (str): model ID to retrieve.
            version (str): semantic version to retrieve for the model ID.
            s3_client (boto3.client): boto3 client to use for accessing JumpStart models s3 cache.
                If not set, a default client will be made.
        """
        ...
    
    @staticmethod
    def set_cache_kwargs(cache_kwargs: Dict[str, Any], region: str = ...) -> None:
        """Sets cache kwargs, clears the cache.

        Raises:
            ValueError: If region in `cache_kwargs` is inconsistent with `region` argument.

        Args:
            cache_kwargs (str): cache kwargs to validate.
            region (str): Optional. The region to validate along with the kwargs.
        """
        ...
    
    @staticmethod
    def reset_cache(cache_kwargs: Dict[str, Any] = ..., region: Optional[str] = ...) -> None:
        """Resets cache, optionally allowing cache kwargs to be passed to the new cache.

        Raises:
            ValueError: If region in `cache_kwargs` is inconsistent with `region` argument.

        Args:
            cache_kwargs (str): cache kwargs to validate.
            region (str): The region to validate along with the kwargs.
        """
        ...
    
    @staticmethod
    @deprecated()
    def get_manifest(cache_kwargs: Optional[Dict[str, Any]] = ..., region: Optional[str] = ...) -> List[JumpStartModelHeader]:
        """Return entire JumpStart models manifest.

        Raises:
            ValueError: If region in `cache_kwargs` is inconsistent with `region` argument.

        Args:
            cache_kwargs (Dict[str, Any]): Optional. Cache kwargs to use.
                (Default: None).
            region (str): Optional. The region to use for the cache.
                (Default: None).
        """
        ...
    


