"""
This type stub file was generated by pyright.
"""

import boto3
from typing import Optional, Union
from sagemaker.jumpstart.types import JumpStartSerializablePayload

"""This module stores inference payload utilities for JumpStart models."""
S3_BYTES_REGEX = ...
S3_B64_STR_REGEX = ...
class PayloadSerializer:
    """Utility class for serializing payloads associated with JumpStart models.

    Many JumpStart models embed byte-streams into payloads corresponding to images, sounds,
    and other content types which require downloading from S3.
    """
    def __init__(self, bucket: Optional[str] = ..., region: str = ..., s3_client: Optional[boto3.client] = ...) -> None:
        """Initializes PayloadSerializer object."""
        ...
    
    def get_bytes_payload_with_s3_references(self, payload_str: str) -> bytes:
        """Returns bytes object corresponding to referenced S3 object.

        Raises:
            ValueError: If the raw bytes payload is not formatted correctly.
        """
        ...
    
    def embed_s3_references_in_str_payload(self, payload: str) -> str:
        """Inserts serialized S3 content into string payload.

        If no S3 content is embedded in payload, original string is returned.
        """
        ...
    
    def embed_s3_references_in_json_payload(self, payload_body: Union[list, dict, str, int, float]) -> Union[list, dict, str, int, float]:
        """Finds all S3 references in payload and embeds serialized S3 data.

        If no S3 references are found, the payload is returned un-modified.

        Raises:
            ValueError: If the payload has an unrecognized type.
        """
        ...
    
    def serialize(self, payload: JumpStartSerializablePayload) -> Union[str, bytes]:
        """Returns payload string or bytes that can be inputted to inference endpoint.

        Raises:
            ValueError: If the payload has an unrecognized type.
        """
        ...
    


