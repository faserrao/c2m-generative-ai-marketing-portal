"""
This type stub file was generated by pyright.
"""

from typing import Any, Dict, List, Optional, Union
from sagemaker.async_inference.async_inference_config import AsyncInferenceConfig
from sagemaker.base_deserializers import BaseDeserializer
from sagemaker.base_serializers import BaseSerializer
from sagemaker.explainer.explainer_config import ExplainerConfig
from sagemaker.model_metrics import ModelMetrics
from sagemaker.metadata_properties import MetadataProperties
from sagemaker.drift_check_baselines import DriftCheckBaselines
from sagemaker.jumpstart.types import JumpStartModelDeployKwargs, JumpStartModelInitKwargs, JumpStartModelRegisterKwargs
from sagemaker.model_monitor.data_capture_config import DataCaptureConfig
from sagemaker.base_predictor import Predictor
from sagemaker.serverless.serverless_inference_config import ServerlessInferenceConfig
from sagemaker.session import Session
from sagemaker.workflow.entities import PipelineVariable

"""This module stores JumpStart Model factory methods."""
def get_default_predictor(predictor: Predictor, model_id: str, model_version: str, region: str, tolerate_vulnerable_model: bool, tolerate_deprecated_model: bool, sagemaker_session: Session) -> Predictor:
    """Converts predictor returned from ``Model.deploy()`` into a JumpStart-specific one.

    Raises:
        RuntimeError: If a base-class predictor is not used.
    """
    ...

def get_deploy_kwargs(model_id: str, model_version: Optional[str] = ..., region: Optional[str] = ..., initial_instance_count: Optional[int] = ..., instance_type: Optional[str] = ..., serializer: Optional[BaseSerializer] = ..., deserializer: Optional[BaseDeserializer] = ..., accelerator_type: Optional[str] = ..., endpoint_name: Optional[str] = ..., tags: List[Dict[str, str]] = ..., kms_key: Optional[str] = ..., wait: Optional[bool] = ..., data_capture_config: Optional[DataCaptureConfig] = ..., async_inference_config: Optional[AsyncInferenceConfig] = ..., serverless_inference_config: Optional[ServerlessInferenceConfig] = ..., volume_size: Optional[int] = ..., model_data_download_timeout: Optional[int] = ..., container_startup_health_check_timeout: Optional[int] = ..., inference_recommendation_id: Optional[str] = ..., explainer_config: Optional[ExplainerConfig] = ..., tolerate_vulnerable_model: Optional[bool] = ..., tolerate_deprecated_model: Optional[bool] = ..., sagemaker_session: Optional[Session] = ...) -> JumpStartModelDeployKwargs:
    """Returns kwargs required to call `deploy` on `sagemaker.estimator.Model` object."""
    ...

def get_register_kwargs(model_id: str, model_version: Optional[str] = ..., region: Optional[str] = ..., tolerate_deprecated_model: Optional[bool] = ..., tolerate_vulnerable_model: Optional[bool] = ..., sagemaker_session: Optional[Any] = ..., supported_content_types: List[str] = ..., response_types: List[str] = ..., inference_instances: Optional[List[str]] = ..., transform_instances: Optional[List[str]] = ..., model_package_group_name: Optional[str] = ..., image_uri: Optional[str] = ..., model_metrics: Optional[ModelMetrics] = ..., metadata_properties: Optional[MetadataProperties] = ..., approval_status: Optional[str] = ..., description: Optional[str] = ..., drift_check_baselines: Optional[DriftCheckBaselines] = ..., customer_metadata_properties: Optional[Dict[str, str]] = ..., validation_specification: Optional[str] = ..., domain: Optional[str] = ..., task: Optional[str] = ..., sample_payload_url: Optional[str] = ..., framework: Optional[str] = ..., framework_version: Optional[str] = ..., nearest_model_name: Optional[str] = ..., data_input_configuration: Optional[str] = ..., skip_model_validation: Optional[str] = ...) -> JumpStartModelRegisterKwargs:
    """Returns kwargs required to call `register` on `sagemaker.estimator.Model` object."""
    ...

def get_init_kwargs(model_id: str, model_from_estimator: bool = ..., model_version: Optional[str] = ..., tolerate_vulnerable_model: Optional[bool] = ..., tolerate_deprecated_model: Optional[bool] = ..., instance_type: Optional[str] = ..., region: Optional[str] = ..., image_uri: Optional[Union[str, PipelineVariable]] = ..., model_data: Optional[Union[str, PipelineVariable, dict]] = ..., role: Optional[str] = ..., predictor_cls: Optional[callable] = ..., env: Optional[Dict[str, Union[str, PipelineVariable]]] = ..., name: Optional[str] = ..., vpc_config: Optional[Dict[str, List[Union[str, PipelineVariable]]]] = ..., sagemaker_session: Optional[Session] = ..., enable_network_isolation: Union[bool, PipelineVariable] = ..., model_kms_key: Optional[str] = ..., image_config: Optional[Dict[str, Union[str, PipelineVariable]]] = ..., source_dir: Optional[str] = ..., code_location: Optional[str] = ..., entry_point: Optional[str] = ..., container_log_level: Optional[Union[int, PipelineVariable]] = ..., dependencies: Optional[List[str]] = ..., git_config: Optional[Dict[str, str]] = ..., model_package_arn: Optional[str] = ..., training_instance_type: Optional[str] = ...) -> JumpStartModelInitKwargs:
    """Returns kwargs required to instantiate `sagemaker.estimator.Model` object."""
    ...

