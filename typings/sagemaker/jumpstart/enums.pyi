"""
This type stub file was generated by pyright.
"""

from enum import Enum

"""
This type stub file was generated by pyright.
"""
class ModelFramework(str, Enum):
    """Enum class for JumpStart model framework.

    The ML framework as referenced in the prefix of the model ID.
    This value does not necessarily correspond to the container name.
    """
    PYTORCH = ...
    TENSORFLOW = ...
    MXNET = ...
    HUGGINGFACE = ...
    LIGHTGBM = ...
    CATBOOST = ...
    XGBOOST = ...
    SKLEARN = ...


class VariableScope(str, Enum):
    """Possible value of the ``scope`` attribute for a hyperparameter or environment variable.

    Used for hosting environment variables and training hyperparameters.
    """
    CONTAINER = ...
    ALGORITHM = ...


class JumpStartScriptScope(str, Enum):
    """Enum class for JumpStart script scopes."""
    INFERENCE = ...
    TRAINING = ...


class HyperparameterValidationMode(str, Enum):
    """Possible modes for validating hyperparameters."""
    VALIDATE_PROVIDED = ...
    VALIDATE_ALGORITHM = ...
    VALIDATE_ALL = ...


class VariableTypes(str, Enum):
    """Possible types for hyperparameters and environment variables."""
    TEXT = ...
    INT = ...
    FLOAT = ...
    BOOL = ...


class JumpStartTag(str, Enum):
    """Enum class for tag keys to apply to JumpStart models."""
    INFERENCE_MODEL_URI = ...
    INFERENCE_SCRIPT_URI = ...
    TRAINING_MODEL_URI = ...
    TRAINING_SCRIPT_URI = ...
    MODEL_ID = ...
    MODEL_VERSION = ...


class SerializerType(str, Enum):
    """Enum class for serializers associated with JumpStart models."""
    TEXT = ...
    JSON = ...
    CSV = ...
    RAW_BYTES = ...


class DeserializerType(str, Enum):
    """Enum class for deserializers associated with JumpStart models."""
    JSON = ...


class MIMEType(str, Enum):
    """Enum class for MIME types associated with JumpStart models."""
    X_IMAGE = ...
    LIST_TEXT = ...
    X_TEXT = ...
    JSON = ...
    CSV = ...
    WAV = ...
    @staticmethod
    def from_suffixed_type(mime_type_with_suffix: str) -> MIMEType:
        """Removes suffix from type and instantiates enum."""
        ...
    


