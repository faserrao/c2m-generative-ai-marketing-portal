"""
This type stub file was generated by pyright.
"""

from sagemaker.deserializers import SimpleBaseDeserializer
from sagemaker.serializers import SimpleBaseSerializer

"""Placeholder docstring"""
class RecordSerializer(SimpleBaseSerializer):
    """Serialize a NumPy array for an inference request."""
    def __init__(self, content_type=...) -> None:
        """Initialize a ``RecordSerializer`` instance.

        Args:
            content_type (str): The MIME type to signal to the inference endpoint when sending
                request data (default: "application/x-recordio-protobuf").
        """
        ...
    
    def serialize(self, data):
        """Serialize a NumPy array into a buffer containing RecordIO records.

        Args:
            data (numpy.ndarray): The data to serialize.

        Returns:
            io.BytesIO: A buffer containing the data serialized as records.
        """
        ...
    


class RecordDeserializer(SimpleBaseDeserializer):
    """Deserialize RecordIO Protobuf data from an inference endpoint."""
    def __init__(self, accept=...) -> None:
        """Initialize a ``RecordDeserializer`` instance.

        Args:
            accept (union[str, tuple[str]]): The MIME type (or tuple of allowable MIME types) that
                is expected from the inference endpoint (default:
                "application/x-recordio-protobuf").
        """
        ...
    
    def deserialize(self, data, content_type):
        """Deserialize RecordIO Protobuf data from an inference endpoint.

        Args:
            data (object): The protobuf message to deserialize.
            content_type (str): The MIME type of the data.
        Returns:
            list: A list of records.
        """
        ...
    


def write_numpy_to_dense_tensor(file, array, labels=...):
    """Writes a numpy array to a dense tensor

    Args:
        file:
        array:
        labels:
    """
    ...

def write_spmatrix_to_sparse_tensor(file, array, labels=...):
    """Writes a scipy sparse matrix to a sparse tensor

    Args:
        file:
        array:
        labels:
    """
    ...

def read_records(file):
    """Eagerly read a collection of amazon Record protobuf objects from file.

    Args:
        file:
    """
    ...

padding = ...
_kmagic = ...
def read_recordio(f):
    """Placeholder Docstring"""
    ...

numpy_to_record_serializer = ...
record_deserializer = ...
