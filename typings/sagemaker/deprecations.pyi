"""
This type stub file was generated by pyright.
"""

"""
This type stub file was generated by pyright.
"""
logger = ...
V2_URL = ...
def removed_warning(phrase, sdk_version=...):
    """Raise a warning for a no-op in sagemaker>=2

    Args:
        phrase: the prefix phrase of the warning message.
        sdk_version: the sdk version of removal of support.
    """
    ...

def renamed_warning(phrase):
    """Raise a warning for a rename in sagemaker>=2

    Args:
        phrase: the prefix phrase of the warning message.
    """
    ...

def deprecation_warn(name, date, msg=...):
    """Raise a warning for soon to be deprecated feature in sagemaker>=2

    Args:
        name (str): Name of the feature
        date (str): the date when the feature will be deprecated
        msg (str): the prefix phrase of the warning message.
    """
    ...

def deprecation_warn_base(msg):
    """Raise a warning for soon to be deprecated feature in sagemaker>=2

    Args:
        msg (str): the warning message.
    """
    ...

def deprecation_warning(date, msg=...):
    """Decorator for raising deprecation warning for a feature in sagemaker>=2

    Args:
        date (str): the date when the feature will be deprecated
        msg (str): the prefix phrase of the warning message.

    Usage:
        @deprecation_warning(msg="message", date="date")
        def sample_function():
            print("xxxx....")

        @deprecation_warning(msg="message", date="date")
        class SampleClass():
            def __init__(self):
                print("xxxx....")

    """
    ...

def renamed_kwargs(old_name, new_name, value, kwargs):
    """Checks if the deprecated argument is in kwargs

    Raises warning, if present.

    Args:
        old_name: name of deprecated argument
        new_name: name of the new argument
        value: value associated with new name, if supplied
        kwargs: keyword arguments dict

    Returns:
        value of the keyword argument, if present
    """
    ...

def removed_arg(name, arg):
    """Checks if the deprecated argument is populated.

    Raises warning, if not None.

    Args:
        name: name of deprecated argument
        arg: the argument to check
    """
    ...

def removed_kwargs(name, kwargs):
    """Checks if the deprecated argument is in kwargs

    Raises warning, if present.

    Args:
        name: name of deprecated argument
        kwargs: keyword arguments dict
    """
    ...

def removed_function(name):
    """A no-op deprecated function factory."""
    ...

def deprecated(sdk_version=...):
    """Decorator for raising deprecated warning for a feature in sagemaker>=2

    Args:
        sdk_version (str): the sdk version of removal of support.

    Usage:
        @deprecated()
        def sample_function():
            print("xxxx....")

        @deprecated(sdk_version="2.66")
        class SampleClass():
            def __init__(self):
                print("xxxx....")

    """
    ...

def deprecated_function(func, name):
    """Wrap a function with a deprecation warning.

    Args:
        func: Function to wrap in a deprecation warning.
        name: The name that has been deprecated.

    Returns:
        The modified function
    """
    ...

def deprecated_serialize(instance, name):
    """Modifies a serializer instance serialize method.

    Args:
        instance: Instance to modify serialize method.
        name: The name that has been deprecated.

    Returns:
        The modified instance
    """
    ...

def deprecated_deserialize(instance, name):
    """Modifies a deserializer instance deserialize method.

    Args:
        instance: Instance to modify deserialize method.
        name: The name that has been deprecated.

    Returns:
        The modified instance
    """
    ...

def deprecated_class(cls, name):
    """Returns a class based on super class with a deprecation warning.

    Args:
        cls: The class to derive with a deprecation warning on __init__
        name: The name of the class.

    Returns:
        The modified class.
    """
    class DeprecatedClass(cls):
        """Provides a warning for the class name."""
        ...
    
    

