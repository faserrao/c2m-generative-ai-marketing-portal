"""
This type stub file was generated by pyright.
"""

import enum

"""Placeholder docstring"""
logger = ...
_UNUSED_ARN = ...
HEALTH_CHECK_TIMEOUT_LIMIT = ...
class _LocalProcessingJob:
    """Defines and starts a local processing job."""
    _STARTING = ...
    _PROCESSING = ...
    _COMPLETED = ...
    def __init__(self, container) -> None:
        """Creates a local processing job.

        Args:
            container: the local container object.
        """
        ...
    
    def start(self, processing_inputs, processing_output_config, environment, processing_job_name):
        """Starts a local processing job.

        Args:
            processing_inputs: The processing input configuration.
            processing_output_config: The processing input configuration.
            environment: The collection of environment variables passed to the job.
            processing_job_name: The processing job name.
        """
        ...
    
    def describe(self):
        """Describes a local processing job.

        Returns:
            An object describing the processing job.
        """
        ...
    


class _LocalTrainingJob:
    """Defines and starts a local training job."""
    _STARTING = ...
    _TRAINING = ...
    _COMPLETED = ...
    _states = ...
    def __init__(self, container) -> None:
        """Creates a local training job.

        Args:
            container: the local container object.
        """
        ...
    
    def start(self, input_data_config, output_data_config, hyperparameters, environment, job_name):
        """Starts a local training job.

        Args:
            input_data_config (dict): The Input Data Configuration, this contains data such as the
                channels to be used for training.
            output_data_config (dict): The configuration of the output data.
            hyperparameters (dict): The HyperParameters for the training job.
            environment (dict): The collection of environment variables passed to the job.
            job_name (str): Name of the local training job being run.
        """
        ...
    
    def describe(self):
        """Placeholder docstring"""
        ...
    


class _LocalTransformJob:
    """Placeholder docstring"""
    _CREATING = ...
    _COMPLETED = ...
    def __init__(self, transform_job_name, model_name, local_session=...) -> None:
        ...
    
    def start(self, input_data, output_data, transform_resources, **kwargs):
        """Start the Local Transform Job

        Args:
            input_data (dict): Describes the dataset to be transformed and the
                location where it is stored.
            output_data (dict): Identifies the location where to save the
                results from the transform job
            transform_resources (dict): compute instances for the transform job.
                Currently only supports local or local_gpu
            **kwargs: additional arguments coming from the boto request object
        """
        ...
    
    def describe(self):
        """Describe this _LocalTransformJob

        The response is a JSON-like dictionary that follows the response of
        the boto describe_transform_job() API.

        Returns:
            dict: description of this _LocalTransformJob
        """
        ...
    


class _LocalModel:
    """Placeholder docstring"""
    def __init__(self, model_name, primary_container) -> None:
        ...
    
    def describe(self):
        """Placeholder docstring"""
        ...
    


class _LocalEndpointConfig:
    """Placeholder docstring"""
    def __init__(self, config_name, production_variants, tags=...) -> None:
        ...
    
    def describe(self):
        """Placeholder docstring"""
        ...
    


class _LocalEndpoint:
    """Placeholder docstring"""
    _CREATING = ...
    _IN_SERVICE = ...
    _FAILED = ...
    def __init__(self, endpoint_name, endpoint_config_name, tags=..., local_session=...) -> None:
        ...
    
    def serve(self):
        """Placeholder docstring"""
        ...
    
    def stop(self):
        """Placeholder docstring"""
        ...
    
    def describe(self):
        """Placeholder docstring"""
        ...
    


class _LocalPipeline:
    """Class representing a local SageMaker Pipeline"""
    _executions = ...
    def __init__(self, pipeline, pipeline_description=..., local_session=...) -> None:
        ...
    
    def describe(self):
        """Describe Pipeline"""
        ...
    
    def start(self, **kwargs):
        """Start a pipeline execution. Returns a _LocalPipelineExecution object."""
        ...
    


class _LocalPipelineExecution:
    """Class representing a local SageMaker pipeline execution."""
    def __init__(self, execution_id, pipeline, PipelineParameters=..., PipelineExecutionDescription=..., PipelineExecutionDisplayName=...) -> None:
        ...
    
    def describe(self):
        """Describe Pipeline Execution."""
        ...
    
    def list_steps(self):
        """List pipeline execution steps."""
        ...
    
    def update_execution_success(self):
        """Mark execution as succeeded."""
        ...
    
    def update_execution_failure(self, step_name, failure_message):
        """Mark execution as failed."""
        ...
    
    def update_step_properties(self, step_name, step_properties):
        """Update pipeline step execution output properties."""
        ...
    
    def update_step_failure(self, step_name, failure_message):
        """Mark step_name as failed."""
        ...
    
    def mark_step_executing(self, step_name):
        """Update pipelines step's status to EXECUTING and start_time to now."""
        ...
    


class _LocalPipelineExecutionStep:
    """Class representing a local pipeline execution step."""
    def __init__(self, name, step_type, description, display_name=..., start_time=..., end_time=..., status=..., properties=..., failure_reason=...) -> None:
        ...
    
    def update_step_properties(self, properties):
        """Update pipeline step execution output properties."""
        ...
    
    def update_step_failure(self, failure_message):
        """Update pipeline step execution failure status and message."""
        ...
    
    def mark_step_executing(self):
        """Update pipelines step's status to EXECUTING and start_time to now"""
        ...
    
    def to_list_steps_response(self):
        """Convert to response dict for list_steps calls."""
        ...
    


class _LocalExecutionStatus(enum.Enum):
    """Pipeline execution status."""
    EXECUTING = ...
    SUCCEEDED = ...
    FAILED = ...


