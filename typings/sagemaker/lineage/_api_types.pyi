"""
This type stub file was generated by pyright.
"""

from sagemaker.apiutils import _base_types

"""Contains API objects for SageMaker Lineage."""
class ArtifactSource(_base_types.ApiObject):
    """ArtifactSource.

    Attributes:
        source_uri (str): The URI of the source.
        source_types(list[ArtifactSourceType]): List of source types
    """
    source_uri = ...
    source_types = ...
    def __init__(self, source_uri=..., source_types=..., **kwargs) -> None:
        """Initialize ArtifactSource.

        Args:
            source_uri (str): Source S3 URI of the artifact.
            source_types (array): Array of artifact source types.
            **kwargs: Arbitrary keyword arguments.
        """
        ...
    


class ArtifactSourceType(_base_types.ApiObject):
    """ArtifactSourceType.

    Attributes:
        source_id_type (str): The source id type of artifact source.
        value(str): The value of source
    """
    source_id_type = ...
    value = ...
    def __init__(self, source_id_type=..., value=..., **kwargs) -> None:
        """Initialize ArtifactSourceType.

        Args:
            source_id_type (str): The type of the source id.
            value (str): The source id.
            **kwargs: Arbitrary keyword arguments.
        """
        ...
    


class ActionSource(_base_types.ApiObject):
    """ActionSource.

    Attributes:
        source_uri (str): The URI of the source.
        source_type (str):  The type of the source URI.
    """
    source_uri = ...
    source_type = ...
    def __init__(self, source_uri=..., source_type=..., **kwargs) -> None:
        """Initialize ActionSource.

        Args:
            source_uri (str): The URI of the source.
            source_type (str): The type of the source.
            **kwargs: Arbitrary keyword arguments.
        """
        ...
    


class ContextSource(_base_types.ApiObject):
    """ContextSource.

    Attributes:
        source_uri (str): The URI of the source.
        source_type (str): The type of the source.
    """
    source_uri = ...
    source_type = ...
    def __init__(self, source_uri=..., source_type=..., **kwargs) -> None:
        """Initialize ContextSource.

        Args:
           source_uri (str): The URI of the source.
           source_type (str): The type of the source.
           **kwargs: Arbitrary keyword arguments.
        """
        ...
    


class ArtifactSummary(_base_types.ApiObject):
    """Summary model of an Artifact.

    Attributes:
        artifact_arn (str): ARN of artifact.
        artifact_name (str): Name of artifact.
        source (obj): Source of artifact.
        artifact_type (str): Type of artifact.
        creation_time (datetime): Creation time.
        last_modified_time (datetime): Date last modified.
    """
    _custom_boto_types = ...
    artifact_arn = ...
    artifact_name = ...
    source = ...
    artifact_type = ...
    creation_time = ...
    last_modified_time = ...


class ActionSummary(_base_types.ApiObject):
    """Summary model of an action.

    Attributes:
        action_arn (str): ARN of action.
        action_name (str): Name of action.
        source (obj): Source of action.
        action_type (str): Type of action.
        status (str): The status of the action.
        creation_time (datetime): Creation time.
        last_modified_time (datetime): Date last modified.
    """
    _custom_boto_types = ...
    action_arn = ...
    action_name = ...
    source = ...
    action_type = ...
    status = ...
    creation_time = ...
    last_modified_time = ...


class ContextSummary(_base_types.ApiObject):
    """Summary model of an context.

    Attributes:
        context_arn (str): ARN of context.
        context_name (str): Name of context.
        source (obj): Source of context.
        context_type (str): Type of context.
        creation_time (datetime): Creation time.
        last_modified_time (datetime): Date last modified.
    """
    _custom_boto_types = ...
    context_arn = ...
    context_name = ...
    source = ...
    context_type = ...
    creation_time = ...
    last_modified_time = ...


class UserContext(_base_types.ApiObject):
    """Summary model of a user context.

    Attributes:
        user_profile_arn (str): User profile ARN.
        user_profile_name (str): User profile name.
        domain_id (str): DomainId.
    """
    user_profile_arn = ...
    user_profile_name = ...
    domain_id = ...
    def __init__(self, user_profile_arn=..., user_profile_name=..., domain_id=..., **kwargs) -> None:
        """Initialize UserContext.

        Args:
            user_profile_arn (str): User profile ARN.
            user_profile_name (str): User profile name.
            domain_id (str): DomainId.
            **kwargs: Arbitrary keyword arguments.
        """
        ...
    


class AssociationSummary(_base_types.ApiObject):
    """Summary model of an association.

    Attributes:
        source_arn (str): ARN of source entity.
        source_name (str): Name of the source entity.
        destination_arn (str): ARN of the destination entity.
        destination_name (str): Name of the destination entity.
        source_type (obj): Type of the source entity.
        destination_type (str): Type of destination entity.
        association_type (str): The type of the association.
        creation_time (datetime): Creation time.
        created_by (obj): Context on creator.
    """
    _custom_boto_types = ...
    source_arn = ...
    source_name = ...
    destination_arn = ...
    destination_name = ...
    source_type = ...
    destination_type = ...
    association_type = ...
    creation_time = ...


