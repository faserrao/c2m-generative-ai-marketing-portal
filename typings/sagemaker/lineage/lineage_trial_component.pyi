"""
This type stub file was generated by pyright.
"""

from typing import List
from sagemaker.apiutils import _base_types
from sagemaker.lineage.query import LineageQueryDirectionEnum
from sagemaker.lineage.artifact import Artifact

"""This module contains code to create and manage SageMaker ``LineageTrialComponent``."""
LOGGER = ...
class LineageTrialComponent(_base_types.Record):
    """An Amazon SageMaker, lineage trial component, which is part of a SageMaker lineage.

    A trial component is a stage in a trial.
    Trial components are created automatically within the SageMaker runtime and also can be
    created directly. To automatically associate trial components with a trial and experiment
    supply an experiment config when creating a job.
    For example: https://docs.aws.amazon.com/sagemaker/latest/dg/API_CreateTrainingJob.html

    Attributes:
        trial_component_name (str): The name of the trial component. Generated by SageMaker from the
            name of the source job with a suffix specific to the type of source job.
            trial_component_arn (str): The ARN of the trial component.
        display_name (str): The name of the trial component that will appear in UI,
            such as SageMaker Studio.
        source (obj): A TrialComponentSource object with a source_arn attribute.
        status (str): Status of the source job.
        start_time (datetime): When the source job started.
        end_time (datetime): When the source job ended.
        creation_time (datetime): When the source job was created.
        created_by (obj): Contextual info on which account created the trial component.
        last_modified_time (datetime): When the trial component was last modified.
        last_modified_by (obj): Contextual info on which account last modified the trial component.
        parameters (dict): Dictionary of parameters to the source job.
        input_artifacts (dict): Dictionary of input artifacts.
        output_artifacts (dict): Dictionary of output artifacts.
        metrics (obj): Aggregated metrics for the job.
        parameters_to_remove (list): The hyperparameters to remove from the component.
        input_artifacts_to_remove (list): The input artifacts to remove from the component.
        output_artifacts_to_remove (list): The output artifacts to remove from the component.
        tags (List[dict[str, str]]): A list of tags to associate with the trial component.
    """
    trial_component_name = ...
    trial_component_arn = ...
    display_name = ...
    source = ...
    status = ...
    start_time = ...
    end_time = ...
    creation_time = ...
    created_by = ...
    last_modified_time = ...
    last_modified_by = ...
    parameters = ...
    input_artifacts = ...
    output_artifacts = ...
    metrics = ...
    parameters_to_remove = ...
    input_artifacts_to_remove = ...
    output_artifacts_to_remove = ...
    tags = ...
    _boto_create_method: str = ...
    _boto_load_method: str = ...
    _boto_update_method: str = ...
    _boto_delete_method: str = ...
    _boto_update_members = ...
    _boto_delete_members = ...
    @classmethod
    def load(cls, trial_component_name: str, sagemaker_session=...) -> LineageTrialComponent:
        """Load an existing trial component and return an ``TrialComponent`` object representing it.

        Args:
            trial_component_name (str): Name of the trial component
            sagemaker_session (sagemaker.session.Session): Session object which
                manages interactions with Amazon SageMaker APIs and any other
                AWS services needed. If not specified, one is created using the
                default AWS configuration chain.
        Returns:
            LineageTrialComponent: A SageMaker ``LineageTrialComponent`` object
        """
        ...
    
    def pipeline_execution_arn(self) -> str:
        """Get the ARN for the pipeline execution associated with this trial component (if any).

        Returns:
            str: A pipeline execution ARN.
        """
        ...
    
    def dataset_artifacts(self, direction: LineageQueryDirectionEnum = ...) -> List[Artifact]:
        """Use the lineage query to retrieve datasets that use this trial component.

        Args:
            direction (LineageQueryDirectionEnum, optional): The query direction.

        Returns:
            list of Artifacts: Artifacts representing a dataset.
        """
        ...
    
    def models(self, direction: LineageQueryDirectionEnum = ...) -> List[Artifact]:
        """Use the lineage query to retrieve models that use this trial component.

        Args:
            direction (LineageQueryDirectionEnum, optional): The query direction.

        Returns:
            list of Artifacts: Artifacts representing a dataset.
        """
        ...
    


