"""
This type stub file was generated by pyright.
"""

from typing import Iterator, List, Optional
from datetime import datetime
from sagemaker.session import Session
from sagemaker.apiutils import _base_types
from sagemaker.lineage._api_types import ActionSource, ActionSummary
from sagemaker.lineage.artifact import Artifact
from sagemaker.lineage.query import LineageQueryDirectionEnum

"""This module contains code to create and manage SageMaker ``Actions``."""
class Action(_base_types.Record):
    """An Amazon SageMaker action, which is part of a SageMaker lineage.

    Examples:
        .. code-block:: python

            from sagemaker.lineage import action

            my_action = action.Action.create(
                action_name='MyAction',
                action_type='EndpointDeployment',
                source_uri='s3://...')

            my_action.properties["added"] = "property"
            my_action.save()

            for actn in action.Action.list():
                print(actn)

            my_action.delete()

    Attributes:
        action_arn (str): The ARN of the action.
        action_name (str): The name of the action.
        action_type (str): The type of the action.
        description (str): A description of the action.
        status (str): The status of the action.
        source (obj): The source of the action with a URI and type.
        properties (dict): Dictionary of properties.
        tags (List[dict[str, str]]): A list of tags to associate with the action.
        creation_time (datetime): When the action was created.
        created_by (obj): Contextual info on which account created the action.
        last_modified_time (datetime): When the action was last modified.
        last_modified_by (obj): Contextual info on which account created the action.
    """
    action_arn: str = ...
    action_name: str = ...
    action_type: str = ...
    description: str = ...
    status: str = ...
    source: ActionSource = ...
    properties: dict = ...
    properties_to_remove: list = ...
    tags: list = ...
    creation_time: datetime = ...
    created_by: str = ...
    last_modified_time: datetime = ...
    last_modified_by: str = ...
    _boto_create_method: str = ...
    _boto_load_method: str = ...
    _boto_update_method: str = ...
    _boto_delete_method: str = ...
    _boto_update_members = ...
    _boto_delete_members = ...
    _custom_boto_types = ...
    def save(self) -> Action:
        """Save the state of this Action to SageMaker.

        Returns:
            Action: A SageMaker ``Action``object.
        """
        ...
    
    def delete(self, disassociate: bool = ...): # -> None:
        """Delete the action.

        Args:
            disassociate (bool): When set to true, disassociate incoming and outgoing association.

        """
        ...
    
    @classmethod
    def load(cls, action_name: str, sagemaker_session=...) -> Action:
        """Load an existing action and return an ``Action`` object representing it.

        Args:
            action_name (str): Name of the action
            sagemaker_session (sagemaker.session.Session): Session object which
                manages interactions with Amazon SageMaker APIs and any other
                AWS services needed. If not specified, one is created using the
                default AWS configuration chain.

        Returns:
            Action: A SageMaker ``Action`` object
        """
        ...
    
    def set_tag(self, tag=...):
        """Add a tag to the object.

        Args:

        Returns:
            list({str:str}): a list of key value pairs
        """
        ...
    
    def set_tags(self, tags=...):
        """Add tags to the object.

        Args:
            tags ([{key:value}]): list of key value pairs.

        Returns:
            list({str:str}): a list of key value pairs
        """
        ...
    
    @classmethod
    def create(cls, action_name: str = ..., source_uri: str = ..., source_type: str = ..., action_type: str = ..., description: str = ..., status: str = ..., properties: dict = ..., tags: dict = ..., sagemaker_session: Session = ...) -> Action:
        """Create an action and return an ``Action`` object representing it.

        Args:
            action_name (str): Name of the action
            source_uri (str): Source URI of the action
            source_type (str): Source type of the action
            action_type (str): The type of the action
            description (str): Description of the action
            status (str): Status of the action.
            properties (dict): key/value properties
            tags (dict): AWS tags for the action
            sagemaker_session (sagemaker.session.Session): Session object which
                manages interactions with Amazon SageMaker APIs and any other
                AWS services needed. If not specified, one is created using the
                default AWS configuration chain.

        Returns:
            Action: A SageMaker ``Action`` object.
        """
        ...
    
    @classmethod
    def list(cls, source_uri: Optional[str] = ..., action_type: Optional[str] = ..., created_after: Optional[datetime] = ..., created_before: Optional[datetime] = ..., sort_by: Optional[str] = ..., sort_order: Optional[str] = ..., sagemaker_session: Session = ..., max_results: Optional[int] = ..., next_token: Optional[str] = ...) -> Iterator[ActionSummary]:
        """Return a list of action summaries.

        Args:
            source_uri (str, optional): A source URI.
            action_type (str, optional): An action type.
            created_before (datetime.datetime, optional): Return actions created before this
                instant.
            created_after (datetime.datetime, optional): Return actions created after this instant.
            sort_by (str, optional): Which property to sort results by.
                One of 'SourceArn', 'CreatedBefore', 'CreatedAfter'
            sort_order (str, optional): One of 'Ascending', or 'Descending'.
            max_results (int, optional): maximum number of actions to retrieve
            next_token (str, optional): token for next page of results
            sagemaker_session (sagemaker.session.Session): Session object which
                manages interactions with Amazon SageMaker APIs and any other
                AWS services needed. If not specified, one is created using the
                default AWS configuration chain.

        Returns:
            collections.Iterator[ActionSummary]: An iterator
                over ``ActionSummary`` objects.
        """
        ...
    
    def artifacts(self, direction: LineageQueryDirectionEnum = ...) -> List[Artifact]:
        """Use a lineage query to retrieve all artifacts that use this action.

        Args:
            direction (LineageQueryDirectionEnum, optional): The query direction.

        Returns:
            list of Artifacts: Artifacts.
        """
        ...
    


class ModelPackageApprovalAction(Action):
    """An Amazon SageMaker model package approval action, which is part of a SageMaker lineage."""
    def datasets(self, direction: LineageQueryDirectionEnum = ...) -> List[Artifact]:
        """Use a lineage query to retrieve all upstream datasets that use this action.

        Args:
            direction (LineageQueryDirectionEnum, optional): The query direction.

        Returns:
            list of Artifacts: Artifacts representing a dataset.
        """
        ...
    
    def model_package(self):
        """Get model package from model package approval action.

        Returns:
            Model package.
        """
        ...
    
    def endpoints(self, direction: LineageQueryDirectionEnum = ...) -> List:
        """Use a lineage query to retrieve downstream endpoint contexts that use this action.

        Args:
            direction (LineageQueryDirectionEnum, optional): The query direction.

        Returns:
            list of Contexts: Contexts representing an endpoint.
        """
        ...
    


