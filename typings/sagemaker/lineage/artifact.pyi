"""
This type stub file was generated by pyright.
"""

from datetime import datetime
from typing import Iterator, List, Optional
from sagemaker.apiutils import _base_types
from sagemaker.lineage._api_types import ArtifactSource, ArtifactSummary
from sagemaker.lineage.query import LineageQueryDirectionEnum
from sagemaker.lineage.association import Association

"""This module contains code to create and manage SageMaker ``Artifact``."""
LOGGER = ...
class Artifact(_base_types.Record):
    """An Amazon SageMaker artifact, which is part of a SageMaker lineage.

    Examples:
        .. code-block:: python

            from sagemaker.lineage import artifact

            my_artifact = artifact.Artifact.create(
                artifact_name='MyArtifact',
                artifact_type='S3File',
                source_uri='s3://...')

            my_artifact.properties["added"] = "property"
            my_artifact.save()

            for artfct in artifact.Artifact.list():
                print(artfct)

            my_artifact.delete()

    Attributes:
        artifact_arn (str): The ARN of the artifact.
        artifact_name (str): The name of the artifact.
        artifact_type (str): The type of the artifact.
        source (obj): The source of the artifact with a URI and types.
        properties (dict): Dictionary of properties.
        tags (List[dict[str, str]]): A list of tags to associate with the artifact.
        creation_time (datetime): When the artifact was created.
        created_by (obj): Contextual info on which account created the artifact.
        last_modified_time (datetime): When the artifact was last modified.
        last_modified_by (obj): Contextual info on which account created the artifact.
    """
    artifact_arn: str = ...
    artifact_name: str = ...
    artifact_type: str = ...
    source: ArtifactSource = ...
    properties: dict = ...
    tags: list = ...
    creation_time: datetime = ...
    created_by: str = ...
    last_modified_time: datetime = ...
    last_modified_by: str = ...
    _boto_create_method: str = ...
    _boto_load_method: str = ...
    _boto_update_method: str = ...
    _boto_delete_method: str = ...
    _boto_update_members = ...
    _boto_delete_members = ...
    _custom_boto_types = ...
    def save(self) -> Artifact:
        """Save the state of this Artifact to SageMaker.

        Note that this method must be run from a SageMaker context such as Studio or a training job
        due to restrictions on the CreateArtifact API.

        Returns:
            Artifact: A SageMaker `Artifact` object.
        """
        ...
    
    def delete(self, disassociate: bool = ...): # -> None:
        """Delete the artifact object.

        Args:
            disassociate (bool): When set to true, disassociate incoming and outgoing association.
        """
        ...
    
    @classmethod
    def load(cls, artifact_arn: str, sagemaker_session=...) -> Artifact:
        """Load an existing artifact and return an ``Artifact`` object representing it.

        Args:
            artifact_arn (str): ARN of the artifact
            sagemaker_session (sagemaker.session.Session): Session object which
                manages interactions with Amazon SageMaker APIs and any other
                AWS services needed. If not specified, one is created using the
                default AWS configuration chain.

        Returns:
            Artifact: A SageMaker ``Artifact`` object
        """
        ...
    
    def downstream_trials(self, sagemaker_session=...) -> list:
        """Use the lineage API to retrieve all downstream trials that use this artifact.

        Args:
            sagemaker_session (obj): Sagemaker Session to use. If not provided a default session
                will be created.

        Returns:
            [Trial]: A list of SageMaker `Trial` objects.
        """
        ...
    
    def downstream_trials_v2(self) -> list:
        """Use a lineage query to retrieve all downstream trials that use this artifact.

        Returns:
            [Trial]: A list of SageMaker `Trial` objects.
        """
        ...
    
    def upstream_trials(self) -> List:
        """Use the lineage query to retrieve all upstream trials that use this artifact.

        Returns:
            [Trial]: A list of SageMaker `Trial` objects.
        """
        ...
    
    def set_tag(self, tag=...):
        """Add a tag to the object.

        Args:
            tag (obj): Key value pair to set tag.

        Returns:
            list({str:str}): a list of key value pairs
        """
        ...
    
    def set_tags(self, tags=...):
        """Add tags to the object.

        Args:
            tags ([{key:value}]): list of key value pairs.

        Returns:
            list({str:str}): a list of key value pairs
        """
        ...
    
    @classmethod
    def create(cls, artifact_name: Optional[str] = ..., source_uri: Optional[str] = ..., source_types: Optional[list] = ..., artifact_type: Optional[str] = ..., properties: Optional[dict] = ..., tags: Optional[dict] = ..., sagemaker_session=...) -> Artifact:
        """Create an artifact and return an ``Artifact`` object representing it.

        Args:
            artifact_name (str, optional): Name of the artifact
            source_uri (str, optional): Source URI of the artifact
            source_types (list, optional): Source types
            artifact_type (str, optional): Type of the artifact
            properties (dict, optional): key/value properties
            tags (dict, optional): AWS tags for the artifact
            sagemaker_session (sagemaker.session.Session): Session object which
                manages interactions with Amazon SageMaker APIs and any other
                AWS services needed. If not specified, one is created using the
                default AWS configuration chain.

        Returns:
            Artifact: A SageMaker ``Artifact`` object.
        """
        ...
    
    @classmethod
    def list(cls, source_uri: Optional[str] = ..., artifact_type: Optional[str] = ..., created_before: Optional[datetime] = ..., created_after: Optional[datetime] = ..., sort_by: Optional[str] = ..., sort_order: Optional[str] = ..., max_results: Optional[int] = ..., next_token: Optional[str] = ..., sagemaker_session=...) -> Iterator[ArtifactSummary]:
        """Return a list of artifact summaries.

        Args:
            source_uri (str, optional): A source URI.
            artifact_type (str, optional): An artifact type.
            created_before (datetime.datetime, optional): Return artifacts created before this
                instant.
            created_after (datetime.datetime, optional): Return artifacts created after this
                instant.
            sort_by (str, optional): Which property to sort results by.
                One of 'SourceArn', 'CreatedBefore','CreatedAfter'
            sort_order (str, optional): One of 'Ascending', or 'Descending'.
            max_results (int, optional): maximum number of artifacts to retrieve
            next_token (str, optional): token for next page of results
            sagemaker_session (sagemaker.session.Session): Session object which
                manages interactions with Amazon SageMaker APIs and any other
                AWS services needed. If not specified, one is created using the
                default AWS configuration chain.

        Returns:
            collections.Iterator[ArtifactSummary]: An iterator
                over ``ArtifactSummary`` objects.
        """
        ...
    
    def s3_uri_artifacts(self, s3_uri: str) -> dict:
        """Retrieve a list of artifacts that use provided s3 uri.

        Args:
            s3_uri (str): A S3 URI.

        Returns:
            A list of ``Artifacts``
        """
        ...
    


class ModelArtifact(Artifact):
    """A SageMaker lineage artifact representing a model.

    Common model specific lineage traversals to discover how the model is connected
    to other entities.
    """
    def endpoints(self) -> list:
        """Get association summaries for endpoints deployed with this model.

        Returns:
            [AssociationSummary]: A list of associations representing the endpoints using the model.
        """
        ...
    
    def endpoint_contexts(self, direction: LineageQueryDirectionEnum = ...) -> List[Context]:
        """Get contexts representing endpoints from the models's lineage.

        Args:
            direction (LineageQueryDirectionEnum, optional): The query direction.

        Returns:
            list of Contexts: Contexts representing an endpoint.
        """
        ...
    
    def dataset_artifacts(self, direction: LineageQueryDirectionEnum = ...) -> List[Artifact]:
        """Get artifacts representing datasets from the model's lineage.

        Args:
            direction (LineageQueryDirectionEnum, optional): The query direction.

        Returns:
            list of Artifacts: Artifacts representing a dataset.
        """
        ...
    
    def training_job_arns(self, direction: LineageQueryDirectionEnum = ...) -> List[str]:
        """Get ARNs for all training jobs that appear in the model's lineage.

        Returns:
            list of str: Training job ARNs.
        """
        ...
    
    def pipeline_execution_arn(self, direction: LineageQueryDirectionEnum = ...) -> str:
        """Get the ARN for the pipeline execution associated with this model (if any).

        Returns:
            str: A pipeline execution ARN.
        """
        ...
    


class DatasetArtifact(Artifact):
    """A SageMaker Lineage artifact representing a dataset.

    Encapsulates common dataset specific lineage traversals to discover how the dataset is
    connect to related entities.
    """
    def trained_models(self) -> List[Association]:
        """Given a dataset artifact, get associated trained models.

        Returns:
            list(Association): List of Contexts representing model artifacts.
        """
        ...
    
    def endpoint_contexts(self, direction: LineageQueryDirectionEnum = ...) -> List[Context]:
        """Get contexts representing endpoints from the dataset's lineage.

        Args:
            direction (LineageQueryDirectionEnum, optional): The query direction.

        Returns:
            list of Contexts: Contexts representing an endpoint.
        """
        ...
    
    def upstream_datasets(self) -> List[Artifact]:
        """Use the lineage query to retrieve upstream artifacts that use this dataset artifact.

        Returns:
            list of Artifacts: Artifacts representing an dataset.
        """
        ...
    
    def downstream_datasets(self) -> List[Artifact]:
        """Use the lineage query to retrieve downstream artifacts that use this dataset.

        Returns:
            list of Artifacts: Artifacts representing an dataset.
        """
        ...
    


class ImageArtifact(Artifact):
    """A SageMaker lineage artifact representing an image.

    Common model specific lineage traversals to discover how the image is connected
    to other entities.
    """
    def datasets(self, direction: LineageQueryDirectionEnum) -> List[Artifact]:
        """Use the lineage query to retrieve datasets that use this image artifact.

        Args:
            direction (LineageQueryDirectionEnum): The query direction.

        Returns:
            list of Artifacts: Artifacts representing a dataset.
        """
        ...
    


